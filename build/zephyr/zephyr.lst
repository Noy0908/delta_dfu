
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00010200 <_vector_table>:
   10200:	00 19 00 20 0d 1f 01 00 f9 79 01 00 c5 1e 01 00     ... .....y......
   10210:	c5 1e 01 00 c5 1e 01 00 c5 1e 01 00 00 00 00 00     ................
	...
   1022c:	4d 1b 01 00 c5 1e 01 00 00 00 00 00 f5 1a 01 00     M...............
   1023c:	c5 1e 01 00                                         ....

00010240 <_irq_vector_table>:
   10240:	2d 1c 01 00 2d 1c 01 00 2d 1c 01 00 2d 1c 01 00     -...-...-...-...
   10250:	2d 1c 01 00 2d 1c 01 00 2d 1c 01 00 2d 1c 01 00     -...-...-...-...
   10260:	2d 1c 01 00 2d 1c 01 00 2d 1c 01 00 2d 1c 01 00     -...-...-...-...
   10270:	2d 1c 01 00 2d 1c 01 00 2d 1c 01 00 2d 1c 01 00     -...-...-...-...
   10280:	2d 1c 01 00 2d 1c 01 00 2d 1c 01 00 2d 1c 01 00     -...-...-...-...
   10290:	2d 1c 01 00 2d 1c 01 00 2d 1c 01 00 2d 1c 01 00     -...-...-...-...
   102a0:	2d 1c 01 00 2d 1c 01 00 2d 1c 01 00 2d 1c 01 00     -...-...-...-...
   102b0:	2d 1c 01 00 2d 1c 01 00 2d 1c 01 00 2d 1c 01 00     -...-...-...-...
   102c0:	2d 1c 01 00 2d 1c 01 00 2d 1c 01 00 2d 1c 01 00     -...-...-...-...
   102d0:	2d 1c 01 00 2d 1c 01 00 2d 1c 01 00 2d 1c 01 00     -...-...-...-...
   102e0:	2d 1c 01 00 2d 1c 01 00 2d 1c 01 00 2d 1c 01 00     -...-...-...-...
   102f0:	2d 1c 01 00 2d 1c 01 00 2d 1c 01 00 2d 1c 01 00     -...-...-...-...

Disassembly of section text:

00010300 <__aeabi_uldivmod>:
   10300:	b953      	cbnz	r3, 10318 <__aeabi_uldivmod+0x18>
   10302:	b94a      	cbnz	r2, 10318 <__aeabi_uldivmod+0x18>
   10304:	2900      	cmp	r1, #0
   10306:	bf08      	it	eq
   10308:	2800      	cmpeq	r0, #0
   1030a:	bf1c      	itt	ne
   1030c:	f04f 31ff 	movne.w	r1, #4294967295
   10310:	f04f 30ff 	movne.w	r0, #4294967295
   10314:	f000 b80c 	b.w	10330 <__aeabi_idiv0>
   10318:	f1ad 0c08 	sub.w	ip, sp, #8
   1031c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   10320:	f000 f808 	bl	10334 <__udivmoddi4>
   10324:	f8dd e004 	ldr.w	lr, [sp, #4]
   10328:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   1032c:	b004      	add	sp, #16
   1032e:	4770      	bx	lr

00010330 <__aeabi_idiv0>:
   10330:	4770      	bx	lr
   10332:	bf00      	nop

00010334 <__udivmoddi4>:
   10334:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10338:	4607      	mov	r7, r0
   1033a:	468c      	mov	ip, r1
   1033c:	4608      	mov	r0, r1
   1033e:	9e09      	ldr	r6, [sp, #36]	; 0x24
   10340:	4615      	mov	r5, r2
   10342:	463c      	mov	r4, r7
   10344:	4619      	mov	r1, r3
   10346:	2b00      	cmp	r3, #0
   10348:	f040 80c6 	bne.w	104d8 <__udivmoddi4+0x1a4>
   1034c:	4282      	cmp	r2, r0
   1034e:	fab2 f782 	clz	r7, r2
   10352:	d946      	bls.n	103e2 <__udivmoddi4+0xae>
   10354:	b14f      	cbz	r7, 1036a <__udivmoddi4+0x36>
   10356:	f1c7 0e20 	rsb	lr, r7, #32
   1035a:	fa24 fe0e 	lsr.w	lr, r4, lr
   1035e:	fa00 f307 	lsl.w	r3, r0, r7
   10362:	40bd      	lsls	r5, r7
   10364:	ea4e 0c03 	orr.w	ip, lr, r3
   10368:	40bc      	lsls	r4, r7
   1036a:	ea4f 4815 	mov.w	r8, r5, lsr #16
   1036e:	fa1f fe85 	uxth.w	lr, r5
   10372:	fbbc f9f8 	udiv	r9, ip, r8
   10376:	0c22      	lsrs	r2, r4, #16
   10378:	fb08 c319 	mls	r3, r8, r9, ip
   1037c:	fb09 fa0e 	mul.w	sl, r9, lr
   10380:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
   10384:	459a      	cmp	sl, r3
   10386:	d928      	bls.n	103da <__udivmoddi4+0xa6>
   10388:	18eb      	adds	r3, r5, r3
   1038a:	f109 30ff 	add.w	r0, r9, #4294967295
   1038e:	d204      	bcs.n	1039a <__udivmoddi4+0x66>
   10390:	459a      	cmp	sl, r3
   10392:	d902      	bls.n	1039a <__udivmoddi4+0x66>
   10394:	f1a9 0002 	sub.w	r0, r9, #2
   10398:	442b      	add	r3, r5
   1039a:	eba3 030a 	sub.w	r3, r3, sl
   1039e:	b2a4      	uxth	r4, r4
   103a0:	fbb3 f2f8 	udiv	r2, r3, r8
   103a4:	fb08 3312 	mls	r3, r8, r2, r3
   103a8:	fb02 fe0e 	mul.w	lr, r2, lr
   103ac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
   103b0:	45a6      	cmp	lr, r4
   103b2:	d914      	bls.n	103de <__udivmoddi4+0xaa>
   103b4:	192c      	adds	r4, r5, r4
   103b6:	f102 33ff 	add.w	r3, r2, #4294967295
   103ba:	d203      	bcs.n	103c4 <__udivmoddi4+0x90>
   103bc:	45a6      	cmp	lr, r4
   103be:	d901      	bls.n	103c4 <__udivmoddi4+0x90>
   103c0:	1e93      	subs	r3, r2, #2
   103c2:	442c      	add	r4, r5
   103c4:	eba4 040e 	sub.w	r4, r4, lr
   103c8:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
   103cc:	b11e      	cbz	r6, 103d6 <__udivmoddi4+0xa2>
   103ce:	40fc      	lsrs	r4, r7
   103d0:	2300      	movs	r3, #0
   103d2:	6034      	str	r4, [r6, #0]
   103d4:	6073      	str	r3, [r6, #4]
   103d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   103da:	4648      	mov	r0, r9
   103dc:	e7dd      	b.n	1039a <__udivmoddi4+0x66>
   103de:	4613      	mov	r3, r2
   103e0:	e7f0      	b.n	103c4 <__udivmoddi4+0x90>
   103e2:	b902      	cbnz	r2, 103e6 <__udivmoddi4+0xb2>
   103e4:	deff      	udf	#255	; 0xff
   103e6:	bb87      	cbnz	r7, 1044a <__udivmoddi4+0x116>
   103e8:	1a83      	subs	r3, r0, r2
   103ea:	2101      	movs	r1, #1
   103ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
   103f0:	b2aa      	uxth	r2, r5
   103f2:	fbb3 fcfe 	udiv	ip, r3, lr
   103f6:	0c20      	lsrs	r0, r4, #16
   103f8:	fb0e 331c 	mls	r3, lr, ip, r3
   103fc:	fb0c f802 	mul.w	r8, ip, r2
   10400:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
   10404:	4598      	cmp	r8, r3
   10406:	d963      	bls.n	104d0 <__udivmoddi4+0x19c>
   10408:	18eb      	adds	r3, r5, r3
   1040a:	f10c 30ff 	add.w	r0, ip, #4294967295
   1040e:	d204      	bcs.n	1041a <__udivmoddi4+0xe6>
   10410:	4598      	cmp	r8, r3
   10412:	d902      	bls.n	1041a <__udivmoddi4+0xe6>
   10414:	f1ac 0002 	sub.w	r0, ip, #2
   10418:	442b      	add	r3, r5
   1041a:	eba3 0308 	sub.w	r3, r3, r8
   1041e:	b2a4      	uxth	r4, r4
   10420:	fbb3 fcfe 	udiv	ip, r3, lr
   10424:	fb0e 331c 	mls	r3, lr, ip, r3
   10428:	fb0c f202 	mul.w	r2, ip, r2
   1042c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
   10430:	42a2      	cmp	r2, r4
   10432:	d94f      	bls.n	104d4 <__udivmoddi4+0x1a0>
   10434:	192c      	adds	r4, r5, r4
   10436:	f10c 33ff 	add.w	r3, ip, #4294967295
   1043a:	d204      	bcs.n	10446 <__udivmoddi4+0x112>
   1043c:	42a2      	cmp	r2, r4
   1043e:	d902      	bls.n	10446 <__udivmoddi4+0x112>
   10440:	f1ac 0302 	sub.w	r3, ip, #2
   10444:	442c      	add	r4, r5
   10446:	1aa4      	subs	r4, r4, r2
   10448:	e7be      	b.n	103c8 <__udivmoddi4+0x94>
   1044a:	f1c7 0c20 	rsb	ip, r7, #32
   1044e:	fa20 f80c 	lsr.w	r8, r0, ip
   10452:	fa00 f307 	lsl.w	r3, r0, r7
   10456:	fa24 fc0c 	lsr.w	ip, r4, ip
   1045a:	40bd      	lsls	r5, r7
   1045c:	ea4c 0203 	orr.w	r2, ip, r3
   10460:	ea4f 4e15 	mov.w	lr, r5, lsr #16
   10464:	b2ab      	uxth	r3, r5
   10466:	fbb8 fcfe 	udiv	ip, r8, lr
   1046a:	0c11      	lsrs	r1, r2, #16
   1046c:	fb0e 801c 	mls	r0, lr, ip, r8
   10470:	fb0c f903 	mul.w	r9, ip, r3
   10474:	ea41 4000 	orr.w	r0, r1, r0, lsl #16
   10478:	4581      	cmp	r9, r0
   1047a:	fa04 f407 	lsl.w	r4, r4, r7
   1047e:	d923      	bls.n	104c8 <__udivmoddi4+0x194>
   10480:	1828      	adds	r0, r5, r0
   10482:	f10c 31ff 	add.w	r1, ip, #4294967295
   10486:	d204      	bcs.n	10492 <__udivmoddi4+0x15e>
   10488:	4581      	cmp	r9, r0
   1048a:	d902      	bls.n	10492 <__udivmoddi4+0x15e>
   1048c:	f1ac 0102 	sub.w	r1, ip, #2
   10490:	4428      	add	r0, r5
   10492:	eba0 0009 	sub.w	r0, r0, r9
   10496:	b292      	uxth	r2, r2
   10498:	fbb0 fcfe 	udiv	ip, r0, lr
   1049c:	fb0e 001c 	mls	r0, lr, ip, r0
   104a0:	fb0c f803 	mul.w	r8, ip, r3
   104a4:	ea42 4300 	orr.w	r3, r2, r0, lsl #16
   104a8:	4598      	cmp	r8, r3
   104aa:	d90f      	bls.n	104cc <__udivmoddi4+0x198>
   104ac:	18eb      	adds	r3, r5, r3
   104ae:	f10c 32ff 	add.w	r2, ip, #4294967295
   104b2:	d204      	bcs.n	104be <__udivmoddi4+0x18a>
   104b4:	4598      	cmp	r8, r3
   104b6:	d902      	bls.n	104be <__udivmoddi4+0x18a>
   104b8:	f1ac 0202 	sub.w	r2, ip, #2
   104bc:	442b      	add	r3, r5
   104be:	eba3 0308 	sub.w	r3, r3, r8
   104c2:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
   104c6:	e791      	b.n	103ec <__udivmoddi4+0xb8>
   104c8:	4661      	mov	r1, ip
   104ca:	e7e2      	b.n	10492 <__udivmoddi4+0x15e>
   104cc:	4662      	mov	r2, ip
   104ce:	e7f6      	b.n	104be <__udivmoddi4+0x18a>
   104d0:	4660      	mov	r0, ip
   104d2:	e7a2      	b.n	1041a <__udivmoddi4+0xe6>
   104d4:	4663      	mov	r3, ip
   104d6:	e7b6      	b.n	10446 <__udivmoddi4+0x112>
   104d8:	4283      	cmp	r3, r0
   104da:	d905      	bls.n	104e8 <__udivmoddi4+0x1b4>
   104dc:	b10e      	cbz	r6, 104e2 <__udivmoddi4+0x1ae>
   104de:	e9c6 7000 	strd	r7, r0, [r6]
   104e2:	2100      	movs	r1, #0
   104e4:	4608      	mov	r0, r1
   104e6:	e776      	b.n	103d6 <__udivmoddi4+0xa2>
   104e8:	fab3 f183 	clz	r1, r3
   104ec:	b981      	cbnz	r1, 10510 <__udivmoddi4+0x1dc>
   104ee:	4283      	cmp	r3, r0
   104f0:	d301      	bcc.n	104f6 <__udivmoddi4+0x1c2>
   104f2:	42ba      	cmp	r2, r7
   104f4:	d80a      	bhi.n	1050c <__udivmoddi4+0x1d8>
   104f6:	1abc      	subs	r4, r7, r2
   104f8:	eb60 0303 	sbc.w	r3, r0, r3
   104fc:	2001      	movs	r0, #1
   104fe:	469c      	mov	ip, r3
   10500:	2e00      	cmp	r6, #0
   10502:	d068      	beq.n	105d6 <__udivmoddi4+0x2a2>
   10504:	e9c6 4c00 	strd	r4, ip, [r6]
   10508:	2100      	movs	r1, #0
   1050a:	e764      	b.n	103d6 <__udivmoddi4+0xa2>
   1050c:	4608      	mov	r0, r1
   1050e:	e7f7      	b.n	10500 <__udivmoddi4+0x1cc>
   10510:	f1c1 0c20 	rsb	ip, r1, #32
   10514:	408b      	lsls	r3, r1
   10516:	fa22 f40c 	lsr.w	r4, r2, ip
   1051a:	431c      	orrs	r4, r3
   1051c:	fa02 f501 	lsl.w	r5, r2, r1
   10520:	fa00 f301 	lsl.w	r3, r0, r1
   10524:	fa27 f20c 	lsr.w	r2, r7, ip
   10528:	fa20 fb0c 	lsr.w	fp, r0, ip
   1052c:	ea4f 4914 	mov.w	r9, r4, lsr #16
   10530:	4313      	orrs	r3, r2
   10532:	fbbb f8f9 	udiv	r8, fp, r9
   10536:	fa1f fe84 	uxth.w	lr, r4
   1053a:	fb09 bb18 	mls	fp, r9, r8, fp
   1053e:	0c1a      	lsrs	r2, r3, #16
   10540:	fb08 fa0e 	mul.w	sl, r8, lr
   10544:	ea42 420b 	orr.w	r2, r2, fp, lsl #16
   10548:	4592      	cmp	sl, r2
   1054a:	fa07 f701 	lsl.w	r7, r7, r1
   1054e:	d93e      	bls.n	105ce <__udivmoddi4+0x29a>
   10550:	18a2      	adds	r2, r4, r2
   10552:	f108 30ff 	add.w	r0, r8, #4294967295
   10556:	d204      	bcs.n	10562 <__udivmoddi4+0x22e>
   10558:	4592      	cmp	sl, r2
   1055a:	d902      	bls.n	10562 <__udivmoddi4+0x22e>
   1055c:	f1a8 0002 	sub.w	r0, r8, #2
   10560:	4422      	add	r2, r4
   10562:	eba2 020a 	sub.w	r2, r2, sl
   10566:	b29b      	uxth	r3, r3
   10568:	fbb2 f8f9 	udiv	r8, r2, r9
   1056c:	fb09 2218 	mls	r2, r9, r8, r2
   10570:	fb08 fe0e 	mul.w	lr, r8, lr
   10574:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   10578:	4596      	cmp	lr, r2
   1057a:	d92a      	bls.n	105d2 <__udivmoddi4+0x29e>
   1057c:	18a2      	adds	r2, r4, r2
   1057e:	f108 33ff 	add.w	r3, r8, #4294967295
   10582:	d204      	bcs.n	1058e <__udivmoddi4+0x25a>
   10584:	4596      	cmp	lr, r2
   10586:	d902      	bls.n	1058e <__udivmoddi4+0x25a>
   10588:	f1a8 0302 	sub.w	r3, r8, #2
   1058c:	4422      	add	r2, r4
   1058e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
   10592:	fba0 9305 	umull	r9, r3, r0, r5
   10596:	eba2 020e 	sub.w	r2, r2, lr
   1059a:	429a      	cmp	r2, r3
   1059c:	46ce      	mov	lr, r9
   1059e:	4698      	mov	r8, r3
   105a0:	d302      	bcc.n	105a8 <__udivmoddi4+0x274>
   105a2:	d106      	bne.n	105b2 <__udivmoddi4+0x27e>
   105a4:	454f      	cmp	r7, r9
   105a6:	d204      	bcs.n	105b2 <__udivmoddi4+0x27e>
   105a8:	ebb9 0e05 	subs.w	lr, r9, r5
   105ac:	eb63 0804 	sbc.w	r8, r3, r4
   105b0:	3801      	subs	r0, #1
   105b2:	b186      	cbz	r6, 105d6 <__udivmoddi4+0x2a2>
   105b4:	ebb7 030e 	subs.w	r3, r7, lr
   105b8:	eb62 0708 	sbc.w	r7, r2, r8
   105bc:	fa07 fc0c 	lsl.w	ip, r7, ip
   105c0:	40cb      	lsrs	r3, r1
   105c2:	ea4c 0303 	orr.w	r3, ip, r3
   105c6:	40cf      	lsrs	r7, r1
   105c8:	e9c6 3700 	strd	r3, r7, [r6]
   105cc:	e79c      	b.n	10508 <__udivmoddi4+0x1d4>
   105ce:	4640      	mov	r0, r8
   105d0:	e7c7      	b.n	10562 <__udivmoddi4+0x22e>
   105d2:	4643      	mov	r3, r8
   105d4:	e7db      	b.n	1058e <__udivmoddi4+0x25a>
   105d6:	4631      	mov	r1, r6
   105d8:	e6fd      	b.n	103d6 <__udivmoddi4+0xa2>
	...

000105dc <button_pressed>:
 * to turn on the LED whenever the button is pressed.
 */
static struct gpio_dt_spec led = GPIO_DT_SPEC_GET_OR(DT_ALIAS(led0), gpios,{0});

void button_pressed(const struct device *dev, struct gpio_callback *cb, uint32_t pins)
{
   105dc:	b508      	push	{r3, lr}
#ifndef _ASMLANGUAGE
extern uint32_t sys_clock_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return sys_clock_cycle_get_32();
   105de:	f008 f98e 	bl	188fe <sys_clock_cycle_get_32>
   105e2:	4601      	mov	r1, r0
	printk("Button pressed at %" PRIu32 "\n", k_cycle_get_32());
   105e4:	4805      	ldr	r0, [pc, #20]	; (105fc <button_pressed+0x20>)
   105e6:	f006 fdf6 	bl	171d6 <printk>
 * @param spec GPIO specification from devicetree
 * @return a value from gpio_pin_toggle()
 */
static inline int gpio_pin_toggle_dt(const struct gpio_dt_spec *spec)
{
	return gpio_pin_toggle(spec->port, spec->pin);
   105ea:	4b05      	ldr	r3, [pc, #20]	; (10600 <button_pressed+0x24>)
   105ec:	6818      	ldr	r0, [r3, #0]
   105ee:	791b      	ldrb	r3, [r3, #4]
	return gpio_port_toggle_bits(port, (gpio_port_pins_t)BIT(pin));
   105f0:	2101      	movs	r1, #1
   105f2:	4099      	lsls	r1, r3
	const struct gpio_driver_api *api =
   105f4:	6883      	ldr	r3, [r0, #8]
	return api->port_toggle_bits(port, pins);
   105f6:	695b      	ldr	r3, [r3, #20]
   105f8:	4798      	blx	r3
	gpio_pin_toggle_dt(&led);
}
   105fa:	bd08      	pop	{r3, pc}
   105fc:	00019878 	.word	0x00019878
   10600:	20000000 	.word	0x20000000

00010604 <main>:

void main(void)
{
   10604:	b530      	push	{r4, r5, lr}
   10606:	b083      	sub	sp, #12
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
   10608:	4853      	ldr	r0, [pc, #332]	; (10758 <main+0x154>)
   1060a:	f008 fca2 	bl	18f52 <z_device_is_ready>
	int ret;
	struct flash_mem *flash_pt;

	if (!device_is_ready(button.port)) {
   1060e:	2800      	cmp	r0, #0
   10610:	d058      	beq.n	106c4 <main+0xc0>
		printk("Error: button device %s is not ready\n", button.port->name);
		return;
	}

	ret = gpio_pin_configure_dt(&button, GPIO_INPUT);
   10612:	f44f 3180 	mov.w	r1, #65536	; 0x10000
   10616:	4851      	ldr	r0, [pc, #324]	; (1075c <main+0x158>)
   10618:	f006 f8e8 	bl	167ec <gpio_pin_configure_dt>
	if (ret != 0) {
   1061c:	4601      	mov	r1, r0
   1061e:	2800      	cmp	r0, #0
   10620:	d157      	bne.n	106d2 <main+0xce>
	const struct gpio_driver_api *api =
   10622:	4b4d      	ldr	r3, [pc, #308]	; (10758 <main+0x154>)
   10624:	6899      	ldr	r1, [r3, #8]
	const struct gpio_driver_data *const data =
   10626:	691b      	ldr	r3, [r3, #16]
	    ((data->invert & (gpio_port_pins_t)BIT(pin)) != 0)) {
   10628:	681b      	ldr	r3, [r3, #0]
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
   1062a:	f413 6f00 	tst.w	r3, #2048	; 0x800
   1062e:	d157      	bne.n	106e0 <main+0xdc>
   10630:	f04f 62b8 	mov.w	r2, #96468992	; 0x5c00000
	return api->pin_interrupt_configure(port, pin, mode, trig);
   10634:	698c      	ldr	r4, [r1, #24]
   10636:	f002 63c0 	and.w	r3, r2, #100663296	; 0x6000000
   1063a:	f002 72a0 	and.w	r2, r2, #20971520	; 0x1400000
   1063e:	210b      	movs	r1, #11
   10640:	4845      	ldr	r0, [pc, #276]	; (10758 <main+0x154>)
   10642:	47a0      	blx	r4
		printk("Error %d: failed to configure %s pin %d\n", ret, button.port->name, button.pin);
		return;
	}

	ret = gpio_pin_interrupt_configure_dt(&button, GPIO_INT_EDGE_TO_ACTIVE);
	if (ret != 0) {
   10644:	4604      	mov	r4, r0
   10646:	2800      	cmp	r0, #0
   10648:	d14d      	bne.n	106e6 <main+0xe2>
				      gpio_port_pins_t pin_mask)
{
	__ASSERT(callback, "Callback pointer should not be NULL");
	__ASSERT(handler, "Callback handler pointer should not be NULL");

	callback->handler = handler;
   1064a:	4b45      	ldr	r3, [pc, #276]	; (10760 <main+0x15c>)
   1064c:	4a45      	ldr	r2, [pc, #276]	; (10764 <main+0x160>)
   1064e:	605a      	str	r2, [r3, #4]
	callback->pin_mask = pin_mask;
   10650:	f44f 6200 	mov.w	r2, #2048	; 0x800
   10654:	609a      	str	r2, [r3, #8]
 * Note: enables to add as many callback as needed on the same port.
 */
static inline int gpio_add_callback(const struct device *port,
				    struct gpio_callback *callback)
{
	const struct gpio_driver_api *api =
   10656:	4b40      	ldr	r3, [pc, #256]	; (10758 <main+0x154>)
   10658:	689b      	ldr	r3, [r3, #8]
		(const struct gpio_driver_api *)port->api;

	if (api->manage_callback == NULL) {
   1065a:	69db      	ldr	r3, [r3, #28]
   1065c:	b11b      	cbz	r3, 10666 <main+0x62>
		return -ENOTSUP;
	}

	return api->manage_callback(port, callback, true);
   1065e:	2201      	movs	r2, #1
   10660:	493f      	ldr	r1, [pc, #252]	; (10760 <main+0x15c>)
   10662:	483d      	ldr	r0, [pc, #244]	; (10758 <main+0x154>)
   10664:	4798      	blx	r3
		return;
	}

	gpio_init_callback(&button_cb_data, button_pressed, BIT(button.pin));
	gpio_add_callback(button.port, &button_cb_data);
	printk("Set up button at %s pin %d\n", button.port->name, button.pin);
   10666:	220b      	movs	r2, #11
   10668:	4b3b      	ldr	r3, [pc, #236]	; (10758 <main+0x154>)
   1066a:	6819      	ldr	r1, [r3, #0]
   1066c:	483e      	ldr	r0, [pc, #248]	; (10768 <main+0x164>)
   1066e:	f006 fdb2 	bl	171d6 <printk>

	if (led.port && !device_is_ready(led.port)) {
   10672:	4b3e      	ldr	r3, [pc, #248]	; (1076c <main+0x168>)
   10674:	6818      	ldr	r0, [r3, #0]
   10676:	b118      	cbz	r0, 10680 <main+0x7c>
   10678:	f008 fc6b 	bl	18f52 <z_device_is_ready>
   1067c:	2800      	cmp	r0, #0
   1067e:	d03a      	beq.n	106f6 <main+0xf2>
		printk("Error %d: LED device %s is not ready; ignoring it\n", ret, led.port->name);
		led.port = NULL;
	}
	if (led.port) {
   10680:	4b3a      	ldr	r3, [pc, #232]	; (1076c <main+0x168>)
   10682:	681b      	ldr	r3, [r3, #0]
   10684:	b183      	cbz	r3, 106a8 <main+0xa4>
		ret = gpio_pin_configure_dt(&led, GPIO_OUTPUT);
   10686:	f44f 3100 	mov.w	r1, #131072	; 0x20000
   1068a:	4838      	ldr	r0, [pc, #224]	; (1076c <main+0x168>)
   1068c:	f006 f8ae 	bl	167ec <gpio_pin_configure_dt>
		if (ret != 0) {
   10690:	4601      	mov	r1, r0
   10692:	2800      	cmp	r0, #0
   10694:	d039      	beq.n	1070a <main+0x106>
			printk("Error %d: failed to configure LED device %s pin %d\n", ret, led.port->name, led.pin);
   10696:	4c35      	ldr	r4, [pc, #212]	; (1076c <main+0x168>)
   10698:	6822      	ldr	r2, [r4, #0]
   1069a:	7923      	ldrb	r3, [r4, #4]
   1069c:	6812      	ldr	r2, [r2, #0]
   1069e:	4834      	ldr	r0, [pc, #208]	; (10770 <main+0x16c>)
   106a0:	f006 fd99 	bl	171d6 <printk>
			led.port = NULL;
   106a4:	2300      	movs	r3, #0
   106a6:	6023      	str	r3, [r4, #0]
		} else {
			printk("Set up LED at %s pin %d\n", led.port->name, led.pin);
		}
	}

	flash_pt = k_malloc(sizeof(struct flash_mem));
   106a8:	2020      	movs	r0, #32
   106aa:	f008 fef2 	bl	19492 <k_malloc>
   106ae:	4604      	mov	r4, r0
	flash_pt->device = DEVICE_DT_GET(FLASH_NODEID);
   106b0:	4b30      	ldr	r3, [pc, #192]	; (10774 <main+0x170>)
   106b2:	6003      	str	r3, [r0, #0]
	// if(0 == rc)
	// {
	// 	printk("Flash read success!!!\r\n");
	// }

	printk("Press the button\n");
   106b4:	4830      	ldr	r0, [pc, #192]	; (10778 <main+0x174>)
   106b6:	f006 fd8e 	bl	171d6 <printk>
	if (led.port) {
   106ba:	4b2c      	ldr	r3, [pc, #176]	; (1076c <main+0x168>)
   106bc:	681b      	ldr	r3, [r3, #0]
   106be:	2b00      	cmp	r3, #0
   106c0:	d12d      	bne.n	1071e <main+0x11a>
   106c2:	e004      	b.n	106ce <main+0xca>
		printk("Error: button device %s is not ready\n", button.port->name);
   106c4:	4b24      	ldr	r3, [pc, #144]	; (10758 <main+0x154>)
   106c6:	6819      	ldr	r1, [r3, #0]
   106c8:	482c      	ldr	r0, [pc, #176]	; (1077c <main+0x178>)
   106ca:	f006 fd84 	bl	171d6 <printk>
				}
			}
			//k_msleep(SLEEP_TIME_MS);
		}
	}
}
   106ce:	b003      	add	sp, #12
   106d0:	bd30      	pop	{r4, r5, pc}
		printk("Error %d: failed to configure %s pin %d\n", ret, button.port->name, button.pin);
   106d2:	230b      	movs	r3, #11
   106d4:	4a20      	ldr	r2, [pc, #128]	; (10758 <main+0x154>)
   106d6:	6812      	ldr	r2, [r2, #0]
   106d8:	4829      	ldr	r0, [pc, #164]	; (10780 <main+0x17c>)
   106da:	f006 fd7c 	bl	171d6 <printk>
		return;
   106de:	e7f6      	b.n	106ce <main+0xca>
		flags ^= (GPIO_INT_LOW_0 | GPIO_INT_HIGH_1);
   106e0:	f04f 7270 	mov.w	r2, #62914560	; 0x3c00000
   106e4:	e7a6      	b.n	10634 <main+0x30>
		printk("Error %d: failed to configure interrupt on %s pin %d\n", ret, button.port->name, button.pin);
   106e6:	230b      	movs	r3, #11
   106e8:	4a1b      	ldr	r2, [pc, #108]	; (10758 <main+0x154>)
   106ea:	6812      	ldr	r2, [r2, #0]
   106ec:	4601      	mov	r1, r0
   106ee:	4825      	ldr	r0, [pc, #148]	; (10784 <main+0x180>)
   106f0:	f006 fd71 	bl	171d6 <printk>
		return;
   106f4:	e7eb      	b.n	106ce <main+0xca>
		printk("Error %d: LED device %s is not ready; ignoring it\n", ret, led.port->name);
   106f6:	4d1d      	ldr	r5, [pc, #116]	; (1076c <main+0x168>)
   106f8:	682b      	ldr	r3, [r5, #0]
   106fa:	681a      	ldr	r2, [r3, #0]
   106fc:	4621      	mov	r1, r4
   106fe:	4822      	ldr	r0, [pc, #136]	; (10788 <main+0x184>)
   10700:	f006 fd69 	bl	171d6 <printk>
		led.port = NULL;
   10704:	2300      	movs	r3, #0
   10706:	602b      	str	r3, [r5, #0]
   10708:	e7ba      	b.n	10680 <main+0x7c>
			printk("Set up LED at %s pin %d\n", led.port->name, led.pin);
   1070a:	4b18      	ldr	r3, [pc, #96]	; (1076c <main+0x168>)
   1070c:	6819      	ldr	r1, [r3, #0]
   1070e:	791a      	ldrb	r2, [r3, #4]
   10710:	6809      	ldr	r1, [r1, #0]
   10712:	481e      	ldr	r0, [pc, #120]	; (1078c <main+0x188>)
   10714:	f006 fd5f 	bl	171d6 <printk>
   10718:	e7c6      	b.n	106a8 <main+0xa4>
			if (val > 0) {
   1071a:	2b00      	cmp	r3, #0
   1071c:	dc11      	bgt.n	10742 <main+0x13e>
	const struct gpio_driver_data *const data =
   1071e:	480e      	ldr	r0, [pc, #56]	; (10758 <main+0x154>)
   10720:	6905      	ldr	r5, [r0, #16]
	const struct gpio_driver_api *api =
   10722:	6883      	ldr	r3, [r0, #8]
	return api->port_get_raw(port, value);
   10724:	685b      	ldr	r3, [r3, #4]
   10726:	a901      	add	r1, sp, #4
   10728:	4798      	blx	r3
	if (ret == 0) {
   1072a:	4603      	mov	r3, r0
   1072c:	b918      	cbnz	r0, 10736 <main+0x132>
		*value ^= data->invert;
   1072e:	6829      	ldr	r1, [r5, #0]
   10730:	9a01      	ldr	r2, [sp, #4]
   10732:	404a      	eors	r2, r1
   10734:	9201      	str	r2, [sp, #4]
	if (ret == 0) {
   10736:	2b00      	cmp	r3, #0
   10738:	d1ef      	bne.n	1071a <main+0x116>
		ret = (value & (gpio_port_pins_t)BIT(pin)) != 0 ? 1 : 0;
   1073a:	9b01      	ldr	r3, [sp, #4]
   1073c:	f3c3 23c0 	ubfx	r3, r3, #11, #1
   10740:	e7eb      	b.n	1071a <main+0x116>
				printk("start delta upgrade to version %s!!!please wait...... \r\n", FW_VERSION);
   10742:	4913      	ldr	r1, [pc, #76]	; (10790 <main+0x18c>)
   10744:	4813      	ldr	r0, [pc, #76]	; (10794 <main+0x190>)
   10746:	f006 fd46 	bl	171d6 <printk>
				ret = delta_check_and_apply(flash_pt);
   1074a:	4620      	mov	r0, r4
   1074c:	f000 f94a 	bl	109e4 <delta_check_and_apply>
				if (ret) {
   10750:	2800      	cmp	r0, #0
   10752:	d0e4      	beq.n	1071e <main+0x11a>
   10754:	e7bb      	b.n	106ce <main+0xca>
   10756:	bf00      	nop
   10758:	000195f4 	.word	0x000195f4
   1075c:	00019a14 	.word	0x00019a14
   10760:	200003a8 	.word	0x200003a8
   10764:	000105dd 	.word	0x000105dd
   10768:	0001991c 	.word	0x0001991c
   1076c:	20000000 	.word	0x20000000
   10770:	0001996c 	.word	0x0001996c
   10774:	0001963c 	.word	0x0001963c
   10778:	000199bc 	.word	0x000199bc
   1077c:	00019890 	.word	0x00019890
   10780:	000198b8 	.word	0x000198b8
   10784:	000198e4 	.word	0x000198e4
   10788:	00019938 	.word	0x00019938
   1078c:	000199a0 	.word	0x000199a0
   10790:	000199d0 	.word	0x000199d0
   10794:	000199d8 	.word	0x000199d8

00010798 <patch_reader_heatshrink_init>:
    }
}

static int patch_reader_heatshrink_init(
    struct detools_apply_patch_patch_reader_t *self_p)
{
   10798:	b510      	push	{r4, lr}
   1079a:	4604      	mov	r4, r0
    struct detools_apply_patch_patch_reader_heatshrink_t *heatshrink_p;

    heatshrink_p = &self_p->compression.heatshrink;
    heatshrink_p->window_sz2 = -1;
   1079c:	23ff      	movs	r3, #255	; 0xff
   1079e:	7503      	strb	r3, [r0, #20]
    heatshrink_p->lookahead_sz2 = -1;
   107a0:	7543      	strb	r3, [r0, #21]
    heatshrink_decoder_reset(&heatshrink_p->decoder);
   107a2:	3016      	adds	r0, #22
   107a4:	f006 fbfb 	bl	16f9e <heatshrink_decoder_reset>
    self_p->destroy = patch_reader_heatshrink_destroy;
   107a8:	4b03      	ldr	r3, [pc, #12]	; (107b8 <patch_reader_heatshrink_init+0x20>)
   107aa:	f8c4 3224 	str.w	r3, [r4, #548]	; 0x224
    self_p->decompress = patch_reader_heatshrink_decompress;
   107ae:	4b03      	ldr	r3, [pc, #12]	; (107bc <patch_reader_heatshrink_init+0x24>)
   107b0:	f8c4 3228 	str.w	r3, [r4, #552]	; 0x228

    return (0);
}
   107b4:	2000      	movs	r0, #0
   107b6:	bd10      	pop	{r4, pc}
   107b8:	00016bf3 	.word	0x00016bf3
   107bc:	00016b31 	.word	0x00016b31

000107c0 <callbacks_process>:

static int callbacks_process(struct detools_apply_patch_t *apply_patch_p,
                             detools_read_t patch_read,
                             size_t patch_size,
                             void *arg_p)
{
   107c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   107c4:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
   107c8:	4681      	mov	r9, r0
   107ca:	4688      	mov	r8, r1
   107cc:	4615      	mov	r5, r2
   107ce:	461f      	mov	r7, r3
    size_t patch_offset;
    size_t chunk_size;
    uint8_t chunk[512];

    res = 0;
    patch_offset = 0;
   107d0:	2600      	movs	r6, #0
    res = 0;
   107d2:	46b2      	mov	sl, r6

    while ((patch_offset < patch_size) && (res == 0)) {
   107d4:	42ae      	cmp	r6, r5
   107d6:	d222      	bcs.n	1081e <callbacks_process+0x5e>
   107d8:	f1ba 0f00 	cmp.w	sl, #0
   107dc:	d11f      	bne.n	1081e <callbacks_process+0x5e>
        chunk_size = MIN(patch_size - patch_offset, 512);
   107de:	1bac      	subs	r4, r5, r6
   107e0:	f5b4 7f00 	cmp.w	r4, #512	; 0x200
   107e4:	bf28      	it	cs
   107e6:	f44f 7400 	movcs.w	r4, #512	; 0x200
        res = patch_read(arg_p, &chunk[0], chunk_size);
   107ea:	4622      	mov	r2, r4
   107ec:	4669      	mov	r1, sp
   107ee:	4638      	mov	r0, r7
   107f0:	47c0      	blx	r8
                                              &chunk[0],
                                              chunk_size);
            patch_offset += chunk_size;
            printf("patch_offset=%d\t patch_size=%d\t progress = %d%%\n", patch_offset,patch_size,patch_offset*100/patch_size);
        } else {
            res = -DETOOLS_IO_FAILED;
   107f2:	f06f 0a09 	mvn.w	sl, #9
        if (res == 0) {
   107f6:	2800      	cmp	r0, #0
   107f8:	d1ec      	bne.n	107d4 <callbacks_process+0x14>
            res = detools_apply_patch_process(apply_patch_p,
   107fa:	4622      	mov	r2, r4
   107fc:	4669      	mov	r1, sp
   107fe:	4648      	mov	r0, r9
   10800:	f006 fa86 	bl	16d10 <detools_apply_patch_process>
   10804:	4682      	mov	sl, r0
            patch_offset += chunk_size;
   10806:	4426      	add	r6, r4
            printf("patch_offset=%d\t patch_size=%d\t progress = %d%%\n", patch_offset,patch_size,patch_offset*100/patch_size);
   10808:	2364      	movs	r3, #100	; 0x64
   1080a:	fb06 f303 	mul.w	r3, r6, r3
   1080e:	fbb3 f3f5 	udiv	r3, r3, r5
   10812:	462a      	mov	r2, r5
   10814:	4631      	mov	r1, r6
   10816:	480a      	ldr	r0, [pc, #40]	; (10840 <callbacks_process+0x80>)
   10818:	f001 fca4 	bl	12164 <printf>
   1081c:	e7da      	b.n	107d4 <callbacks_process+0x14>
        }
    }

    if (res == 0) {
   1081e:	f1ba 0f00 	cmp.w	sl, #0
   10822:	d108      	bne.n	10836 <callbacks_process+0x76>
        res = detools_apply_patch_finalize(apply_patch_p);
   10824:	4648      	mov	r0, r9
   10826:	f006 fa91 	bl	16d4c <detools_apply_patch_finalize>
   1082a:	4682      	mov	sl, r0
    } else {
        (void)detools_apply_patch_finalize(apply_patch_p);
    }

    return (res);
}
   1082c:	4650      	mov	r0, sl
   1082e:	f50d 7d00 	add.w	sp, sp, #512	; 0x200
   10832:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        (void)detools_apply_patch_finalize(apply_patch_p);
   10836:	4648      	mov	r0, r9
   10838:	f006 fa88 	bl	16d4c <detools_apply_patch_finalize>
    return (res);
   1083c:	e7f6      	b.n	1082c <callbacks_process+0x6c>
   1083e:	bf00      	nop
   10840:	00019a1c 	.word	0x00019a1c

00010844 <heatshrink_decoder_poll>:
static HSD_state st_yield_backref(heatshrink_decoder *hsd,
    output_info *oi);

HSD_poll_res heatshrink_decoder_poll(heatshrink_decoder *hsd,
        uint8_t *out_buf, size_t out_buf_size, size_t *output_size) {
    if ((hsd == NULL) || (out_buf == NULL) || (output_size == NULL)) {
   10844:	2800      	cmp	r0, #0
   10846:	d051      	beq.n	108ec <heatshrink_decoder_poll+0xa8>
        uint8_t *out_buf, size_t out_buf_size, size_t *output_size) {
   10848:	b5f0      	push	{r4, r5, r6, r7, lr}
   1084a:	b085      	sub	sp, #20
   1084c:	4617      	mov	r7, r2
   1084e:	461e      	mov	r6, r3
   10850:	4605      	mov	r5, r0
    if ((hsd == NULL) || (out_buf == NULL) || (output_size == NULL)) {
   10852:	2900      	cmp	r1, #0
   10854:	d04d      	beq.n	108f2 <heatshrink_decoder_poll+0xae>
   10856:	2b00      	cmp	r3, #0
   10858:	d04e      	beq.n	108f8 <heatshrink_decoder_poll+0xb4>
        return HSDR_POLL_ERROR_NULL;
    }
    *output_size = 0;
   1085a:	2300      	movs	r3, #0
   1085c:	6033      	str	r3, [r6, #0]

    output_info oi;
    oi.buf = out_buf;
   1085e:	9101      	str	r1, [sp, #4]
    oi.buf_size = out_buf_size;
   10860:	9202      	str	r2, [sp, #8]
    oi.output_size = output_size;
   10862:	9603      	str	r6, [sp, #12]
   10864:	e006      	b.n	10874 <heatshrink_decoder_poll+0x30>
        LOG("-- poll, state is %d (%s), input_size %d\n",
            hsd->state, state_names[hsd->state], hsd->input_size);
        uint8_t in_state = hsd->state;
        switch (in_state) {
        case HSDS_TAG_BIT:
            hsd->state = st_tag_bit(hsd);
   10866:	4628      	mov	r0, r5
   10868:	f006 fae1 	bl	16e2e <st_tag_bit>
   1086c:	72a8      	strb	r0, [r5, #10]
            return HSDR_POLL_ERROR_UNKNOWN;
        }
        
        /* If the current state cannot advance, check if input or output
         * buffer are exhausted. */
        if (hsd->state == in_state) {
   1086e:	7aa9      	ldrb	r1, [r5, #10]
   10870:	42a1      	cmp	r1, r4
   10872:	d033      	beq.n	108dc <heatshrink_decoder_poll+0x98>
        uint8_t in_state = hsd->state;
   10874:	7aac      	ldrb	r4, [r5, #10]
        switch (in_state) {
   10876:	2c06      	cmp	r4, #6
   10878:	d841      	bhi.n	108fe <heatshrink_decoder_poll+0xba>
   1087a:	a301      	add	r3, pc, #4	; (adr r3, 10880 <heatshrink_decoder_poll+0x3c>)
   1087c:	f853 f024 	ldr.w	pc, [r3, r4, lsl #2]
   10880:	00010867 	.word	0x00010867
   10884:	0001089d 	.word	0x0001089d
   10888:	000108a9 	.word	0x000108a9
   1088c:	000108b3 	.word	0x000108b3
   10890:	000108bd 	.word	0x000108bd
   10894:	000108c7 	.word	0x000108c7
   10898:	000108d1 	.word	0x000108d1
            hsd->state = st_yield_literal(hsd, &oi);
   1089c:	a901      	add	r1, sp, #4
   1089e:	4628      	mov	r0, r5
   108a0:	f006 fb26 	bl	16ef0 <st_yield_literal>
   108a4:	72a8      	strb	r0, [r5, #10]
            break;
   108a6:	e7e2      	b.n	1086e <heatshrink_decoder_poll+0x2a>
            hsd->state = st_backref_index_msb(hsd);
   108a8:	4628      	mov	r0, r5
   108aa:	f006 fad2 	bl	16e52 <st_backref_index_msb>
   108ae:	72a8      	strb	r0, [r5, #10]
            break;
   108b0:	e7dd      	b.n	1086e <heatshrink_decoder_poll+0x2a>
            hsd->state = st_backref_index_lsb(hsd);
   108b2:	4628      	mov	r0, r5
   108b4:	f006 fadc 	bl	16e70 <st_backref_index_lsb>
   108b8:	72a8      	strb	r0, [r5, #10]
            break;
   108ba:	e7d8      	b.n	1086e <heatshrink_decoder_poll+0x2a>
            hsd->state = st_backref_count_msb(hsd);
   108bc:	4628      	mov	r0, r5
   108be:	f006 faec 	bl	16e9a <st_backref_count_msb>
   108c2:	72a8      	strb	r0, [r5, #10]
            break;
   108c4:	e7d3      	b.n	1086e <heatshrink_decoder_poll+0x2a>
            hsd->state = st_backref_count_lsb(hsd);
   108c6:	4628      	mov	r0, r5
   108c8:	f006 faf6 	bl	16eb8 <st_backref_count_lsb>
   108cc:	72a8      	strb	r0, [r5, #10]
            break;
   108ce:	e7ce      	b.n	1086e <heatshrink_decoder_poll+0x2a>
            hsd->state = st_yield_backref(hsd, &oi);
   108d0:	a901      	add	r1, sp, #4
   108d2:	4628      	mov	r0, r5
   108d4:	f006 fb2d 	bl	16f32 <st_yield_backref>
   108d8:	72a8      	strb	r0, [r5, #10]
            break;
   108da:	e7c8      	b.n	1086e <heatshrink_decoder_poll+0x2a>
            if (*output_size == out_buf_size) { return HSDR_POLL_MORE; }
   108dc:	6833      	ldr	r3, [r6, #0]
   108de:	42bb      	cmp	r3, r7
   108e0:	d002      	beq.n	108e8 <heatshrink_decoder_poll+0xa4>
            return HSDR_POLL_EMPTY;
   108e2:	2000      	movs	r0, #0
        }
    }
}
   108e4:	b005      	add	sp, #20
   108e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
            if (*output_size == out_buf_size) { return HSDR_POLL_MORE; }
   108e8:	2001      	movs	r0, #1
   108ea:	e7fb      	b.n	108e4 <heatshrink_decoder_poll+0xa0>
        return HSDR_POLL_ERROR_NULL;
   108ec:	f04f 30ff 	mov.w	r0, #4294967295
}
   108f0:	4770      	bx	lr
        return HSDR_POLL_ERROR_NULL;
   108f2:	f04f 30ff 	mov.w	r0, #4294967295
   108f6:	e7f5      	b.n	108e4 <heatshrink_decoder_poll+0xa0>
   108f8:	f04f 30ff 	mov.w	r0, #4294967295
   108fc:	e7f2      	b.n	108e4 <heatshrink_decoder_poll+0xa0>
        switch (in_state) {
   108fe:	f06f 0001 	mvn.w	r0, #1
   10902:	e7ef      	b.n	108e4 <heatshrink_decoder_poll+0xa0>

00010904 <delta_init_flash_mem>:
 *  INIT
 */

static int delta_init_flash_mem(struct flash_mem *flash)
{
	if (!flash) {
   10904:	b308      	cbz	r0, 1094a <delta_init_flash_mem+0x46>
{
   10906:	b510      	push	{r4, lr}
   10908:	b084      	sub	sp, #16
   1090a:	4602      	mov	r2, r0
		return -DELTA_NO_FLASH_FOUND;
	}

	flash->from_current = PRIMARY_OFFSET;
   1090c:	f44f 3180 	mov.w	r1, #65536	; 0x10000
   10910:	60c1      	str	r1, [r0, #12]
	flash->from_end = flash->from_current + PRIMARY_SIZE;
   10912:	f44f 2330 	mov.w	r3, #720896	; 0xb0000
   10916:	6103      	str	r3, [r0, #16]

	flash->to_current = SECONDARY_OFFSET;
   10918:	6143      	str	r3, [r0, #20]
	flash->to_end = flash->to_current + SECONDARY_SIZE;
   1091a:	f44f 207c 	mov.w	r0, #1032192	; 0xfc000
   1091e:	6190      	str	r0, [r2, #24]

	flash->patch_current = STORAGE_OFFSET + HEADER_SIZE;
   10920:	3008      	adds	r0, #8
   10922:	6050      	str	r0, [r2, #4]
	flash->patch_end = flash->patch_current + STORAGE_SIZE;
   10924:	4c0a      	ldr	r4, [pc, #40]	; (10950 <delta_init_flash_mem+0x4c>)
   10926:	6094      	str	r4, [r2, #8]

	flash->write_buf = 0;
   10928:	2400      	movs	r4, #0
   1092a:	61d4      	str	r4, [r2, #28]

	printf("\nfrom_current=%0X\t size=%0X\t to_current=%0X\t size=%0X\t patch_current=%0X\t size=%0X\n",
   1092c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   10930:	9202      	str	r2, [sp, #8]
   10932:	9001      	str	r0, [sp, #4]
   10934:	f44f 2298 	mov.w	r2, #311296	; 0x4c000
   10938:	9200      	str	r2, [sp, #0]
   1093a:	f44f 2220 	mov.w	r2, #655360	; 0xa0000
   1093e:	4805      	ldr	r0, [pc, #20]	; (10954 <delta_init_flash_mem+0x50>)
   10940:	f001 fc10 	bl	12164 <printf>
		flash->from_current,PRIMARY_SIZE,flash->to_current,SECONDARY_SIZE,flash->patch_current,STORAGE_SIZE);

	return DELTA_OK;
   10944:	4620      	mov	r0, r4
}
   10946:	b004      	add	sp, #16
   10948:	bd10      	pop	{r4, pc}
		return -DELTA_NO_FLASH_FOUND;
   1094a:	f06f 0023 	mvn.w	r0, #35	; 0x23
}
   1094e:	4770      	bx	lr
   10950:	00100008 	.word	0x00100008
   10954:	00019a50 	.word	0x00019a50

00010958 <delta_read_patch_header>:

	return DELTA_OK;
}

int delta_read_patch_header(struct flash_mem *flash, uint32_t *size)
{
   10958:	b570      	push	{r4, r5, r6, lr}
   1095a:	b086      	sub	sp, #24
   1095c:	4604      	mov	r4, r0
   1095e:	460e      	mov	r6, r1
	uint32_t new_patch, reset_msg, patch_header[2];
	static struct flash_pages_info page_info;

	new_patch = 0x5057454E; // ASCII for "NEWP" signaling new patch
	reset_msg = 0x0U; // reset "NEWP"
   10960:	2300      	movs	r3, #0
   10962:	9305      	str	r3, [sp, #20]

	/* For tests purposes use page (in primary_flash = 4 kB) */
	flash_get_page_info_by_offs(flash->device, STORAGE_OFFSET,&page_info);
   10964:	6800      	ldr	r0, [r0, #0]
		union { uintptr_t x; struct flash_pages_info * val; } parm2 = { .val = info };
		return (int) arch_syscall_invoke3(parm0.x, parm1.x, parm2.x, K_SYSCALL_FLASH_GET_PAGE_INFO_BY_OFFS);
	}
#endif
	compiler_barrier();
	return z_impl_flash_get_page_info_by_offs(dev, offset, info);
   10966:	4d1b      	ldr	r5, [pc, #108]	; (109d4 <delta_read_patch_header+0x7c>)
   10968:	462a      	mov	r2, r5
   1096a:	f44f 217c 	mov.w	r1, #1032192	; 0xfc000
   1096e:	f007 fdb0 	bl	184d2 <z_impl_flash_get_page_info_by_offs>
	printf("start_offset=%0X\t storage_size=%d\t size=%d\t index=%d\n",page_info.start_offset, STORAGE_SIZE, page_info.size, page_info.index);
   10972:	68ab      	ldr	r3, [r5, #8]
   10974:	9300      	str	r3, [sp, #0]
   10976:	686b      	ldr	r3, [r5, #4]
   10978:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   1097c:	6829      	ldr	r1, [r5, #0]
   1097e:	4816      	ldr	r0, [pc, #88]	; (109d8 <delta_read_patch_header+0x80>)
   10980:	f001 fbf0 	bl	12164 <printf>

	if (flash_read(flash->device, STORAGE_OFFSET, patch_header, sizeof(patch_header))) {
   10984:	6820      	ldr	r0, [r4, #0]

static inline int z_impl_flash_read(const struct device *dev, off_t offset,
				    void *data,
				    size_t len)
{
	const struct flash_driver_api *api =
   10986:	6883      	ldr	r3, [r0, #8]
		(const struct flash_driver_api *)dev->api;

	return api->read(dev, offset, data, len);
   10988:	681d      	ldr	r5, [r3, #0]
   1098a:	2308      	movs	r3, #8
   1098c:	aa03      	add	r2, sp, #12
   1098e:	f44f 217c 	mov.w	r1, #1032192	; 0xfc000
   10992:	47a8      	blx	r5
   10994:	b9c0      	cbnz	r0, 109c8 <delta_read_patch_header+0x70>
   10996:	4605      	mov	r5, r0
		return -DELTA_PATCH_HEADER_ERROR;
	}
	printk("read_data[0]=%0X\t read_data[1]=%0X\r\n", patch_header[0], patch_header[1]);
   10998:	9a04      	ldr	r2, [sp, #16]
   1099a:	9903      	ldr	r1, [sp, #12]
   1099c:	480f      	ldr	r0, [pc, #60]	; (109dc <delta_read_patch_header+0x84>)
   1099e:	f006 fc1a 	bl	171d6 <printk>
	if (new_patch!=patch_header[0]) {
   109a2:	9a03      	ldr	r2, [sp, #12]
   109a4:	4b0e      	ldr	r3, [pc, #56]	; (109e0 <delta_read_patch_header+0x88>)
   109a6:	429a      	cmp	r2, r3
   109a8:	d10b      	bne.n	109c2 <delta_read_patch_header+0x6a>
		return DELTA_OK;
	}

	*size = patch_header[1];
   109aa:	9b04      	ldr	r3, [sp, #16]
   109ac:	6033      	str	r3, [r6, #0]

	if (flash_write(flash->device, STORAGE_OFFSET, &reset_msg, sizeof(reset_msg))) {
   109ae:	6820      	ldr	r0, [r4, #0]
			  size_t len);

static inline int z_impl_flash_write(const struct device *dev, off_t offset,
				     const void *data, size_t len)
{
	const struct flash_driver_api *api =
   109b0:	6883      	ldr	r3, [r0, #8]
		(const struct flash_driver_api *)dev->api;
	int rc;

	rc = api->write(dev, offset, data, len);
   109b2:	685c      	ldr	r4, [r3, #4]
   109b4:	2304      	movs	r3, #4
   109b6:	aa05      	add	r2, sp, #20
   109b8:	f44f 217c 	mov.w	r1, #1032192	; 0xfc000
   109bc:	47a0      	blx	r4
   109be:	4605      	mov	r5, r0
   109c0:	b928      	cbnz	r0, 109ce <delta_read_patch_header+0x76>
		return -DELTA_PATCH_HEADER_ERROR;
	}

	return DELTA_OK;
}
   109c2:	4628      	mov	r0, r5
   109c4:	b006      	add	sp, #24
   109c6:	bd70      	pop	{r4, r5, r6, pc}
		return -DELTA_PATCH_HEADER_ERROR;
   109c8:	f06f 0524 	mvn.w	r5, #36	; 0x24
   109cc:	e7f9      	b.n	109c2 <delta_read_patch_header+0x6a>
		return -DELTA_PATCH_HEADER_ERROR;
   109ce:	f06f 0524 	mvn.w	r5, #36	; 0x24
   109d2:	e7f6      	b.n	109c2 <delta_read_patch_header+0x6a>
   109d4:	200003b4 	.word	0x200003b4
   109d8:	00019aa4 	.word	0x00019aa4
   109dc:	00019adc 	.word	0x00019adc
   109e0:	5057454e 	.word	0x5057454e

000109e4 <delta_check_and_apply>:
{
   109e4:	b530      	push	{r4, r5, lr}
   109e6:	b085      	sub	sp, #20
   109e8:	4605      	mov	r5, r0
	ret = delta_read_patch_header(flash,&patch_size);
   109ea:	a903      	add	r1, sp, #12
   109ec:	f7ff ffb4 	bl	10958 <delta_read_patch_header>
   109f0:	4604      	mov	r4, r0
	printf("patch_size = %d\n", patch_size);
   109f2:	9903      	ldr	r1, [sp, #12]
   109f4:	4812      	ldr	r0, [pc, #72]	; (10a40 <delta_check_and_apply+0x5c>)
   109f6:	f001 fbb5 	bl	12164 <printf>
	if (ret < 0) {
   109fa:	2c00      	cmp	r4, #0
   109fc:	db02      	blt.n	10a04 <delta_check_and_apply+0x20>
	} else if (patch_size > 0) {
   109fe:	9b03      	ldr	r3, [sp, #12]
   10a00:	b91b      	cbnz	r3, 10a0a <delta_check_and_apply+0x26>
	return DELTA_OK;
   10a02:	2400      	movs	r4, #0
}
   10a04:	4620      	mov	r0, r4
   10a06:	b005      	add	sp, #20
   10a08:	bd30      	pop	{r4, r5, pc}
		ret = delta_init(flash);
   10a0a:	4628      	mov	r0, r5
   10a0c:	f006 fbb2 	bl	17174 <delta_init>
		if (ret) {
   10a10:	4604      	mov	r4, r0
   10a12:	2800      	cmp	r0, #0
   10a14:	d1f6      	bne.n	10a04 <delta_check_and_apply+0x20>
		ret = detools_apply_patch_callbacks(delta_flash_from_read,
   10a16:	9501      	str	r5, [sp, #4]
   10a18:	4b0a      	ldr	r3, [pc, #40]	; (10a44 <delta_check_and_apply+0x60>)
   10a1a:	9300      	str	r3, [sp, #0]
   10a1c:	9b03      	ldr	r3, [sp, #12]
   10a1e:	4a0a      	ldr	r2, [pc, #40]	; (10a48 <delta_check_and_apply+0x64>)
   10a20:	490a      	ldr	r1, [pc, #40]	; (10a4c <delta_check_and_apply+0x68>)
   10a22:	480b      	ldr	r0, [pc, #44]	; (10a50 <delta_check_and_apply+0x6c>)
   10a24:	f006 f9a4 	bl	16d70 <detools_apply_patch_callbacks>
		if (ret <= 0) {
   10a28:	1e04      	subs	r4, r0, #0
   10a2a:	ddeb      	ble.n	10a04 <delta_check_and_apply+0x20>
		if (boot_request_upgrade(BOOT_UPGRADE_PERMANENT)) {
   10a2c:	2001      	movs	r0, #1
   10a2e:	f007 f94e 	bl	17cce <boot_request_upgrade>
   10a32:	b110      	cbz	r0, 10a3a <delta_check_and_apply+0x56>
			return -1;
   10a34:	f04f 34ff 	mov.w	r4, #4294967295
   10a38:	e7e4      	b.n	10a04 <delta_check_and_apply+0x20>
		sys_reboot(SYS_REBOOT_COLD);
   10a3a:	2001      	movs	r0, #1
   10a3c:	f000 fd44 	bl	114c8 <sys_reboot>
   10a40:	00019b04 	.word	0x00019b04
   10a44:	00017077 	.word	0x00017077
   10a48:	00017115 	.word	0x00017115
   10a4c:	00017157 	.word	0x00017157
   10a50:	000170d3 	.word	0x000170d3

00010a54 <char_out>:

	return c;
}

static int char_out(int c, void *ctx_p)
{
   10a54:	b508      	push	{r3, lr}
	(void) ctx_p;
	return _char_out(c);
   10a56:	4b02      	ldr	r3, [pc, #8]	; (10a60 <char_out+0xc>)
   10a58:	681b      	ldr	r3, [r3, #0]
   10a5a:	4798      	blx	r3
}
   10a5c:	bd08      	pop	{r3, pc}
   10a5e:	bf00      	nop
   10a60:	20000008 	.word	0x20000008

00010a64 <__printk_hook_install>:
	_char_out = fn;
   10a64:	4b01      	ldr	r3, [pc, #4]	; (10a6c <__printk_hook_install+0x8>)
   10a66:	6018      	str	r0, [r3, #0]
}
   10a68:	4770      	bx	lr
   10a6a:	bf00      	nop
   10a6c:	20000008 	.word	0x20000008

00010a70 <vprintk>:

void vprintk(const char *fmt, va_list ap)
{
   10a70:	b500      	push	{lr}
   10a72:	b083      	sub	sp, #12
   10a74:	4602      	mov	r2, r0
   10a76:	460b      	mov	r3, r1
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap);
#else
static inline
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap)
{
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
   10a78:	2100      	movs	r1, #0
   10a7a:	9100      	str	r1, [sp, #0]
   10a7c:	4802      	ldr	r0, [pc, #8]	; (10a88 <vprintk+0x18>)
   10a7e:	f000 fa3b 	bl	10ef8 <z_cbvprintf_impl>

#ifdef CONFIG_PRINTK_SYNC
		k_spin_unlock(&lock, key);
#endif
	}
}
   10a82:	b003      	add	sp, #12
   10a84:	f85d fb04 	ldr.w	pc, [sp], #4
   10a88:	00010a55 	.word	0x00010a55

00010a8c <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
   10a8c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   10a90:	b083      	sub	sp, #12
   10a92:	4604      	mov	r4, r0
   10a94:	4608      	mov	r0, r1
   10a96:	4615      	mov	r5, r2
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   10a98:	8b23      	ldrh	r3, [r4, #24]
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
   10a9a:	f013 0f08 	tst.w	r3, #8
   10a9e:	d105      	bne.n	10aac <process_event+0x20>
   10aa0:	f003 0607 	and.w	r6, r3, #7
 *
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
   10aa4:	2300      	movs	r3, #0
   10aa6:	9300      	str	r3, [sp, #0]
	list->tail = NULL;
   10aa8:	9301      	str	r3, [sp, #4]
}
   10aaa:	e069      	b.n	10b80 <process_event+0xf4>
		if (evt == EVT_COMPLETE) {
   10aac:	2901      	cmp	r1, #1
   10aae:	d009      	beq.n	10ac4 <process_event+0x38>
			mgr->flags |= ONOFF_FLAG_COMPLETE;
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
   10ab0:	f043 0320 	orr.w	r3, r3, #32
   10ab4:	8323      	strh	r3, [r4, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
   10ab6:	f385 8811 	msr	BASEPRI, r5
   10aba:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
   10abe:	b003      	add	sp, #12
   10ac0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			mgr->flags |= ONOFF_FLAG_COMPLETE;
   10ac4:	f043 0310 	orr.w	r3, r3, #16
   10ac8:	8323      	strh	r3, [r4, #24]
   10aca:	e7f4      	b.n	10ab6 <process_event+0x2a>
			evt = process_recheck(mgr);
   10acc:	4620      	mov	r0, r4
   10ace:	f006 fbb7 	bl	17240 <process_recheck>
   10ad2:	e057      	b.n	10b84 <process_event+0xf8>
			res = mgr->last_res;
   10ad4:	f8d4 9014 	ldr.w	r9, [r4, #20]
			process_complete(mgr, &clients, res);
   10ad8:	464a      	mov	r2, r9
   10ada:	4669      	mov	r1, sp
   10adc:	4620      	mov	r0, r4
   10ade:	f006 fbc8 	bl	17272 <process_complete>
		onoff_transition_fn transit = NULL;
   10ae2:	2700      	movs	r7, #0
   10ae4:	e05a      	b.n	10b9c <process_event+0x110>
			transit = mgr->transitions->start;
   10ae6:	6923      	ldr	r3, [r4, #16]
   10ae8:	681f      	ldr	r7, [r3, #0]
			set_state(mgr, ONOFF_STATE_TO_ON);
   10aea:	2106      	movs	r1, #6
   10aec:	4620      	mov	r0, r4
   10aee:	f006 fb80 	bl	171f2 <set_state>
		res = 0;
   10af2:	f04f 0900 	mov.w	r9, #0
   10af6:	e051      	b.n	10b9c <process_event+0x110>
			transit = mgr->transitions->stop;
   10af8:	6923      	ldr	r3, [r4, #16]
   10afa:	685f      	ldr	r7, [r3, #4]
			set_state(mgr, ONOFF_STATE_TO_OFF);
   10afc:	2104      	movs	r1, #4
   10afe:	4620      	mov	r0, r4
   10b00:	f006 fb77 	bl	171f2 <set_state>
		res = 0;
   10b04:	f04f 0900 	mov.w	r9, #0
   10b08:	e048      	b.n	10b9c <process_event+0x110>
			transit = mgr->transitions->reset;
   10b0a:	6923      	ldr	r3, [r4, #16]
   10b0c:	689f      	ldr	r7, [r3, #8]
			set_state(mgr, ONOFF_STATE_RESETTING);
   10b0e:	2105      	movs	r1, #5
   10b10:	4620      	mov	r0, r4
   10b12:	f006 fb6e 	bl	171f2 <set_state>
		res = 0;
   10b16:	f04f 0900 	mov.w	r9, #0
   10b1a:	e03f      	b.n	10b9c <process_event+0x110>
				   && !sys_slist_is_empty(&mgr->monitors);
   10b1c:	2200      	movs	r2, #0
   10b1e:	e046      	b.n	10bae <process_event+0x122>
   10b20:	2200      	movs	r2, #0
   10b22:	e044      	b.n	10bae <process_event+0x122>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
   10b24:	f043 0308 	orr.w	r3, r3, #8
			mgr->flags = flags;
   10b28:	8323      	strh	r3, [r4, #24]
   10b2a:	f385 8811 	msr	BASEPRI, r5
   10b2e:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
   10b32:	2900      	cmp	r1, #0
   10b34:	d144      	bne.n	10bc0 <process_event+0x134>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
   10b36:	9b00      	ldr	r3, [sp, #0]
			if (!sys_slist_is_empty(&clients)) {
   10b38:	b12b      	cbz	r3, 10b46 <process_event+0xba>
				notify_all(mgr, &clients, state, res);
   10b3a:	464b      	mov	r3, r9
   10b3c:	4642      	mov	r2, r8
   10b3e:	4669      	mov	r1, sp
   10b40:	4620      	mov	r0, r4
   10b42:	f006 fc0d 	bl	17360 <notify_all>
			if (transit != NULL) {
   10b46:	b117      	cbz	r7, 10b4e <process_event+0xc2>
				transit(mgr, transition_complete);
   10b48:	4925      	ldr	r1, [pc, #148]	; (10be0 <process_event+0x154>)
   10b4a:	4620      	mov	r0, r4
   10b4c:	47b8      	blx	r7
	__asm__ volatile(
   10b4e:	f04f 0320 	mov.w	r3, #32
   10b52:	f3ef 8511 	mrs	r5, BASEPRI
   10b56:	f383 8812 	msr	BASEPRI_MAX, r3
   10b5a:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
   10b5e:	8b23      	ldrh	r3, [r4, #24]
   10b60:	f023 0308 	bic.w	r3, r3, #8
   10b64:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
   10b66:	8b23      	ldrh	r3, [r4, #24]
   10b68:	f013 0f10 	tst.w	r3, #16
   10b6c:	d02e      	beq.n	10bcc <process_event+0x140>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
   10b6e:	f023 0310 	bic.w	r3, r3, #16
   10b72:	8323      	strh	r3, [r4, #24]
			evt = EVT_COMPLETE;
   10b74:	2001      	movs	r0, #1
		state = mgr->flags & ONOFF_STATE_MASK;
   10b76:	8b26      	ldrh	r6, [r4, #24]
   10b78:	f006 0607 	and.w	r6, r6, #7
	} while (evt != EVT_NOP);
   10b7c:	2800      	cmp	r0, #0
   10b7e:	d09a      	beq.n	10ab6 <process_event+0x2a>
		if (evt == EVT_RECHECK) {
   10b80:	2802      	cmp	r0, #2
   10b82:	d0a3      	beq.n	10acc <process_event+0x40>
		if (evt == EVT_NOP) {
   10b84:	2800      	cmp	r0, #0
   10b86:	d096      	beq.n	10ab6 <process_event+0x2a>
		if (evt == EVT_COMPLETE) {
   10b88:	2801      	cmp	r0, #1
   10b8a:	d0a3      	beq.n	10ad4 <process_event+0x48>
		} else if (evt == EVT_START) {
   10b8c:	2803      	cmp	r0, #3
   10b8e:	d0aa      	beq.n	10ae6 <process_event+0x5a>
		} else if (evt == EVT_STOP) {
   10b90:	2804      	cmp	r0, #4
   10b92:	d0b1      	beq.n	10af8 <process_event+0x6c>
		} else if (evt == EVT_RESET) {
   10b94:	2805      	cmp	r0, #5
   10b96:	d0b8      	beq.n	10b0a <process_event+0x7e>
		onoff_transition_fn transit = NULL;
   10b98:	2700      	movs	r7, #0
		res = 0;
   10b9a:	46b9      	mov	r9, r7
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   10b9c:	8b23      	ldrh	r3, [r4, #24]
   10b9e:	f003 0807 	and.w	r8, r3, #7
				   && !sys_slist_is_empty(&mgr->monitors);
   10ba2:	45b0      	cmp	r8, r6
   10ba4:	d0ba      	beq.n	10b1c <process_event+0x90>
   10ba6:	68a2      	ldr	r2, [r4, #8]
   10ba8:	2a00      	cmp	r2, #0
   10baa:	d0b9      	beq.n	10b20 <process_event+0x94>
   10bac:	2201      	movs	r2, #1
		if (do_monitors
   10bae:	4611      	mov	r1, r2
   10bb0:	2a00      	cmp	r2, #0
   10bb2:	d1b7      	bne.n	10b24 <process_event+0x98>
   10bb4:	9a00      	ldr	r2, [sp, #0]
		    || !sys_slist_is_empty(&clients)
   10bb6:	2a00      	cmp	r2, #0
   10bb8:	d1b4      	bne.n	10b24 <process_event+0x98>
		    || (transit != NULL)) {
   10bba:	2f00      	cmp	r7, #0
   10bbc:	d1b2      	bne.n	10b24 <process_event+0x98>
   10bbe:	e7d2      	b.n	10b66 <process_event+0xda>
				notify_monitors(mgr, state, res);
   10bc0:	464a      	mov	r2, r9
   10bc2:	4641      	mov	r1, r8
   10bc4:	4620      	mov	r0, r4
   10bc6:	f006 fb1c 	bl	17202 <notify_monitors>
   10bca:	e7b4      	b.n	10b36 <process_event+0xaa>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
   10bcc:	f013 0f20 	tst.w	r3, #32
   10bd0:	d004      	beq.n	10bdc <process_event+0x150>
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
   10bd2:	f023 0320 	bic.w	r3, r3, #32
   10bd6:	8323      	strh	r3, [r4, #24]
			evt = EVT_RECHECK;
   10bd8:	2002      	movs	r0, #2
   10bda:	e7cc      	b.n	10b76 <process_event+0xea>
		evt = EVT_NOP;
   10bdc:	2000      	movs	r0, #0
   10bde:	e7ca      	b.n	10b76 <process_event+0xea>
   10be0:	0001738f 	.word	0x0001738f

00010be4 <extract_conversion>:
 *
 * @return pointer to the first character that follows the specification.
 */
static inline const char *extract_conversion(struct conversion *conv,
					     const char *sp)
{
   10be4:	b570      	push	{r4, r5, r6, lr}
   10be6:	b082      	sub	sp, #8
   10be8:	4604      	mov	r4, r0
	*conv = (struct conversion) {
   10bea:	2300      	movs	r3, #0
   10bec:	6003      	str	r3, [r0, #0]
   10bee:	6043      	str	r3, [r0, #4]
   10bf0:	6083      	str	r3, [r0, #8]
	/* Skip over the opening %.  If the conversion specifier is %,
	 * that's the only thing that should be there, so
	 * fast-exit.
	 */
	++sp;
	if (*sp == '%') {
   10bf2:	784b      	ldrb	r3, [r1, #1]
   10bf4:	2b25      	cmp	r3, #37	; 0x25
   10bf6:	d002      	beq.n	10bfe <extract_conversion+0x1a>
   10bf8:	1c4e      	adds	r6, r1, #1
	bool loop = true;
   10bfa:	2501      	movs	r5, #1
   10bfc:	e01f      	b.n	10c3e <extract_conversion+0x5a>
		conv->specifier = *sp++;
   10bfe:	1c88      	adds	r0, r1, #2
   10c00:	70e3      	strb	r3, [r4, #3]
		return sp;
   10c02:	e145      	b.n	10e90 <extract_conversion+0x2ac>
			conv->flag_dash = true;
   10c04:	7823      	ldrb	r3, [r4, #0]
   10c06:	f043 0304 	orr.w	r3, r3, #4
   10c0a:	7023      	strb	r3, [r4, #0]
		if (loop) {
   10c0c:	b1b5      	cbz	r5, 10c3c <extract_conversion+0x58>
			++sp;
   10c0e:	3601      	adds	r6, #1
   10c10:	e014      	b.n	10c3c <extract_conversion+0x58>
			conv->flag_plus = true;
   10c12:	7823      	ldrb	r3, [r4, #0]
   10c14:	f043 0308 	orr.w	r3, r3, #8
   10c18:	7023      	strb	r3, [r4, #0]
			break;
   10c1a:	e7f7      	b.n	10c0c <extract_conversion+0x28>
			conv->flag_space = true;
   10c1c:	7823      	ldrb	r3, [r4, #0]
   10c1e:	f043 0310 	orr.w	r3, r3, #16
   10c22:	7023      	strb	r3, [r4, #0]
			break;
   10c24:	e7f2      	b.n	10c0c <extract_conversion+0x28>
			conv->flag_hash = true;
   10c26:	7823      	ldrb	r3, [r4, #0]
   10c28:	f043 0320 	orr.w	r3, r3, #32
   10c2c:	7023      	strb	r3, [r4, #0]
			break;
   10c2e:	e7ed      	b.n	10c0c <extract_conversion+0x28>
			conv->flag_zero = true;
   10c30:	7823      	ldrb	r3, [r4, #0]
   10c32:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   10c36:	7023      	strb	r3, [r4, #0]
			break;
   10c38:	e7e8      	b.n	10c0c <extract_conversion+0x28>
		switch (*sp) {
   10c3a:	2500      	movs	r5, #0
	} while (loop);
   10c3c:	b345      	cbz	r5, 10c90 <extract_conversion+0xac>
		switch (*sp) {
   10c3e:	7833      	ldrb	r3, [r6, #0]
   10c40:	3b20      	subs	r3, #32
   10c42:	2b10      	cmp	r3, #16
   10c44:	d8f9      	bhi.n	10c3a <extract_conversion+0x56>
   10c46:	a201      	add	r2, pc, #4	; (adr r2, 10c4c <extract_conversion+0x68>)
   10c48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   10c4c:	00010c1d 	.word	0x00010c1d
   10c50:	00010c3b 	.word	0x00010c3b
   10c54:	00010c3b 	.word	0x00010c3b
   10c58:	00010c27 	.word	0x00010c27
   10c5c:	00010c3b 	.word	0x00010c3b
   10c60:	00010c3b 	.word	0x00010c3b
   10c64:	00010c3b 	.word	0x00010c3b
   10c68:	00010c3b 	.word	0x00010c3b
   10c6c:	00010c3b 	.word	0x00010c3b
   10c70:	00010c3b 	.word	0x00010c3b
   10c74:	00010c3b 	.word	0x00010c3b
   10c78:	00010c13 	.word	0x00010c13
   10c7c:	00010c3b 	.word	0x00010c3b
   10c80:	00010c05 	.word	0x00010c05
   10c84:	00010c3b 	.word	0x00010c3b
   10c88:	00010c3b 	.word	0x00010c3b
   10c8c:	00010c31 	.word	0x00010c31
	if (conv->flag_zero && conv->flag_dash) {
   10c90:	7823      	ldrb	r3, [r4, #0]
   10c92:	f003 0344 	and.w	r3, r3, #68	; 0x44
   10c96:	2b44      	cmp	r3, #68	; 0x44
   10c98:	d05f      	beq.n	10d5a <extract_conversion+0x176>
	}

	sp = extract_flags(conv, sp);
	sp = extract_width(conv, sp);
   10c9a:	9601      	str	r6, [sp, #4]
	conv->width_present = true;
   10c9c:	7823      	ldrb	r3, [r4, #0]
   10c9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   10ca2:	7023      	strb	r3, [r4, #0]
	if (*sp == '*') {
   10ca4:	7833      	ldrb	r3, [r6, #0]
   10ca6:	2b2a      	cmp	r3, #42	; 0x2a
   10ca8:	d05c      	beq.n	10d64 <extract_conversion+0x180>
	size_t width = extract_decimal(&sp);
   10caa:	a801      	add	r0, sp, #4
   10cac:	f006 fd99 	bl	177e2 <extract_decimal>
	if (sp != wp) {
   10cb0:	9b01      	ldr	r3, [sp, #4]
   10cb2:	429e      	cmp	r6, r3
   10cb4:	d00f      	beq.n	10cd6 <extract_conversion+0xf2>
		conv->width_present = true;
   10cb6:	7823      	ldrb	r3, [r4, #0]
   10cb8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   10cbc:	7023      	strb	r3, [r4, #0]
		conv->width_value = width;
   10cbe:	6060      	str	r0, [r4, #4]
		conv->unsupported |= ((conv->width_value < 0)
   10cc0:	b2db      	uxtb	r3, r3
   10cc2:	f3c3 0340 	ubfx	r3, r3, #1, #1
				      || (width != (size_t)conv->width_value));
   10cc6:	2800      	cmp	r0, #0
   10cc8:	db54      	blt.n	10d74 <extract_conversion+0x190>
   10cca:	2200      	movs	r2, #0
		conv->unsupported |= ((conv->width_value < 0)
   10ccc:	4313      	orrs	r3, r2
   10cce:	7822      	ldrb	r2, [r4, #0]
   10cd0:	f363 0241 	bfi	r2, r3, #1, #1
   10cd4:	7022      	strb	r2, [r4, #0]
	return sp;
   10cd6:	9b01      	ldr	r3, [sp, #4]
	sp = extract_prec(conv, sp);
   10cd8:	9301      	str	r3, [sp, #4]
	conv->prec_present = (*sp == '.');
   10cda:	781b      	ldrb	r3, [r3, #0]
   10cdc:	2b2e      	cmp	r3, #46	; 0x2e
   10cde:	bf14      	ite	ne
   10ce0:	2300      	movne	r3, #0
   10ce2:	2301      	moveq	r3, #1
   10ce4:	7862      	ldrb	r2, [r4, #1]
   10ce6:	f363 0241 	bfi	r2, r3, #1, #1
   10cea:	7062      	strb	r2, [r4, #1]
	if (!conv->prec_present) {
   10cec:	2b00      	cmp	r3, #0
   10cee:	d043      	beq.n	10d78 <extract_conversion+0x194>
	++sp;
   10cf0:	9b01      	ldr	r3, [sp, #4]
   10cf2:	1c5a      	adds	r2, r3, #1
   10cf4:	9201      	str	r2, [sp, #4]
	if (*sp == '*') {
   10cf6:	785b      	ldrb	r3, [r3, #1]
   10cf8:	2b2a      	cmp	r3, #42	; 0x2a
   10cfa:	d03f      	beq.n	10d7c <extract_conversion+0x198>
	size_t prec = extract_decimal(&sp);
   10cfc:	a801      	add	r0, sp, #4
   10cfe:	f006 fd70 	bl	177e2 <extract_decimal>
	conv->prec_value = prec;
   10d02:	60a0      	str	r0, [r4, #8]
	conv->unsupported |= ((conv->prec_value < 0)
   10d04:	7823      	ldrb	r3, [r4, #0]
   10d06:	f3c3 0340 	ubfx	r3, r3, #1, #1
			      || (prec != (size_t)conv->prec_value));
   10d0a:	2800      	cmp	r0, #0
   10d0c:	db3e      	blt.n	10d8c <extract_conversion+0x1a8>
   10d0e:	2200      	movs	r2, #0
	conv->unsupported |= ((conv->prec_value < 0)
   10d10:	4313      	orrs	r3, r2
   10d12:	7822      	ldrb	r2, [r4, #0]
   10d14:	f363 0241 	bfi	r2, r3, #1, #1
   10d18:	7022      	strb	r2, [r4, #0]
	return sp;
   10d1a:	9801      	ldr	r0, [sp, #4]
	switch (*sp) {
   10d1c:	7803      	ldrb	r3, [r0, #0]
   10d1e:	3b4c      	subs	r3, #76	; 0x4c
   10d20:	2b2e      	cmp	r3, #46	; 0x2e
   10d22:	f200 809d 	bhi.w	10e60 <extract_conversion+0x27c>
   10d26:	e8df f003 	tbb	[pc, r3]
   10d2a:	9b90      	.short	0x9b90
   10d2c:	9b9b9b9b 	.word	0x9b9b9b9b
   10d30:	9b9b9b9b 	.word	0x9b9b9b9b
   10d34:	9b9b9b9b 	.word	0x9b9b9b9b
   10d38:	9b9b9b9b 	.word	0x9b9b9b9b
   10d3c:	9b9b9b9b 	.word	0x9b9b9b9b
   10d40:	9b9b9b9b 	.word	0x9b9b9b9b
   10d44:	9b339b9b 	.word	0x9b339b9b
   10d48:	9b459b57 	.word	0x9b459b57
   10d4c:	9b9b9b9b 	.word	0x9b9b9b9b
   10d50:	9b899b9b 	.word	0x9b899b9b
   10d54:	9b9b9b9b 	.word	0x9b9b9b9b
   10d58:	82          	.byte	0x82
   10d59:	00          	.byte	0x00
		conv->flag_zero = false;
   10d5a:	7823      	ldrb	r3, [r4, #0]
   10d5c:	f36f 1386 	bfc	r3, #6, #1
   10d60:	7023      	strb	r3, [r4, #0]
   10d62:	e79a      	b.n	10c9a <extract_conversion+0xb6>
		conv->width_star = true;
   10d64:	7863      	ldrb	r3, [r4, #1]
   10d66:	f043 0301 	orr.w	r3, r3, #1
   10d6a:	7063      	strb	r3, [r4, #1]
		return ++sp;
   10d6c:	4633      	mov	r3, r6
   10d6e:	3301      	adds	r3, #1
   10d70:	9301      	str	r3, [sp, #4]
   10d72:	e7b1      	b.n	10cd8 <extract_conversion+0xf4>
				      || (width != (size_t)conv->width_value));
   10d74:	2201      	movs	r2, #1
   10d76:	e7a9      	b.n	10ccc <extract_conversion+0xe8>
		return sp;
   10d78:	9801      	ldr	r0, [sp, #4]
   10d7a:	e7cf      	b.n	10d1c <extract_conversion+0x138>
		conv->prec_star = true;
   10d7c:	7863      	ldrb	r3, [r4, #1]
   10d7e:	f043 0304 	orr.w	r3, r3, #4
   10d82:	7063      	strb	r3, [r4, #1]
		return ++sp;
   10d84:	4610      	mov	r0, r2
   10d86:	3001      	adds	r0, #1
   10d88:	9001      	str	r0, [sp, #4]
   10d8a:	e7c7      	b.n	10d1c <extract_conversion+0x138>
			      || (prec != (size_t)conv->prec_value));
   10d8c:	2201      	movs	r2, #1
   10d8e:	e7bf      	b.n	10d10 <extract_conversion+0x12c>
		if (*++sp == 'h') {
   10d90:	1c42      	adds	r2, r0, #1
   10d92:	7843      	ldrb	r3, [r0, #1]
   10d94:	2b68      	cmp	r3, #104	; 0x68
   10d96:	d006      	beq.n	10da6 <extract_conversion+0x1c2>
			conv->length_mod = LENGTH_H;
   10d98:	7863      	ldrb	r3, [r4, #1]
   10d9a:	2102      	movs	r1, #2
   10d9c:	f361 03c6 	bfi	r3, r1, #3, #4
   10da0:	7063      	strb	r3, [r4, #1]
		if (*++sp == 'h') {
   10da2:	4610      	mov	r0, r2
   10da4:	e01e      	b.n	10de4 <extract_conversion+0x200>
			conv->length_mod = LENGTH_HH;
   10da6:	7863      	ldrb	r3, [r4, #1]
   10da8:	2201      	movs	r2, #1
   10daa:	f362 03c6 	bfi	r3, r2, #3, #4
   10dae:	7063      	strb	r3, [r4, #1]
			++sp;
   10db0:	3002      	adds	r0, #2
   10db2:	e017      	b.n	10de4 <extract_conversion+0x200>
		if (*++sp == 'l') {
   10db4:	1c42      	adds	r2, r0, #1
   10db6:	7843      	ldrb	r3, [r0, #1]
   10db8:	2b6c      	cmp	r3, #108	; 0x6c
   10dba:	d006      	beq.n	10dca <extract_conversion+0x1e6>
			conv->length_mod = LENGTH_L;
   10dbc:	7863      	ldrb	r3, [r4, #1]
   10dbe:	2103      	movs	r1, #3
   10dc0:	f361 03c6 	bfi	r3, r1, #3, #4
   10dc4:	7063      	strb	r3, [r4, #1]
		if (*++sp == 'l') {
   10dc6:	4610      	mov	r0, r2
   10dc8:	e00c      	b.n	10de4 <extract_conversion+0x200>
			conv->length_mod = LENGTH_LL;
   10dca:	7863      	ldrb	r3, [r4, #1]
   10dcc:	2204      	movs	r2, #4
   10dce:	f362 03c6 	bfi	r3, r2, #3, #4
   10dd2:	7063      	strb	r3, [r4, #1]
			++sp;
   10dd4:	3002      	adds	r0, #2
   10dd6:	e005      	b.n	10de4 <extract_conversion+0x200>
		conv->length_mod = LENGTH_J;
   10dd8:	7863      	ldrb	r3, [r4, #1]
   10dda:	2205      	movs	r2, #5
   10ddc:	f362 03c6 	bfi	r3, r2, #3, #4
   10de0:	7063      	strb	r3, [r4, #1]
		++sp;
   10de2:	3001      	adds	r0, #1
	conv->specifier = *sp++;
   10de4:	f810 3b01 	ldrb.w	r3, [r0], #1
   10de8:	70e3      	strb	r3, [r4, #3]
	switch (conv->specifier) {
   10dea:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
   10dee:	2a37      	cmp	r2, #55	; 0x37
   10df0:	d87d      	bhi.n	10eee <extract_conversion+0x30a>
   10df2:	e8df f002 	tbb	[pc, r2]
   10df6:	7c5e      	.short	0x7c5e
   10df8:	5e5e7c7c 	.word	0x5e5e7c7c
   10dfc:	7c7c7c5e 	.word	0x7c7c7c5e
   10e00:	7c7c7c7c 	.word	0x7c7c7c7c
   10e04:	7c7c7c7c 	.word	0x7c7c7c7c
   10e08:	7c7c7c7c 	.word	0x7c7c7c7c
   10e0c:	7c7c4f7c 	.word	0x7c7c4f7c
   10e10:	7c7c7c7c 	.word	0x7c7c7c7c
   10e14:	7c5e7c7c 	.word	0x7c5e7c7c
   10e18:	5e5e3a4f 	.word	0x5e5e3a4f
   10e1c:	7c3a7c5e 	.word	0x7c3a7c5e
   10e20:	657c7c7c 	.word	0x657c7c7c
   10e24:	7c7c714f 	.word	0x7c7c714f
   10e28:	7c4f7c71 	.word	0x7c4f7c71
   10e2c:	4f7c      	.short	0x4f7c
		conv->length_mod = LENGTH_Z;
   10e2e:	7863      	ldrb	r3, [r4, #1]
   10e30:	2206      	movs	r2, #6
   10e32:	f362 03c6 	bfi	r3, r2, #3, #4
   10e36:	7063      	strb	r3, [r4, #1]
		++sp;
   10e38:	3001      	adds	r0, #1
		break;
   10e3a:	e7d3      	b.n	10de4 <extract_conversion+0x200>
		conv->length_mod = LENGTH_T;
   10e3c:	7863      	ldrb	r3, [r4, #1]
   10e3e:	2207      	movs	r2, #7
   10e40:	f362 03c6 	bfi	r3, r2, #3, #4
   10e44:	7063      	strb	r3, [r4, #1]
		++sp;
   10e46:	3001      	adds	r0, #1
		break;
   10e48:	e7cc      	b.n	10de4 <extract_conversion+0x200>
		conv->length_mod = LENGTH_UPPER_L;
   10e4a:	7863      	ldrb	r3, [r4, #1]
   10e4c:	2208      	movs	r2, #8
   10e4e:	f362 03c6 	bfi	r3, r2, #3, #4
   10e52:	7063      	strb	r3, [r4, #1]
		++sp;
   10e54:	3001      	adds	r0, #1
		conv->unsupported = true;
   10e56:	7823      	ldrb	r3, [r4, #0]
   10e58:	f043 0302 	orr.w	r3, r3, #2
   10e5c:	7023      	strb	r3, [r4, #0]
		break;
   10e5e:	e7c1      	b.n	10de4 <extract_conversion+0x200>
		conv->length_mod = LENGTH_NONE;
   10e60:	7863      	ldrb	r3, [r4, #1]
   10e62:	f36f 03c6 	bfc	r3, #3, #4
   10e66:	7063      	strb	r3, [r4, #1]
		break;
   10e68:	e7bc      	b.n	10de4 <extract_conversion+0x200>
		conv->specifier_cat = SPECIFIER_SINT;
   10e6a:	78a2      	ldrb	r2, [r4, #2]
   10e6c:	2101      	movs	r1, #1
   10e6e:	f361 0202 	bfi	r2, r1, #0, #3
   10e72:	70a2      	strb	r2, [r4, #2]
		if (conv->length_mod == LENGTH_UPPER_L) {
   10e74:	7862      	ldrb	r2, [r4, #1]
   10e76:	f002 0278 	and.w	r2, r2, #120	; 0x78
   10e7a:	2a40      	cmp	r2, #64	; 0x40
   10e7c:	d010      	beq.n	10ea0 <extract_conversion+0x2bc>
		if (conv->specifier == 'c') {
   10e7e:	2b63      	cmp	r3, #99	; 0x63
   10e80:	d013      	beq.n	10eaa <extract_conversion+0x2c6>
	conv->unsupported |= unsupported;
   10e82:	7823      	ldrb	r3, [r4, #0]
   10e84:	f3c3 0240 	ubfx	r2, r3, #1, #1
   10e88:	4315      	orrs	r5, r2
   10e8a:	f365 0341 	bfi	r3, r5, #1, #1
   10e8e:	7023      	strb	r3, [r4, #0]
	sp = extract_length(conv, sp);
	sp = extract_specifier(conv, sp);

	return sp;
}
   10e90:	b002      	add	sp, #8
   10e92:	bd70      	pop	{r4, r5, r6, pc}
		conv->specifier_cat = SPECIFIER_UINT;
   10e94:	78a2      	ldrb	r2, [r4, #2]
   10e96:	2102      	movs	r1, #2
   10e98:	f361 0202 	bfi	r2, r1, #0, #3
   10e9c:	70a2      	strb	r2, [r4, #2]
   10e9e:	e7e9      	b.n	10e74 <extract_conversion+0x290>
			conv->invalid = true;
   10ea0:	7821      	ldrb	r1, [r4, #0]
   10ea2:	f041 0101 	orr.w	r1, r1, #1
   10ea6:	7021      	strb	r1, [r4, #0]
   10ea8:	e7e9      	b.n	10e7e <extract_conversion+0x29a>
			unsupported = (conv->length_mod != LENGTH_NONE);
   10eaa:	1e15      	subs	r5, r2, #0
   10eac:	bf18      	it	ne
   10eae:	2501      	movne	r5, #1
   10eb0:	e7e7      	b.n	10e82 <extract_conversion+0x29e>
		conv->specifier_cat = SPECIFIER_FP;
   10eb2:	78a3      	ldrb	r3, [r4, #2]
   10eb4:	2204      	movs	r2, #4
   10eb6:	f362 0302 	bfi	r3, r2, #0, #3
   10eba:	70a3      	strb	r3, [r4, #2]
			unsupported = true;
   10ebc:	2501      	movs	r5, #1
			break;
   10ebe:	e7e0      	b.n	10e82 <extract_conversion+0x29e>
		conv->specifier_cat = SPECIFIER_PTR;
   10ec0:	78a3      	ldrb	r3, [r4, #2]
   10ec2:	2203      	movs	r2, #3
   10ec4:	f362 0302 	bfi	r3, r2, #0, #3
   10ec8:	70a3      	strb	r3, [r4, #2]
		if (conv->length_mod == LENGTH_UPPER_L) {
   10eca:	7863      	ldrb	r3, [r4, #1]
   10ecc:	f003 0378 	and.w	r3, r3, #120	; 0x78
   10ed0:	2b40      	cmp	r3, #64	; 0x40
   10ed2:	d1d6      	bne.n	10e82 <extract_conversion+0x29e>
			unsupported = true;
   10ed4:	2501      	movs	r5, #1
   10ed6:	e7d4      	b.n	10e82 <extract_conversion+0x29e>
		conv->specifier_cat = SPECIFIER_PTR;
   10ed8:	78a3      	ldrb	r3, [r4, #2]
   10eda:	2203      	movs	r2, #3
   10edc:	f362 0302 	bfi	r3, r2, #0, #3
   10ee0:	70a3      	strb	r3, [r4, #2]
		if (conv->length_mod != LENGTH_NONE) {
   10ee2:	7863      	ldrb	r3, [r4, #1]
   10ee4:	f013 0f78 	tst.w	r3, #120	; 0x78
   10ee8:	d0cb      	beq.n	10e82 <extract_conversion+0x29e>
			unsupported = true;
   10eea:	2501      	movs	r5, #1
   10eec:	e7c9      	b.n	10e82 <extract_conversion+0x29e>
		conv->invalid = true;
   10eee:	7823      	ldrb	r3, [r4, #0]
   10ef0:	f043 0301 	orr.w	r3, r3, #1
   10ef4:	7023      	strb	r3, [r4, #0]
		break;
   10ef6:	e7c4      	b.n	10e82 <extract_conversion+0x29e>

00010ef8 <z_cbvprintf_impl>:
	return (int)count;
}

int z_cbvprintf_impl(cbprintf_cb out, void *ctx, const char *fp,
		     va_list ap, uint32_t flags)
{
   10ef8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10efc:	b091      	sub	sp, #68	; 0x44
   10efe:	4606      	mov	r6, r0
   10f00:	460d      	mov	r5, r1
   10f02:	4691      	mov	r9, r2
   10f04:	9303      	str	r3, [sp, #12]
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
   10f06:	2400      	movs	r4, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
   10f08:	f899 0000 	ldrb.w	r0, [r9]
   10f0c:	2800      	cmp	r0, #0
   10f0e:	f000 82d5 	beq.w	114bc <z_cbvprintf_impl+0x5c4>
		if (*fp != '%') {
   10f12:	2825      	cmp	r0, #37	; 0x25
   10f14:	d008      	beq.n	10f28 <z_cbvprintf_impl+0x30>
			OUTC(*fp++);
   10f16:	f109 0901 	add.w	r9, r9, #1
   10f1a:	4629      	mov	r1, r5
   10f1c:	47b0      	blx	r6
   10f1e:	2800      	cmp	r0, #0
   10f20:	f2c0 82cd 	blt.w	114be <z_cbvprintf_impl+0x5c6>
   10f24:	3401      	adds	r4, #1
			continue;
   10f26:	e7ef      	b.n	10f08 <z_cbvprintf_impl+0x10>
		 * mitigate LLVM code generation bug.
		 */
		struct {
			union argument_value value;
			struct conversion conv;
		} state = {
   10f28:	2300      	movs	r3, #0
   10f2a:	9304      	str	r3, [sp, #16]
   10f2c:	9305      	str	r3, [sp, #20]
   10f2e:	9306      	str	r3, [sp, #24]
   10f30:	9307      	str	r3, [sp, #28]
   10f32:	9308      	str	r3, [sp, #32]
   10f34:	9309      	str	r3, [sp, #36]	; 0x24
		int precision = -1;
		const char *bps = NULL;
		const char *bpe = buf + sizeof(buf);
		char sign = 0;

		fp = extract_conversion(conv, sp);
   10f36:	4649      	mov	r1, r9
   10f38:	a806      	add	r0, sp, #24
   10f3a:	f7ff fe53 	bl	10be4 <extract_conversion>
   10f3e:	9002      	str	r0, [sp, #8]

		/* If dynamic width is specified, process it,
		 * otherwise set width if present.
		 */
		if (conv->width_star) {
   10f40:	f89d 3019 	ldrb.w	r3, [sp, #25]
   10f44:	f013 0f01 	tst.w	r3, #1
   10f48:	f000 8097 	beq.w	1107a <z_cbvprintf_impl+0x182>
			width = va_arg(ap, int);
   10f4c:	9b03      	ldr	r3, [sp, #12]
   10f4e:	1d1a      	adds	r2, r3, #4
   10f50:	9203      	str	r2, [sp, #12]
   10f52:	681f      	ldr	r7, [r3, #0]

			if (width < 0) {
   10f54:	2f00      	cmp	r7, #0
   10f56:	f2c0 8088 	blt.w	1106a <z_cbvprintf_impl+0x172>

		/* If dynamic precision is specified, process it, otherwise
		 * set precision if present.  For floating point where
		 * precision is not present use 6.
		 */
		if (conv->prec_star) {
   10f5a:	f89d 3019 	ldrb.w	r3, [sp, #25]
   10f5e:	f013 0f04 	tst.w	r3, #4
   10f62:	f000 809c 	beq.w	1109e <z_cbvprintf_impl+0x1a6>
			int arg = va_arg(ap, int);
   10f66:	9b03      	ldr	r3, [sp, #12]
   10f68:	1d1a      	adds	r2, r3, #4
   10f6a:	9203      	str	r2, [sp, #12]
   10f6c:	f8d3 a000 	ldr.w	sl, [r3]

			if (arg < 0) {
   10f70:	f1ba 0f00 	cmp.w	sl, #0
   10f74:	f2c0 808a 	blt.w	1108c <z_cbvprintf_impl+0x194>
		}

		/* Reuse width and precision memory in conv for value
		 * padding counts.
		 */
		conv->pad0_value = 0;
   10f78:	2300      	movs	r3, #0
   10f7a:	9307      	str	r3, [sp, #28]
		conv->pad0_pre_exp = 0;
   10f7c:	9308      	str	r3, [sp, #32]
		 * This can't be extracted to a helper function because
		 * passing a pointer to va_list doesn't work on x86_64.  See
		 * https://stackoverflow.com/a/8048892.
		 */
		enum specifier_cat_enum specifier_cat
			= (enum specifier_cat_enum)conv->specifier_cat;
   10f7e:	f89d 301a 	ldrb.w	r3, [sp, #26]
   10f82:	f003 0307 	and.w	r3, r3, #7
		enum length_mod_enum length_mod
			= (enum length_mod_enum)conv->length_mod;
   10f86:	f89d 1019 	ldrb.w	r1, [sp, #25]
   10f8a:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		/* Extract the value based on the argument category and length.
		 *
		 * Note that the length modifier doesn't affect the value of a
		 * pointer argument.
		 */
		if (specifier_cat == SPECIFIER_SINT) {
   10f8e:	2b01      	cmp	r3, #1
   10f90:	f000 808e 	beq.w	110b0 <z_cbvprintf_impl+0x1b8>
			if (length_mod == LENGTH_HH) {
				value->sint = (signed char)value->sint;
			} else if (length_mod == LENGTH_H) {
				value->sint = (short)value->sint;
			}
		} else if (specifier_cat == SPECIFIER_UINT) {
   10f94:	2b02      	cmp	r3, #2
   10f96:	f000 80d3 	beq.w	11140 <z_cbvprintf_impl+0x248>
			if (length_mod == LENGTH_HH) {
				value->uint = (unsigned char)value->uint;
			} else if (length_mod == LENGTH_H) {
				value->uint = (unsigned short)value->uint;
			}
		} else if (specifier_cat == SPECIFIER_FP) {
   10f9a:	2b04      	cmp	r3, #4
   10f9c:	f000 8124 	beq.w	111e8 <z_cbvprintf_impl+0x2f0>
			if (length_mod == LENGTH_UPPER_L) {
				value->ldbl = va_arg(ap, long double);
			} else {
				value->dbl = va_arg(ap, double);
			}
		} else if (specifier_cat == SPECIFIER_PTR) {
   10fa0:	2b03      	cmp	r3, #3
   10fa2:	f000 813b 	beq.w	1121c <z_cbvprintf_impl+0x324>
		/* We've now consumed all arguments related to this
		 * specification.  If the conversion is invalid, or is
		 * something we don't support, then output the original
		 * specification and move on.
		 */
		if (conv->invalid || conv->unsupported) {
   10fa6:	f89d 8018 	ldrb.w	r8, [sp, #24]
   10faa:	f018 0b03 	ands.w	fp, r8, #3
   10fae:	f040 813b 	bne.w	11228 <z_cbvprintf_impl+0x330>
		}

		/* Do formatting, either into the buffer or
		 * referencing external data.
		 */
		switch (conv->specifier) {
   10fb2:	f89d 301b 	ldrb.w	r3, [sp, #27]
   10fb6:	3b25      	subs	r3, #37	; 0x25
   10fb8:	2b53      	cmp	r3, #83	; 0x53
   10fba:	f200 81e6 	bhi.w	1138a <z_cbvprintf_impl+0x492>
   10fbe:	e8df f013 	tbh	[pc, r3, lsl #1]
   10fc2:	0140      	.short	0x0140
   10fc4:	01e401e4 	.word	0x01e401e4
   10fc8:	01e401e4 	.word	0x01e401e4
   10fcc:	01e401e4 	.word	0x01e401e4
   10fd0:	01e401e4 	.word	0x01e401e4
   10fd4:	01e401e4 	.word	0x01e401e4
   10fd8:	01e401e4 	.word	0x01e401e4
   10fdc:	01e401e4 	.word	0x01e401e4
   10fe0:	01e401e4 	.word	0x01e401e4
   10fe4:	01e401e4 	.word	0x01e401e4
   10fe8:	01e401e4 	.word	0x01e401e4
   10fec:	01e401e4 	.word	0x01e401e4
   10ff0:	01e401e4 	.word	0x01e401e4
   10ff4:	01e401e4 	.word	0x01e401e4
   10ff8:	01e401e4 	.word	0x01e401e4
   10ffc:	01e401e4 	.word	0x01e401e4
   11000:	01e401e4 	.word	0x01e401e4
   11004:	01e401e4 	.word	0x01e401e4
   11008:	01e401e4 	.word	0x01e401e4
   1100c:	01e401e4 	.word	0x01e401e4
   11010:	01e401e4 	.word	0x01e401e4
   11014:	01e401e4 	.word	0x01e401e4
   11018:	01e401e4 	.word	0x01e401e4
   1101c:	01e401e4 	.word	0x01e401e4
   11020:	01e401e4 	.word	0x01e401e4
   11024:	01e401e4 	.word	0x01e401e4
   11028:	01e40181 	.word	0x01e40181
   1102c:	01e401e4 	.word	0x01e401e4
   11030:	01e401e4 	.word	0x01e401e4
   11034:	01e401e4 	.word	0x01e401e4
   11038:	01e401e4 	.word	0x01e401e4
   1103c:	015e01e4 	.word	0x015e01e4
   11040:	01e40167 	.word	0x01e40167
   11044:	01e401e4 	.word	0x01e401e4
   11048:	016701e4 	.word	0x016701e4
   1104c:	01e401e4 	.word	0x01e401e4
   11050:	01e401e4 	.word	0x01e401e4
   11054:	018101be 	.word	0x018101be
   11058:	01e401a2 	.word	0x01e401a2
   1105c:	014d01e4 	.word	0x014d01e4
   11060:	018101e4 	.word	0x018101e4
   11064:	01e401e4 	.word	0x01e401e4
   11068:	0181      	.short	0x0181
				conv->flag_dash = true;
   1106a:	f89d 3018 	ldrb.w	r3, [sp, #24]
   1106e:	f043 0304 	orr.w	r3, r3, #4
   11072:	f88d 3018 	strb.w	r3, [sp, #24]
				width = -width;
   11076:	427f      	negs	r7, r7
   11078:	e76f      	b.n	10f5a <z_cbvprintf_impl+0x62>
		} else if (conv->width_present) {
   1107a:	f99d 3018 	ldrsb.w	r3, [sp, #24]
   1107e:	2b00      	cmp	r3, #0
   11080:	db02      	blt.n	11088 <z_cbvprintf_impl+0x190>
		int width = -1;
   11082:	f04f 37ff 	mov.w	r7, #4294967295
   11086:	e768      	b.n	10f5a <z_cbvprintf_impl+0x62>
			width = conv->width_value;
   11088:	9f07      	ldr	r7, [sp, #28]
   1108a:	e766      	b.n	10f5a <z_cbvprintf_impl+0x62>
				conv->prec_present = false;
   1108c:	f89d 3019 	ldrb.w	r3, [sp, #25]
   11090:	f36f 0341 	bfc	r3, #1, #1
   11094:	f88d 3019 	strb.w	r3, [sp, #25]
		int precision = -1;
   11098:	f04f 3aff 	mov.w	sl, #4294967295
   1109c:	e76c      	b.n	10f78 <z_cbvprintf_impl+0x80>
		} else if (conv->prec_present) {
   1109e:	f013 0f02 	tst.w	r3, #2
   110a2:	d002      	beq.n	110aa <z_cbvprintf_impl+0x1b2>
			precision = conv->prec_value;
   110a4:	f8dd a020 	ldr.w	sl, [sp, #32]
   110a8:	e766      	b.n	10f78 <z_cbvprintf_impl+0x80>
		int precision = -1;
   110aa:	f04f 3aff 	mov.w	sl, #4294967295
   110ae:	e763      	b.n	10f78 <z_cbvprintf_impl+0x80>
			switch (length_mod) {
   110b0:	1ecb      	subs	r3, r1, #3
   110b2:	2b04      	cmp	r3, #4
   110b4:	d804      	bhi.n	110c0 <z_cbvprintf_impl+0x1c8>
   110b6:	e8df f003 	tbb	[pc, r3]
   110ba:	1d0b      	.short	0x1d0b
   110bc:	3529      	.short	0x3529
   110be:	35          	.byte	0x35
   110bf:	00          	.byte	0x00
				value->sint = va_arg(ap, int);
   110c0:	9b03      	ldr	r3, [sp, #12]
   110c2:	1d1a      	adds	r2, r3, #4
   110c4:	9203      	str	r2, [sp, #12]
   110c6:	681b      	ldr	r3, [r3, #0]
   110c8:	17da      	asrs	r2, r3, #31
   110ca:	9304      	str	r3, [sp, #16]
   110cc:	9205      	str	r2, [sp, #20]
				break;
   110ce:	e006      	b.n	110de <z_cbvprintf_impl+0x1e6>
					value->sint = va_arg(ap, long);
   110d0:	9b03      	ldr	r3, [sp, #12]
   110d2:	1d1a      	adds	r2, r3, #4
   110d4:	9203      	str	r2, [sp, #12]
   110d6:	681b      	ldr	r3, [r3, #0]
   110d8:	17da      	asrs	r2, r3, #31
   110da:	9304      	str	r3, [sp, #16]
   110dc:	9205      	str	r2, [sp, #20]
			if (length_mod == LENGTH_HH) {
   110de:	2901      	cmp	r1, #1
   110e0:	d028      	beq.n	11134 <z_cbvprintf_impl+0x23c>
			} else if (length_mod == LENGTH_H) {
   110e2:	2902      	cmp	r1, #2
   110e4:	f47f af5f 	bne.w	10fa6 <z_cbvprintf_impl+0xae>
				value->sint = (short)value->sint;
   110e8:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
   110ec:	17da      	asrs	r2, r3, #31
   110ee:	9304      	str	r3, [sp, #16]
   110f0:	9205      	str	r2, [sp, #20]
   110f2:	e758      	b.n	10fa6 <z_cbvprintf_impl+0xae>
					(sint_value_type)va_arg(ap, long long);
   110f4:	9b03      	ldr	r3, [sp, #12]
   110f6:	3307      	adds	r3, #7
   110f8:	f023 0307 	bic.w	r3, r3, #7
   110fc:	f103 0208 	add.w	r2, r3, #8
   11100:	9203      	str	r2, [sp, #12]
   11102:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->sint =
   11106:	e9cd 2304 	strd	r2, r3, [sp, #16]
				break;
   1110a:	e7e8      	b.n	110de <z_cbvprintf_impl+0x1e6>
					(sint_value_type)va_arg(ap, intmax_t);
   1110c:	9b03      	ldr	r3, [sp, #12]
   1110e:	3307      	adds	r3, #7
   11110:	f023 0307 	bic.w	r3, r3, #7
   11114:	f103 0208 	add.w	r2, r3, #8
   11118:	9203      	str	r2, [sp, #12]
   1111a:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->sint =
   1111e:	e9cd 2304 	strd	r2, r3, [sp, #16]
				break;
   11122:	e7dc      	b.n	110de <z_cbvprintf_impl+0x1e6>
					(sint_value_type)va_arg(ap, ptrdiff_t);
   11124:	9b03      	ldr	r3, [sp, #12]
   11126:	1d1a      	adds	r2, r3, #4
   11128:	9203      	str	r2, [sp, #12]
   1112a:	681b      	ldr	r3, [r3, #0]
   1112c:	17da      	asrs	r2, r3, #31
				value->sint =
   1112e:	9304      	str	r3, [sp, #16]
   11130:	9205      	str	r2, [sp, #20]
				break;
   11132:	e7d4      	b.n	110de <z_cbvprintf_impl+0x1e6>
				value->sint = (signed char)value->sint;
   11134:	f99d 3010 	ldrsb.w	r3, [sp, #16]
   11138:	17da      	asrs	r2, r3, #31
   1113a:	9304      	str	r3, [sp, #16]
   1113c:	9205      	str	r2, [sp, #20]
   1113e:	e732      	b.n	10fa6 <z_cbvprintf_impl+0xae>
			switch (length_mod) {
   11140:	1ecb      	subs	r3, r1, #3
   11142:	2b04      	cmp	r3, #4
   11144:	d804      	bhi.n	11150 <z_cbvprintf_impl+0x258>
   11146:	e8df f003 	tbb	[pc, r3]
   1114a:	1f0b      	.short	0x1f0b
   1114c:	4135      	.short	0x4135
   1114e:	41          	.byte	0x41
   1114f:	00          	.byte	0x00
				value->uint = va_arg(ap, unsigned int);
   11150:	9b03      	ldr	r3, [sp, #12]
   11152:	1d1a      	adds	r2, r3, #4
   11154:	9203      	str	r2, [sp, #12]
   11156:	681b      	ldr	r3, [r3, #0]
   11158:	9304      	str	r3, [sp, #16]
   1115a:	2300      	movs	r3, #0
   1115c:	9305      	str	r3, [sp, #20]
				break;
   1115e:	e01e      	b.n	1119e <z_cbvprintf_impl+0x2a6>
				    && (conv->specifier == 'c')) {
   11160:	f89d 301b 	ldrb.w	r3, [sp, #27]
				if ((!WCHAR_IS_SIGNED)
   11164:	2b63      	cmp	r3, #99	; 0x63
   11166:	d007      	beq.n	11178 <z_cbvprintf_impl+0x280>
					value->uint = va_arg(ap, unsigned long);
   11168:	9b03      	ldr	r3, [sp, #12]
   1116a:	1d1a      	adds	r2, r3, #4
   1116c:	9203      	str	r2, [sp, #12]
   1116e:	681b      	ldr	r3, [r3, #0]
   11170:	9304      	str	r3, [sp, #16]
   11172:	2300      	movs	r3, #0
   11174:	9305      	str	r3, [sp, #20]
   11176:	e012      	b.n	1119e <z_cbvprintf_impl+0x2a6>
					value->uint = (wchar_t)va_arg(ap,
   11178:	9b03      	ldr	r3, [sp, #12]
   1117a:	1d1a      	adds	r2, r3, #4
   1117c:	9203      	str	r2, [sp, #12]
   1117e:	681b      	ldr	r3, [r3, #0]
   11180:	9304      	str	r3, [sp, #16]
   11182:	2300      	movs	r3, #0
   11184:	9305      	str	r3, [sp, #20]
   11186:	e00a      	b.n	1119e <z_cbvprintf_impl+0x2a6>
					(uint_value_type)va_arg(ap,
   11188:	9b03      	ldr	r3, [sp, #12]
   1118a:	3307      	adds	r3, #7
   1118c:	f023 0307 	bic.w	r3, r3, #7
   11190:	f103 0208 	add.w	r2, r3, #8
   11194:	9203      	str	r2, [sp, #12]
   11196:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->uint =
   1119a:	e9cd 2304 	strd	r2, r3, [sp, #16]
			if (length_mod == LENGTH_HH) {
   1119e:	2901      	cmp	r1, #1
   111a0:	d01c      	beq.n	111dc <z_cbvprintf_impl+0x2e4>
			} else if (length_mod == LENGTH_H) {
   111a2:	2902      	cmp	r1, #2
   111a4:	f47f aeff 	bne.w	10fa6 <z_cbvprintf_impl+0xae>
				value->uint = (unsigned short)value->uint;
   111a8:	f8bd 3010 	ldrh.w	r3, [sp, #16]
   111ac:	9304      	str	r3, [sp, #16]
   111ae:	2300      	movs	r3, #0
   111b0:	9305      	str	r3, [sp, #20]
   111b2:	e6f8      	b.n	10fa6 <z_cbvprintf_impl+0xae>
					(uint_value_type)va_arg(ap,
   111b4:	9b03      	ldr	r3, [sp, #12]
   111b6:	3307      	adds	r3, #7
   111b8:	f023 0307 	bic.w	r3, r3, #7
   111bc:	f103 0208 	add.w	r2, r3, #8
   111c0:	9203      	str	r2, [sp, #12]
   111c2:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->uint =
   111c6:	e9cd 2304 	strd	r2, r3, [sp, #16]
				break;
   111ca:	e7e8      	b.n	1119e <z_cbvprintf_impl+0x2a6>
					(uint_value_type)va_arg(ap, size_t);
   111cc:	9b03      	ldr	r3, [sp, #12]
   111ce:	1d1a      	adds	r2, r3, #4
   111d0:	9203      	str	r2, [sp, #12]
   111d2:	681b      	ldr	r3, [r3, #0]
				value->uint =
   111d4:	9304      	str	r3, [sp, #16]
   111d6:	2300      	movs	r3, #0
   111d8:	9305      	str	r3, [sp, #20]
				break;
   111da:	e7e0      	b.n	1119e <z_cbvprintf_impl+0x2a6>
				value->uint = (unsigned char)value->uint;
   111dc:	f89d 3010 	ldrb.w	r3, [sp, #16]
   111e0:	9304      	str	r3, [sp, #16]
   111e2:	2300      	movs	r3, #0
   111e4:	9305      	str	r3, [sp, #20]
   111e6:	e6de      	b.n	10fa6 <z_cbvprintf_impl+0xae>
			if (length_mod == LENGTH_UPPER_L) {
   111e8:	2908      	cmp	r1, #8
   111ea:	d00b      	beq.n	11204 <z_cbvprintf_impl+0x30c>
				value->dbl = va_arg(ap, double);
   111ec:	9b03      	ldr	r3, [sp, #12]
   111ee:	3307      	adds	r3, #7
   111f0:	f023 0307 	bic.w	r3, r3, #7
   111f4:	f103 0208 	add.w	r2, r3, #8
   111f8:	9203      	str	r2, [sp, #12]
   111fa:	e9d3 2300 	ldrd	r2, r3, [r3]
   111fe:	e9cd 2304 	strd	r2, r3, [sp, #16]
   11202:	e6d0      	b.n	10fa6 <z_cbvprintf_impl+0xae>
				value->ldbl = va_arg(ap, long double);
   11204:	9b03      	ldr	r3, [sp, #12]
   11206:	3307      	adds	r3, #7
   11208:	f023 0307 	bic.w	r3, r3, #7
   1120c:	f103 0208 	add.w	r2, r3, #8
   11210:	9203      	str	r2, [sp, #12]
   11212:	e9d3 2300 	ldrd	r2, r3, [r3]
   11216:	e9cd 2304 	strd	r2, r3, [sp, #16]
   1121a:	e6c4      	b.n	10fa6 <z_cbvprintf_impl+0xae>
			value->ptr = va_arg(ap, void *);
   1121c:	9b03      	ldr	r3, [sp, #12]
   1121e:	1d1a      	adds	r2, r3, #4
   11220:	9203      	str	r2, [sp, #12]
   11222:	681b      	ldr	r3, [r3, #0]
   11224:	9304      	str	r3, [sp, #16]
   11226:	e6be      	b.n	10fa6 <z_cbvprintf_impl+0xae>
			OUTS(sp, fp);
   11228:	9f02      	ldr	r7, [sp, #8]
   1122a:	463b      	mov	r3, r7
   1122c:	464a      	mov	r2, r9
   1122e:	4629      	mov	r1, r5
   11230:	4630      	mov	r0, r6
   11232:	f006 fb52 	bl	178da <outs>
   11236:	2800      	cmp	r0, #0
   11238:	f2c0 8141 	blt.w	114be <z_cbvprintf_impl+0x5c6>
   1123c:	4404      	add	r4, r0
		fp = extract_conversion(conv, sp);
   1123e:	46b9      	mov	r9, r7
			continue;
   11240:	e662      	b.n	10f08 <z_cbvprintf_impl+0x10>
		case '%':
			OUTC('%');
   11242:	4629      	mov	r1, r5
   11244:	2025      	movs	r0, #37	; 0x25
   11246:	47b0      	blx	r6
   11248:	2800      	cmp	r0, #0
   1124a:	f2c0 8138 	blt.w	114be <z_cbvprintf_impl+0x5c6>
   1124e:	3401      	adds	r4, #1
		char sign = 0;
   11250:	46d8      	mov	r8, fp
		const char *bpe = buf + sizeof(buf);
   11252:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
		const char *bps = NULL;
   11256:	f04f 0900 	mov.w	r9, #0
			break;
   1125a:	e09b      	b.n	11394 <z_cbvprintf_impl+0x49c>
		case 's': {
			bps = (const char *)value->ptr;
   1125c:	f8dd 9010 	ldr.w	r9, [sp, #16]

			size_t len;

			if (precision >= 0) {
   11260:	f1ba 0f00 	cmp.w	sl, #0
   11264:	db07      	blt.n	11276 <z_cbvprintf_impl+0x37e>
				len = strnlen(bps, precision);
   11266:	4651      	mov	r1, sl
   11268:	4648      	mov	r0, r9
   1126a:	f006 fc8b 	bl	17b84 <strnlen>
			} else {
				len = strlen(bps);
			}

			bpe = bps + len;
   1126e:	eb09 0a00 	add.w	sl, r9, r0
		char sign = 0;
   11272:	46d8      	mov	r8, fp
			precision = -1;

			break;
   11274:	e08e      	b.n	11394 <z_cbvprintf_impl+0x49c>
				len = strlen(bps);
   11276:	4648      	mov	r0, r9
   11278:	f006 fc7b 	bl	17b72 <strlen>
   1127c:	e7f7      	b.n	1126e <z_cbvprintf_impl+0x376>
		}
		case 'c':
			bps = buf;
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
   1127e:	9b04      	ldr	r3, [sp, #16]
   11280:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
		char sign = 0;
   11284:	46d8      	mov	r8, fp
			bpe = buf + 1;
   11286:	f10d 0a29 	add.w	sl, sp, #41	; 0x29
			bps = buf;
   1128a:	f10d 0928 	add.w	r9, sp, #40	; 0x28
			break;
   1128e:	e081      	b.n	11394 <z_cbvprintf_impl+0x49c>
		case 'd':
		case 'i':
			if (conv->flag_plus) {
   11290:	f018 0f08 	tst.w	r8, #8
   11294:	d105      	bne.n	112a2 <z_cbvprintf_impl+0x3aa>
				sign = '+';
			} else if (conv->flag_space) {
   11296:	f018 0810 	ands.w	r8, r8, #16
   1129a:	d004      	beq.n	112a6 <z_cbvprintf_impl+0x3ae>
				sign = ' ';
   1129c:	f04f 0820 	mov.w	r8, #32
   112a0:	e001      	b.n	112a6 <z_cbvprintf_impl+0x3ae>
				sign = '+';
   112a2:	f04f 082b 	mov.w	r8, #43	; 0x2b

			/* sint/uint overlay in the union, and so
			 * can't appear in read and write operations
			 * in the same statement.
			 */
			sint = value->sint;
   112a6:	9a04      	ldr	r2, [sp, #16]
   112a8:	9b05      	ldr	r3, [sp, #20]
			if (sint < 0) {
   112aa:	2b00      	cmp	r3, #0
   112ac:	db02      	blt.n	112b4 <z_cbvprintf_impl+0x3bc>
				sign = '-';
				value->uint = (uint_value_type)-sint;
			} else {
				value->uint = (uint_value_type)sint;
   112ae:	9204      	str	r2, [sp, #16]
   112b0:	9305      	str	r3, [sp, #20]
   112b2:	e008      	b.n	112c6 <z_cbvprintf_impl+0x3ce>
				value->uint = (uint_value_type)-sint;
   112b4:	4252      	negs	r2, r2
   112b6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   112ba:	9204      	str	r2, [sp, #16]
   112bc:	9305      	str	r3, [sp, #20]
				sign = '-';
   112be:	f04f 082d 	mov.w	r8, #45	; 0x2d
   112c2:	e000      	b.n	112c6 <z_cbvprintf_impl+0x3ce>
		switch (conv->specifier) {
   112c4:	46d8      	mov	r8, fp
			__fallthrough;
		case 'o':
		case 'u':
		case 'x':
		case 'X':
			bps = encode_uint(value->uint, conv, buf, bpe);
   112c6:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
   112ca:	9300      	str	r3, [sp, #0]
   112cc:	ab0a      	add	r3, sp, #40	; 0x28
   112ce:	aa06      	add	r2, sp, #24
   112d0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   112d4:	f006 fa97 	bl	17806 <encode_uint>
   112d8:	4681      	mov	r9, r0
			/* Update pad0 values based on precision and converted
			 * length.  Note that a non-empty sign is not in the
			 * converted sequence, but it does not affect the
			 * padding size.
			 */
			if (precision >= 0) {
   112da:	f1ba 0f00 	cmp.w	sl, #0
   112de:	f2c0 8088 	blt.w	113f2 <z_cbvprintf_impl+0x4fa>
				size_t len = bpe - bps;
   112e2:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
   112e6:	eba3 0309 	sub.w	r3, r3, r9

				/* Zero-padding flag is ignored for integer
				 * conversions with precision.
				 */
				conv->flag_zero = false;
   112ea:	f89d 2018 	ldrb.w	r2, [sp, #24]
   112ee:	f36f 1286 	bfc	r2, #6, #1
   112f2:	f88d 2018 	strb.w	r2, [sp, #24]

				/* Set pad0_value to satisfy precision */
				if (len < (size_t)precision) {
   112f6:	459a      	cmp	sl, r3
   112f8:	d97e      	bls.n	113f8 <z_cbvprintf_impl+0x500>
					conv->pad0_value = precision - (int)len;
   112fa:	ebaa 0303 	sub.w	r3, sl, r3
   112fe:	9307      	str	r3, [sp, #28]
		const char *bpe = buf + sizeof(buf);
   11300:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
   11304:	e046      	b.n	11394 <z_cbvprintf_impl+0x49c>
		case 'p':
			/* Implementation-defined: null is "(nil)", non-null
			 * has 0x prefix followed by significant address hex
			 * digits, no leading zeros.
			 */
			if (value->ptr != NULL) {
   11306:	9804      	ldr	r0, [sp, #16]
   11308:	b928      	cbnz	r0, 11316 <z_cbvprintf_impl+0x41e>
		char sign = 0;
   1130a:	46d8      	mov	r8, fp

				goto prec_int_pad0;
			}

			bps = "(nil)";
			bpe = bps + 5;
   1130c:	f8df a1b4 	ldr.w	sl, [pc, #436]	; 114c4 <z_cbvprintf_impl+0x5cc>
			bps = "(nil)";
   11310:	f1aa 0905 	sub.w	r9, sl, #5
   11314:	e03e      	b.n	11394 <z_cbvprintf_impl+0x49c>
				bps = encode_uint((uintptr_t)value->ptr, conv,
   11316:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
   1131a:	9300      	str	r3, [sp, #0]
   1131c:	ab0a      	add	r3, sp, #40	; 0x28
   1131e:	aa06      	add	r2, sp, #24
   11320:	2100      	movs	r1, #0
   11322:	f006 fa70 	bl	17806 <encode_uint>
   11326:	4681      	mov	r9, r0
				conv->altform_0c = true;
   11328:	f89d 301a 	ldrb.w	r3, [sp, #26]
   1132c:	f043 0310 	orr.w	r3, r3, #16
   11330:	f88d 301a 	strb.w	r3, [sp, #26]
				conv->specifier = 'x';
   11334:	2378      	movs	r3, #120	; 0x78
   11336:	f88d 301b 	strb.w	r3, [sp, #27]
		char sign = 0;
   1133a:	46d8      	mov	r8, fp
				goto prec_int_pad0;
   1133c:	e7cd      	b.n	112da <z_cbvprintf_impl+0x3e2>

			break;
		case 'n':
			if (IS_ENABLED(CONFIG_CBPRINTF_N_SPECIFIER)) {
				store_count(conv, value->ptr, count);
   1133e:	9a04      	ldr	r2, [sp, #16]
	switch ((enum length_mod_enum)conv->length_mod) {
   11340:	f89d 3019 	ldrb.w	r3, [sp, #25]
   11344:	f3c3 03c3 	ubfx	r3, r3, #3, #4
   11348:	2b07      	cmp	r3, #7
   1134a:	d806      	bhi.n	1135a <z_cbvprintf_impl+0x462>
   1134c:	e8df f003 	tbb	[pc, r3]
   11350:	0f0d0b04 	.word	0x0f0d0b04
   11354:	1b191511 	.word	0x1b191511
		*(int *)dp = count;
   11358:	6014      	str	r4, [r2, #0]
		char sign = 0;
   1135a:	46d8      	mov	r8, fp
		const char *bpe = buf + sizeof(buf);
   1135c:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
		const char *bps = NULL;
   11360:	f04f 0900 	mov.w	r9, #0
}
   11364:	e016      	b.n	11394 <z_cbvprintf_impl+0x49c>
		*(signed char *)dp = (signed char)count;
   11366:	7014      	strb	r4, [r2, #0]
		break;
   11368:	e7f7      	b.n	1135a <z_cbvprintf_impl+0x462>
		*(short *)dp = (short)count;
   1136a:	8014      	strh	r4, [r2, #0]
		break;
   1136c:	e7f5      	b.n	1135a <z_cbvprintf_impl+0x462>
		*(long *)dp = (long)count;
   1136e:	6014      	str	r4, [r2, #0]
		break;
   11370:	e7f3      	b.n	1135a <z_cbvprintf_impl+0x462>
		*(long long *)dp = (long long)count;
   11372:	17e3      	asrs	r3, r4, #31
   11374:	6014      	str	r4, [r2, #0]
   11376:	6053      	str	r3, [r2, #4]
		break;
   11378:	e7ef      	b.n	1135a <z_cbvprintf_impl+0x462>
		*(intmax_t *)dp = (intmax_t)count;
   1137a:	17e3      	asrs	r3, r4, #31
   1137c:	6014      	str	r4, [r2, #0]
   1137e:	6053      	str	r3, [r2, #4]
		break;
   11380:	e7eb      	b.n	1135a <z_cbvprintf_impl+0x462>
		*(size_t *)dp = (size_t)count;
   11382:	6014      	str	r4, [r2, #0]
		break;
   11384:	e7e9      	b.n	1135a <z_cbvprintf_impl+0x462>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
   11386:	6014      	str	r4, [r2, #0]
		break;
   11388:	e7e7      	b.n	1135a <z_cbvprintf_impl+0x462>
		switch (conv->specifier) {
   1138a:	46d8      	mov	r8, fp
   1138c:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
   11390:	f04f 0900 	mov.w	r9, #0
		}

		/* If we don't have a converted value to emit, move
		 * on.
		 */
		if (bps == NULL) {
   11394:	f1b9 0f00 	cmp.w	r9, #0
   11398:	f000 808d 	beq.w	114b6 <z_cbvprintf_impl+0x5be>
		 *   * any exponent content from the converted value
		 * * for non-FP:
		 *   * any pad0_prefix
		 *   * the converted value
		 */
		size_t nj_len = (bpe - bps);
   1139c:	ebaa 0309 	sub.w	r3, sl, r9
		int pad_len = 0;

		if (sign != 0) {
   113a0:	f1b8 0f00 	cmp.w	r8, #0
   113a4:	d000      	beq.n	113a8 <z_cbvprintf_impl+0x4b0>
			nj_len += 1U;
   113a6:	3301      	adds	r3, #1
		}

		if (conv->altform_0c) {
   113a8:	f89d 201a 	ldrb.w	r2, [sp, #26]
   113ac:	f012 0f10 	tst.w	r2, #16
   113b0:	d025      	beq.n	113fe <z_cbvprintf_impl+0x506>
			nj_len += 2U;
   113b2:	3302      	adds	r3, #2
		} else if (conv->altform_0) {
			nj_len += 1U;
		}

		nj_len += conv->pad0_value;
   113b4:	9907      	ldr	r1, [sp, #28]
   113b6:	440b      	add	r3, r1
		if (conv->pad_fp) {
   113b8:	f012 0f40 	tst.w	r2, #64	; 0x40
   113bc:	d001      	beq.n	113c2 <z_cbvprintf_impl+0x4ca>
			nj_len += conv->pad0_pre_exp;
   113be:	9a08      	ldr	r2, [sp, #32]
   113c0:	4413      	add	r3, r2
		 * result in no padding.
		 *
		 * If a non-negative padding width is present and we're doing
		 * right-justification, emit the padding now.
		 */
		if (width > 0) {
   113c2:	2f00      	cmp	r7, #0
   113c4:	dd31      	ble.n	1142a <z_cbvprintf_impl+0x532>
			width -= (int)nj_len;
   113c6:	1aff      	subs	r7, r7, r3

			if (!conv->flag_dash) {
   113c8:	f89d 3018 	ldrb.w	r3, [sp, #24]
   113cc:	f013 0f04 	tst.w	r3, #4
   113d0:	d12b      	bne.n	1142a <z_cbvprintf_impl+0x532>
				char pad = ' ';

				/* If we're zero-padding we have to emit the
				 * sign first.
				 */
				if (conv->flag_zero) {
   113d2:	f013 0f40 	tst.w	r3, #64	; 0x40
   113d6:	d017      	beq.n	11408 <z_cbvprintf_impl+0x510>
					if (sign != 0) {
   113d8:	f1b8 0f00 	cmp.w	r8, #0
   113dc:	d017      	beq.n	1140e <z_cbvprintf_impl+0x516>
						OUTC(sign);
   113de:	4629      	mov	r1, r5
   113e0:	4640      	mov	r0, r8
   113e2:	47b0      	blx	r6
   113e4:	2800      	cmp	r0, #0
   113e6:	db6a      	blt.n	114be <z_cbvprintf_impl+0x5c6>
   113e8:	3401      	adds	r4, #1
						sign = 0;
   113ea:	46d8      	mov	r8, fp
					}
					pad = '0';
   113ec:	f04f 0b30 	mov.w	fp, #48	; 0x30
   113f0:	e00f      	b.n	11412 <z_cbvprintf_impl+0x51a>
		const char *bpe = buf + sizeof(buf);
   113f2:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
   113f6:	e7cd      	b.n	11394 <z_cbvprintf_impl+0x49c>
   113f8:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
   113fc:	e7ca      	b.n	11394 <z_cbvprintf_impl+0x49c>
		} else if (conv->altform_0) {
   113fe:	f012 0f08 	tst.w	r2, #8
   11402:	d0d7      	beq.n	113b4 <z_cbvprintf_impl+0x4bc>
			nj_len += 1U;
   11404:	3301      	adds	r3, #1
   11406:	e7d5      	b.n	113b4 <z_cbvprintf_impl+0x4bc>
				char pad = ' ';
   11408:	f04f 0b20 	mov.w	fp, #32
   1140c:	e001      	b.n	11412 <z_cbvprintf_impl+0x51a>
					pad = '0';
   1140e:	f04f 0b30 	mov.w	fp, #48	; 0x30
   11412:	463b      	mov	r3, r7
				}

				while (width-- > 0) {
   11414:	1e5f      	subs	r7, r3, #1
   11416:	2b00      	cmp	r3, #0
   11418:	dd07      	ble.n	1142a <z_cbvprintf_impl+0x532>
					OUTC(pad);
   1141a:	4629      	mov	r1, r5
   1141c:	4658      	mov	r0, fp
   1141e:	47b0      	blx	r6
   11420:	2800      	cmp	r0, #0
   11422:	db4c      	blt.n	114be <z_cbvprintf_impl+0x5c6>
   11424:	3401      	adds	r4, #1
				while (width-- > 0) {
   11426:	463b      	mov	r3, r7
   11428:	e7f4      	b.n	11414 <z_cbvprintf_impl+0x51c>
		}

		/* If we have a sign that hasn't been emitted, now's the
		 * time....
		 */
		if (sign != 0) {
   1142a:	f1b8 0f00 	cmp.w	r8, #0
   1142e:	d005      	beq.n	1143c <z_cbvprintf_impl+0x544>
			OUTC(sign);
   11430:	4629      	mov	r1, r5
   11432:	4640      	mov	r0, r8
   11434:	47b0      	blx	r6
   11436:	2800      	cmp	r0, #0
   11438:	db41      	blt.n	114be <z_cbvprintf_impl+0x5c6>
   1143a:	3401      	adds	r4, #1
				OUTC('0');
			}

			OUTS(cp, bpe);
		} else {
			if (conv->altform_0c | conv->altform_0) {
   1143c:	f89d 301a 	ldrb.w	r3, [sp, #26]
   11440:	f3c3 1200 	ubfx	r2, r3, #4, #1
   11444:	f3c3 03c0 	ubfx	r3, r3, #3, #1
   11448:	4313      	orrs	r3, r2
   1144a:	d005      	beq.n	11458 <z_cbvprintf_impl+0x560>
				OUTC('0');
   1144c:	4629      	mov	r1, r5
   1144e:	2030      	movs	r0, #48	; 0x30
   11450:	47b0      	blx	r6
   11452:	2800      	cmp	r0, #0
   11454:	db33      	blt.n	114be <z_cbvprintf_impl+0x5c6>
   11456:	3401      	adds	r4, #1
			}

			if (conv->altform_0c) {
   11458:	f89d 301a 	ldrb.w	r3, [sp, #26]
   1145c:	f013 0f10 	tst.w	r3, #16
   11460:	d006      	beq.n	11470 <z_cbvprintf_impl+0x578>
				OUTC(conv->specifier);
   11462:	4629      	mov	r1, r5
   11464:	f89d 001b 	ldrb.w	r0, [sp, #27]
   11468:	47b0      	blx	r6
   1146a:	2800      	cmp	r0, #0
   1146c:	db27      	blt.n	114be <z_cbvprintf_impl+0x5c6>
   1146e:	3401      	adds	r4, #1
			}

			pad_len = conv->pad0_value;
   11470:	9b07      	ldr	r3, [sp, #28]
			while (pad_len-- > 0) {
   11472:	f103 38ff 	add.w	r8, r3, #4294967295
   11476:	2b00      	cmp	r3, #0
   11478:	dd07      	ble.n	1148a <z_cbvprintf_impl+0x592>
				OUTC('0');
   1147a:	4629      	mov	r1, r5
   1147c:	2030      	movs	r0, #48	; 0x30
   1147e:	47b0      	blx	r6
   11480:	2800      	cmp	r0, #0
   11482:	db1c      	blt.n	114be <z_cbvprintf_impl+0x5c6>
   11484:	3401      	adds	r4, #1
			while (pad_len-- > 0) {
   11486:	4643      	mov	r3, r8
   11488:	e7f3      	b.n	11472 <z_cbvprintf_impl+0x57a>
			}

			OUTS(bps, bpe);
   1148a:	4653      	mov	r3, sl
   1148c:	464a      	mov	r2, r9
   1148e:	4629      	mov	r1, r5
   11490:	4630      	mov	r0, r6
   11492:	f006 fa22 	bl	178da <outs>
   11496:	2800      	cmp	r0, #0
   11498:	db11      	blt.n	114be <z_cbvprintf_impl+0x5c6>
   1149a:	4404      	add	r4, r0
		}

		/* Finish left justification */
		while (width > 0) {
   1149c:	2f00      	cmp	r7, #0
   1149e:	dd07      	ble.n	114b0 <z_cbvprintf_impl+0x5b8>
			OUTC(' ');
   114a0:	4629      	mov	r1, r5
   114a2:	2020      	movs	r0, #32
   114a4:	47b0      	blx	r6
   114a6:	2800      	cmp	r0, #0
   114a8:	db09      	blt.n	114be <z_cbvprintf_impl+0x5c6>
   114aa:	3401      	adds	r4, #1
			--width;
   114ac:	3f01      	subs	r7, #1
   114ae:	e7f5      	b.n	1149c <z_cbvprintf_impl+0x5a4>
		fp = extract_conversion(conv, sp);
   114b0:	f8dd 9008 	ldr.w	r9, [sp, #8]
   114b4:	e528      	b.n	10f08 <z_cbvprintf_impl+0x10>
   114b6:	f8dd 9008 	ldr.w	r9, [sp, #8]
   114ba:	e525      	b.n	10f08 <z_cbvprintf_impl+0x10>
		}
	}

	return count;
   114bc:	4620      	mov	r0, r4
#undef OUTS
#undef OUTC
}
   114be:	b011      	add	sp, #68	; 0x44
   114c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   114c4:	00019b1d 	.word	0x00019b1d

000114c8 <sys_reboot>:
#include <zephyr/sys/printk.h>

extern void sys_arch_reboot(int type);

FUNC_NORETURN void sys_reboot(int type)
{
   114c8:	b508      	push	{r3, lr}
   114ca:	f04f 0220 	mov.w	r2, #32
   114ce:	f3ef 8311 	mrs	r3, BASEPRI
   114d2:	f382 8812 	msr	BASEPRI_MAX, r2
   114d6:	f3bf 8f6f 	isb	sy
	(void)irq_lock();
	sys_clock_disable();

	sys_arch_reboot(type);
   114da:	f000 fe7d 	bl	121d8 <sys_arch_reboot>

	/* should never get here */
	printk("Failed to reboot: spinning endlessly...\n");
   114de:	4803      	ldr	r0, [pc, #12]	; (114ec <sys_reboot+0x24>)
   114e0:	f005 fe79 	bl	171d6 <printk>
 * @note In some architectures, before returning, the function unmasks interrupts
 * unconditionally.
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
   114e4:	f000 fa6c 	bl	119c0 <arch_cpu_idle>
   114e8:	e7fc      	b.n	114e4 <sys_reboot+0x1c>
   114ea:	bf00      	nop
   114ec:	00019b20 	.word	0x00019b20

000114f0 <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
   114f0:	f002 bb74 	b.w	13bdc <SystemInit>

000114f4 <flash_area_open>:

int flash_area_open(uint8_t id, const struct flash_area **fap)
{
	const struct flash_area *area;

	if (flash_map == NULL) {
   114f4:	4b13      	ldr	r3, [pc, #76]	; (11544 <flash_area_open+0x50>)
   114f6:	681b      	ldr	r3, [r3, #0]
   114f8:	b1f3      	cbz	r3, 11538 <flash_area_open+0x44>
{
   114fa:	b570      	push	{r4, r5, r6, lr}
   114fc:	460d      	mov	r5, r1
extern const struct flash_area *flash_map;
extern const int flash_map_entries;

static inline struct flash_area const *get_flash_area_from_id(int idx)
{
	for (int i = 0; i < flash_map_entries; i++) {
   114fe:	2300      	movs	r3, #0
   11500:	e000      	b.n	11504 <flash_area_open+0x10>
   11502:	3301      	adds	r3, #1
   11504:	4a10      	ldr	r2, [pc, #64]	; (11548 <flash_area_open+0x54>)
   11506:	6812      	ldr	r2, [r2, #0]
   11508:	4293      	cmp	r3, r2
   1150a:	da08      	bge.n	1151e <flash_area_open+0x2a>
		if (flash_map[i].fa_id == idx) {
   1150c:	011a      	lsls	r2, r3, #4
   1150e:	490d      	ldr	r1, [pc, #52]	; (11544 <flash_area_open+0x50>)
   11510:	680c      	ldr	r4, [r1, #0]
   11512:	eb04 1603 	add.w	r6, r4, r3, lsl #4
   11516:	5ca2      	ldrb	r2, [r4, r2]
   11518:	4290      	cmp	r0, r2
   1151a:	d1f2      	bne.n	11502 <flash_area_open+0xe>
   1151c:	e000      	b.n	11520 <flash_area_open+0x2c>
			return &flash_map[i];
		}
	}

	return NULL;
   1151e:	2600      	movs	r6, #0
		return -EACCES;
	}

	area = get_flash_area_from_id(id);
	if (area == NULL) {
   11520:	b16e      	cbz	r6, 1153e <flash_area_open+0x4a>
		return -ENOENT;
	}

	if (!area->fa_dev || !device_is_ready(area->fa_dev)) {
   11522:	68f0      	ldr	r0, [r6, #12]
   11524:	b128      	cbz	r0, 11532 <flash_area_open+0x3e>
   11526:	f007 fd14 	bl	18f52 <z_device_is_ready>
   1152a:	b110      	cbz	r0, 11532 <flash_area_open+0x3e>
		return -ENODEV;
	}

	*fap = area;
   1152c:	602e      	str	r6, [r5, #0]

	return 0;
   1152e:	2000      	movs	r0, #0
}
   11530:	bd70      	pop	{r4, r5, r6, pc}
		return -ENODEV;
   11532:	f06f 0012 	mvn.w	r0, #18
   11536:	e7fb      	b.n	11530 <flash_area_open+0x3c>
		return -EACCES;
   11538:	f06f 000c 	mvn.w	r0, #12
}
   1153c:	4770      	bx	lr
		return -ENOENT;
   1153e:	f06f 0001 	mvn.w	r0, #1
   11542:	e7f5      	b.n	11530 <flash_area_open+0x3c>
   11544:	20000010 	.word	0x20000010
   11548:	00019bbc 	.word	0x00019bbc

0001154c <pm_system_resume>:
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}

void pm_system_resume(void)
{
   1154c:	b570      	push	{r4, r5, r6, lr}
	uint8_t id = CURRENT_CPU;
   1154e:	4b2a      	ldr	r3, [pc, #168]	; (115f8 <pm_system_resume+0xac>)
   11550:	7d1d      	ldrb	r5, [r3, #20]
 *
 * @return true if the bit was set, false if it wasn't.
 */
static inline bool atomic_test_and_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
   11552:	f005 031f 	and.w	r3, r5, #31
   11556:	2201      	movs	r2, #1
   11558:	409a      	lsls	r2, r3
	atomic_val_t old;

	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1155a:	0969      	lsrs	r1, r5, #5
   1155c:	4b27      	ldr	r3, [pc, #156]	; (115fc <pm_system_resume+0xb0>)
   1155e:	eb03 0381 	add.w	r3, r3, r1, lsl #2
   11562:	43d0      	mvns	r0, r2
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   11564:	f3bf 8f5b 	dmb	ish
   11568:	e853 1f00 	ldrex	r1, [r3]
   1156c:	ea01 0400 	and.w	r4, r1, r0
   11570:	e843 4600 	strex	r6, r4, [r3]
   11574:	2e00      	cmp	r6, #0
   11576:	d1f7      	bne.n	11568 <pm_system_resume+0x1c>
   11578:	f3bf 8f5b 	dmb	ish
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
   1157c:	420a      	tst	r2, r1
   1157e:	d100      	bne.n	11582 <pm_system_resume+0x36>
		pm_exit_pos_ops(&z_cpus_pm_state[id]);
		pm_state_notify(false);
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
			0, 0};
	}
}
   11580:	bd70      	pop	{r4, r5, r6, pc}
		pm_exit_pos_ops(&z_cpus_pm_state[id]);
   11582:	481f      	ldr	r0, [pc, #124]	; (11600 <pm_system_resume+0xb4>)
   11584:	eb05 0245 	add.w	r2, r5, r5, lsl #1
   11588:	0093      	lsls	r3, r2, #2
   1158a:	18c1      	adds	r1, r0, r3
	if (pm_state_exit_post_ops != NULL) {
   1158c:	4a1d      	ldr	r2, [pc, #116]	; (11604 <pm_system_resume+0xb8>)
   1158e:	b172      	cbz	r2, 115ae <pm_system_resume+0x62>
		pm_state_exit_post_ops(info->state, info->substate_id);
   11590:	7849      	ldrb	r1, [r1, #1]
   11592:	5cc0      	ldrb	r0, [r0, r3]
   11594:	f006 fb95 	bl	17cc2 <pm_state_exit_post_ops>
   11598:	f04f 0320 	mov.w	r3, #32
   1159c:	f3ef 8611 	mrs	r6, BASEPRI
   115a0:	f383 8812 	msr	BASEPRI_MAX, r3
   115a4:	f3bf 8f6f 	isb	sy
   115a8:	4b17      	ldr	r3, [pc, #92]	; (11608 <pm_system_resume+0xbc>)
   115aa:	681c      	ldr	r4, [r3, #0]
   115ac:	e010      	b.n	115d0 <pm_system_resume+0x84>
	__asm__ volatile(
   115ae:	2300      	movs	r3, #0
   115b0:	f383 8811 	msr	BASEPRI, r3
   115b4:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
   115b8:	e7ee      	b.n	11598 <pm_system_resume+0x4c>
			callback(z_cpus_pm_state[_current_cpu->id].state);
   115ba:	4b0f      	ldr	r3, [pc, #60]	; (115f8 <pm_system_resume+0xac>)
   115bc:	7d1b      	ldrb	r3, [r3, #20]
   115be:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   115c2:	0099      	lsls	r1, r3, #2
   115c4:	4b0e      	ldr	r3, [pc, #56]	; (11600 <pm_system_resume+0xb4>)
   115c6:	5c58      	ldrb	r0, [r3, r1]
   115c8:	4790      	blx	r2
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT(slist, snode)
   115ca:	b10c      	cbz	r4, 115d0 <pm_system_resume+0x84>
	return node->next;
   115cc:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
   115ce:	b124      	cbz	r4, 115da <pm_system_resume+0x8e>
   115d0:	b11c      	cbz	r4, 115da <pm_system_resume+0x8e>
			callback = notifier->state_exit;
   115d2:	68a2      	ldr	r2, [r4, #8]
		if (callback) {
   115d4:	2a00      	cmp	r2, #0
   115d6:	d1f0      	bne.n	115ba <pm_system_resume+0x6e>
   115d8:	e7f7      	b.n	115ca <pm_system_resume+0x7e>
	__asm__ volatile(
   115da:	f386 8811 	msr	BASEPRI, r6
   115de:	f3bf 8f6f 	isb	sy
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
   115e2:	4807      	ldr	r0, [pc, #28]	; (11600 <pm_system_resume+0xb4>)
   115e4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   115e8:	00aa      	lsls	r2, r5, #2
   115ea:	1881      	adds	r1, r0, r2
   115ec:	2300      	movs	r3, #0
   115ee:	5083      	str	r3, [r0, r2]
   115f0:	604b      	str	r3, [r1, #4]
   115f2:	608b      	str	r3, [r1, #8]
}
   115f4:	e7c4      	b.n	11580 <pm_system_resume+0x34>
   115f6:	bf00      	nop
   115f8:	20000ea8 	.word	0x20000ea8
   115fc:	200003e0 	.word	0x200003e0
   11600:	200003d4 	.word	0x200003d4
   11604:	00017cc3 	.word	0x00017cc3
   11608:	200003c0 	.word	0x200003c0

0001160c <pm_system_suspend>:

	return true;
}

bool pm_system_suspend(int32_t ticks)
{
   1160c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1160e:	4604      	mov	r4, r0
	uint8_t id = CURRENT_CPU;
   11610:	4b4d      	ldr	r3, [pc, #308]	; (11748 <pm_system_suspend+0x13c>)
   11612:	7d1d      	ldrb	r5, [r3, #20]
	__asm__ volatile(
   11614:	f04f 0320 	mov.w	r3, #32
   11618:	f3ef 8611 	mrs	r6, BASEPRI
   1161c:	f383 8812 	msr	BASEPRI_MAX, r3
   11620:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key;

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	key = k_spin_lock(&pm_forced_state_lock);
	if (z_cpus_pm_forced_state[id].state != PM_STATE_ACTIVE) {
   11624:	eb05 0245 	add.w	r2, r5, r5, lsl #1
   11628:	4b48      	ldr	r3, [pc, #288]	; (1174c <pm_system_suspend+0x140>)
   1162a:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
   1162e:	b34b      	cbz	r3, 11684 <pm_system_suspend+0x78>
		z_cpus_pm_state[id] = z_cpus_pm_forced_state[id];
   11630:	4b47      	ldr	r3, [pc, #284]	; (11750 <pm_system_suspend+0x144>)
   11632:	eb03 0c82 	add.w	ip, r3, r2, lsl #2
   11636:	4f45      	ldr	r7, [pc, #276]	; (1174c <pm_system_suspend+0x140>)
   11638:	ea4f 0e82 	mov.w	lr, r2, lsl #2
   1163c:	eb07 0382 	add.w	r3, r7, r2, lsl #2
   11640:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   11644:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
		z_cpus_pm_forced_state[id].state = PM_STATE_ACTIVE;
   11648:	2300      	movs	r3, #0
   1164a:	f807 300e 	strb.w	r3, [r7, lr]
	__asm__ volatile(
   1164e:	f386 8811 	msr	BASEPRI, r6
   11652:	f3bf 8f6f 	isb	sy
			z_cpus_pm_state[id] = *info;
		}
	}
	k_spin_unlock(&pm_forced_state_lock, key);

	if (z_cpus_pm_state[id].state == PM_STATE_ACTIVE) {
   11656:	eb05 0345 	add.w	r3, r5, r5, lsl #1
   1165a:	4a3d      	ldr	r2, [pc, #244]	; (11750 <pm_system_suspend+0x144>)
   1165c:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
   11660:	2b00      	cmp	r3, #0
   11662:	d06e      	beq.n	11742 <pm_system_suspend+0x136>
		SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);
		return false;
	}

	if (ticks != K_TICKS_FOREVER) {
   11664:	f1b4 3fff 	cmp.w	r4, #4294967295
   11668:	d11b      	bne.n	116a2 <pm_system_suspend+0x96>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
   1166a:	f004 f9ad 	bl	159c8 <k_sched_lock>
	__asm__ volatile(
   1166e:	f04f 0320 	mov.w	r3, #32
   11672:	f3ef 8611 	mrs	r6, BASEPRI
   11676:	f383 8812 	msr	BASEPRI_MAX, r3
   1167a:	f3bf 8f6f 	isb	sy
	return list->head;
   1167e:	4b35      	ldr	r3, [pc, #212]	; (11754 <pm_system_suspend+0x148>)
   11680:	681c      	ldr	r4, [r3, #0]
   11682:	e02e      	b.n	116e2 <pm_system_suspend+0xd6>
		info = pm_policy_next_state(id, ticks);
   11684:	4601      	mov	r1, r0
   11686:	4628      	mov	r0, r5
   11688:	f000 f86e 	bl	11768 <pm_policy_next_state>
		if (info != NULL) {
   1168c:	2800      	cmp	r0, #0
   1168e:	d0de      	beq.n	1164e <pm_system_suspend+0x42>
			z_cpus_pm_state[id] = *info;
   11690:	eb05 0345 	add.w	r3, r5, r5, lsl #1
   11694:	4a2e      	ldr	r2, [pc, #184]	; (11750 <pm_system_suspend+0x144>)
   11696:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   1169a:	c807      	ldmia	r0, {r0, r1, r2}
   1169c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
   116a0:	e7d5      	b.n	1164e <pm_system_suspend+0x42>
		     k_us_to_ticks_ceil32(
   116a2:	eb05 0345 	add.w	r3, r5, r5, lsl #1
   116a6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   116aa:	6898      	ldr	r0, [r3, #8]
		} else {
			return t * ((uint64_t)to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
   116ac:	0c41      	lsrs	r1, r0, #17
   116ae:	03c0      	lsls	r0, r0, #15
   116b0:	4b29      	ldr	r3, [pc, #164]	; (11758 <pm_system_suspend+0x14c>)
   116b2:	18c0      	adds	r0, r0, r3
   116b4:	4a29      	ldr	r2, [pc, #164]	; (1175c <pm_system_suspend+0x150>)
   116b6:	f04f 0300 	mov.w	r3, #0
   116ba:	f141 0100 	adc.w	r1, r1, #0
   116be:	f7fe fe1f 	bl	10300 <__aeabi_uldivmod>
		z_set_timeout_expiry(ticks -
   116c2:	2101      	movs	r1, #1
   116c4:	1a20      	subs	r0, r4, r0
   116c6:	f007 fe6a 	bl	1939e <z_set_timeout_expiry>
   116ca:	e7ce      	b.n	1166a <pm_system_suspend+0x5e>
			callback(z_cpus_pm_state[_current_cpu->id].state);
   116cc:	4b1e      	ldr	r3, [pc, #120]	; (11748 <pm_system_suspend+0x13c>)
   116ce:	7d1b      	ldrb	r3, [r3, #20]
   116d0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   116d4:	491e      	ldr	r1, [pc, #120]	; (11750 <pm_system_suspend+0x144>)
   116d6:	f811 0023 	ldrb.w	r0, [r1, r3, lsl #2]
   116da:	4790      	blx	r2
Z_GENLIST_PEEK_NEXT(slist, snode)
   116dc:	b10c      	cbz	r4, 116e2 <pm_system_suspend+0xd6>
	return node->next;
   116de:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
   116e0:	b124      	cbz	r4, 116ec <pm_system_suspend+0xe0>
   116e2:	b11c      	cbz	r4, 116ec <pm_system_suspend+0xe0>
			callback = notifier->state_entry;
   116e4:	6862      	ldr	r2, [r4, #4]
		if (callback) {
   116e6:	2a00      	cmp	r2, #0
   116e8:	d1f0      	bne.n	116cc <pm_system_suspend+0xc0>
   116ea:	e7f7      	b.n	116dc <pm_system_suspend+0xd0>
	__asm__ volatile(
   116ec:	f386 8811 	msr	BASEPRI, r6
   116f0:	f3bf 8f6f 	isb	sy
 * @param target Address of atomic variable or array.
 * @param bit Bit number (starting from 0).
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
   116f4:	f005 031f 	and.w	r3, r5, #31
   116f8:	2101      	movs	r1, #1
   116fa:	4099      	lsls	r1, r3

	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   116fc:	096b      	lsrs	r3, r5, #5
   116fe:	4a18      	ldr	r2, [pc, #96]	; (11760 <pm_system_suspend+0x154>)
   11700:	eb02 0383 	add.w	r3, r2, r3, lsl #2
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   11704:	f3bf 8f5b 	dmb	ish
   11708:	e853 2f00 	ldrex	r2, [r3]
   1170c:	430a      	orrs	r2, r1
   1170e:	e843 2000 	strex	r0, r2, [r3]
   11712:	2800      	cmp	r0, #0
   11714:	d1f8      	bne.n	11708 <pm_system_suspend+0xfc>
   11716:	f3bf 8f5b 	dmb	ish
	if (pm_state_set != NULL) {
   1171a:	4b12      	ldr	r3, [pc, #72]	; (11764 <pm_system_suspend+0x158>)
   1171c:	b15b      	cbz	r3, 11736 <pm_system_suspend+0x12a>
		pm_state_set(info->state, info->substate_id);
   1171e:	4a0c      	ldr	r2, [pc, #48]	; (11750 <pm_system_suspend+0x144>)
   11720:	eb05 0345 	add.w	r3, r5, r5, lsl #1
   11724:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   11728:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   1172c:	7859      	ldrb	r1, [r3, #1]
   1172e:	f812 0025 	ldrb.w	r0, [r2, r5, lsl #2]
   11732:	f006 faba 	bl	17caa <pm_state_set>
	if (atomic_add(&z_cpus_active, 1) == 0) {
		pm_resume_devices();
	}
#endif
	pm_stats_update(z_cpus_pm_state[id].state);
	pm_system_resume();
   11736:	f7ff ff09 	bl	1154c <pm_system_resume>
	k_sched_unlock();
   1173a:	f004 fb67 	bl	15e0c <k_sched_unlock>
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);

	return true;
   1173e:	2001      	movs	r0, #1
}
   11740:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return false;
   11742:	2000      	movs	r0, #0
   11744:	e7fc      	b.n	11740 <pm_system_suspend+0x134>
   11746:	bf00      	nop
   11748:	20000ea8 	.word	0x20000ea8
   1174c:	200003c8 	.word	0x200003c8
   11750:	200003d4 	.word	0x200003d4
   11754:	200003c0 	.word	0x200003c0
   11758:	000f423f 	.word	0x000f423f
   1175c:	000f4240 	.word	0x000f4240
   11760:	200003e0 	.word	0x200003e0
   11764:	00017cab 	.word	0x00017cab

00011768 <pm_policy_next_state>:
	}
}

#ifdef CONFIG_PM_POLICY_DEFAULT
const struct pm_state_info *pm_policy_next_state(uint8_t cpu, int32_t ticks)
{
   11768:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1176c:	b082      	sub	sp, #8
   1176e:	460e      	mov	r6, r1
	uint8_t num_cpu_states;
	const struct pm_state_info *cpu_states;

	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
   11770:	a901      	add	r1, sp, #4
   11772:	f000 f845 	bl	11800 <pm_state_cpu_get_all>

	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
   11776:	1e44      	subs	r4, r0, #1
   11778:	b224      	sxth	r4, r4
   1177a:	e007      	b.n	1178c <pm_policy_next_state+0x24>
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
		    (exit_latency >= max_latency_ticks)) {
			continue;
		}

		if ((ticks == K_TICKS_FOREVER) ||
   1177c:	f1b6 3fff 	cmp.w	r6, #4294967295
   11780:	d033      	beq.n	117ea <pm_policy_next_state+0x82>
		    (ticks >= (min_residency + exit_latency))) {
   11782:	4440      	add	r0, r8
		if ((ticks == K_TICKS_FOREVER) ||
   11784:	42b0      	cmp	r0, r6
   11786:	d930      	bls.n	117ea <pm_policy_next_state+0x82>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
   11788:	3c01      	subs	r4, #1
   1178a:	b224      	sxth	r4, r4
   1178c:	2c00      	cmp	r4, #0
   1178e:	db2b      	blt.n	117e8 <pm_policy_next_state+0x80>
		const struct pm_state_info *state = &cpu_states[i];
   11790:	9b01      	ldr	r3, [sp, #4]
   11792:	eb04 0244 	add.w	r2, r4, r4, lsl #1
   11796:	eb03 0582 	add.w	r5, r3, r2, lsl #2
		if (pm_policy_state_lock_is_active(state->state, state->substate_id)) {
   1179a:	7869      	ldrb	r1, [r5, #1]
   1179c:	f813 0022 	ldrb.w	r0, [r3, r2, lsl #2]
   117a0:	f006 f914 	bl	179cc <pm_policy_state_lock_is_active>
   117a4:	2800      	cmp	r0, #0
   117a6:	d1ef      	bne.n	11788 <pm_policy_next_state+0x20>
		min_residency = k_us_to_ticks_ceil32(state->min_residency_us);
   117a8:	6868      	ldr	r0, [r5, #4]
   117aa:	0c41      	lsrs	r1, r0, #17
   117ac:	03c0      	lsls	r0, r0, #15
   117ae:	4f11      	ldr	r7, [pc, #68]	; (117f4 <pm_policy_next_state+0x8c>)
   117b0:	19c0      	adds	r0, r0, r7
   117b2:	4a11      	ldr	r2, [pc, #68]	; (117f8 <pm_policy_next_state+0x90>)
   117b4:	f04f 0300 	mov.w	r3, #0
   117b8:	f141 0100 	adc.w	r1, r1, #0
   117bc:	f7fe fda0 	bl	10300 <__aeabi_uldivmod>
   117c0:	4680      	mov	r8, r0
		exit_latency = k_us_to_ticks_ceil32(state->exit_latency_us);
   117c2:	68ab      	ldr	r3, [r5, #8]
   117c4:	0c59      	lsrs	r1, r3, #17
   117c6:	03db      	lsls	r3, r3, #15
   117c8:	19d8      	adds	r0, r3, r7
   117ca:	4a0b      	ldr	r2, [pc, #44]	; (117f8 <pm_policy_next_state+0x90>)
   117cc:	f04f 0300 	mov.w	r3, #0
   117d0:	f141 0100 	adc.w	r1, r1, #0
   117d4:	f7fe fd94 	bl	10300 <__aeabi_uldivmod>
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
   117d8:	4b08      	ldr	r3, [pc, #32]	; (117fc <pm_policy_next_state+0x94>)
   117da:	681b      	ldr	r3, [r3, #0]
   117dc:	f1b3 3fff 	cmp.w	r3, #4294967295
   117e0:	d0cc      	beq.n	1177c <pm_policy_next_state+0x14>
   117e2:	4283      	cmp	r3, r0
   117e4:	d8ca      	bhi.n	1177c <pm_policy_next_state+0x14>
   117e6:	e7cf      	b.n	11788 <pm_policy_next_state+0x20>
			return state;
		}
	}

	return NULL;
   117e8:	2500      	movs	r5, #0
}
   117ea:	4628      	mov	r0, r5
   117ec:	b002      	add	sp, #8
   117ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   117f2:	bf00      	nop
   117f4:	000f423f 	.word	0x000f423f
   117f8:	000f4240 	.word	0x000f4240
   117fc:	2000000c 	.word	0x2000000c

00011800 <pm_state_cpu_get_all>:
	DT_FOREACH_CHILD(DT_PATH(cpus), NUM_CPU_STATES)
};

uint8_t pm_state_cpu_get_all(uint8_t cpu, const struct pm_state_info **states)
{
	if (cpu >= ARRAY_SIZE(cpus_states)) {
   11800:	b908      	cbnz	r0, 11806 <pm_state_cpu_get_all+0x6>
		return 0;
	}

	*states = cpus_states[cpu];
   11802:	4b02      	ldr	r3, [pc, #8]	; (1180c <pm_state_cpu_get_all+0xc>)
   11804:	600b      	str	r3, [r1, #0]

	return states_per_cpu[cpu];
}
   11806:	2000      	movs	r0, #0
   11808:	4770      	bx	lr
   1180a:	bf00      	nop
   1180c:	00019b4c 	.word	0x00019b4c

00011810 <nrf_cc3xx_platform_abort_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform abort APIs.
 */
void nrf_cc3xx_platform_abort_init(void)
{
   11810:	b508      	push	{r3, lr}
	nrf_cc3xx_platform_set_abort(&apis);
   11812:	4802      	ldr	r0, [pc, #8]	; (1181c <nrf_cc3xx_platform_abort_init+0xc>)
   11814:	f004 fe5e 	bl	164d4 <nrf_cc3xx_platform_set_abort>
}
   11818:	bd08      	pop	{r3, pc}
   1181a:	bf00      	nop
   1181c:	00019bc0 	.word	0x00019bc0

00011820 <mutex_unlock_platform>:
 */
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
   11820:	b1d0      	cbz	r0, 11858 <mutex_unlock_platform+0x38>
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
   11822:	b508      	push	{r3, lr}
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags)
   11824:	6842      	ldr	r2, [r0, #4]
   11826:	2a04      	cmp	r2, #4
   11828:	d005      	beq.n	11836 <mutex_unlock_platform+0x16>

#endif /* defined(NRF5340_XXAA_APPLICATION) */

    default:
        /* Ensure that the mutex has been initialized */
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
   1182a:	b1d2      	cbz	r2, 11862 <mutex_unlock_platform+0x42>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
        }

        p_mutex = (struct k_mutex *)mutex->mutex;
   1182c:	6800      	ldr	r0, [r0, #0]
		union { uintptr_t x; struct k_mutex * val; } parm0 = { .val = mutex };
		return (int) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_MUTEX_UNLOCK);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_unlock(mutex);
   1182e:	f003 ffc7 	bl	157c0 <z_impl_k_mutex_unlock>

        k_mutex_unlock(p_mutex);
        return NRF_CC3XX_PLATFORM_SUCCESS;
   11832:	2000      	movs	r0, #0
    }
}
   11834:	bd08      	pop	{r3, pc}
        return atomic_cas((atomic_t *)mutex->mutex, 1, 0) ?
   11836:	6803      	ldr	r3, [r0, #0]
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   11838:	2200      	movs	r2, #0
   1183a:	f3bf 8f5b 	dmb	ish
   1183e:	e853 1f00 	ldrex	r1, [r3]
   11842:	2901      	cmp	r1, #1
   11844:	d103      	bne.n	1184e <mutex_unlock_platform+0x2e>
   11846:	e843 2000 	strex	r0, r2, [r3]
   1184a:	2800      	cmp	r0, #0
   1184c:	d1f7      	bne.n	1183e <mutex_unlock_platform+0x1e>
   1184e:	f3bf 8f5b 	dmb	ish
                       NRF_CC3XX_PLATFORM_SUCCESS :
   11852:	d104      	bne.n	1185e <mutex_unlock_platform+0x3e>
   11854:	4610      	mov	r0, r2
   11856:	e7ed      	b.n	11834 <mutex_unlock_platform+0x14>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
   11858:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
}
   1185c:	4770      	bx	lr
                       NRF_CC3XX_PLATFORM_SUCCESS :
   1185e:	4802      	ldr	r0, [pc, #8]	; (11868 <mutex_unlock_platform+0x48>)
   11860:	e7e8      	b.n	11834 <mutex_unlock_platform+0x14>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
   11862:	4802      	ldr	r0, [pc, #8]	; (1186c <mutex_unlock_platform+0x4c>)
   11864:	e7e6      	b.n	11834 <mutex_unlock_platform+0x14>
   11866:	bf00      	nop
   11868:	ffff8fe9 	.word	0xffff8fe9
   1186c:	ffff8fea 	.word	0xffff8fea

00011870 <mutex_lock_platform>:
    if(mutex == NULL) {
   11870:	b320      	cbz	r0, 118bc <mutex_lock_platform+0x4c>
static int32_t mutex_lock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
   11872:	b508      	push	{r3, lr}
    switch (mutex->flags) {
   11874:	6842      	ldr	r2, [r0, #4]
   11876:	2a04      	cmp	r2, #4
   11878:	d002      	beq.n	11880 <mutex_lock_platform+0x10>
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
   1187a:	b992      	cbnz	r2, 118a2 <mutex_lock_platform+0x32>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
   1187c:	4811      	ldr	r0, [pc, #68]	; (118c4 <mutex_lock_platform+0x54>)
   1187e:	e00f      	b.n	118a0 <mutex_lock_platform+0x30>
        return atomic_cas((atomic_t *)mutex->mutex, 0, 1) ?
   11880:	6803      	ldr	r3, [r0, #0]
   11882:	2201      	movs	r2, #1
   11884:	f3bf 8f5b 	dmb	ish
   11888:	e853 1f00 	ldrex	r1, [r3]
   1188c:	2900      	cmp	r1, #0
   1188e:	d103      	bne.n	11898 <mutex_lock_platform+0x28>
   11890:	e843 2000 	strex	r0, r2, [r3]
   11894:	2800      	cmp	r0, #0
   11896:	d1f7      	bne.n	11888 <mutex_lock_platform+0x18>
   11898:	f3bf 8f5b 	dmb	ish
                       NRF_CC3XX_PLATFORM_SUCCESS :
   1189c:	d10c      	bne.n	118b8 <mutex_lock_platform+0x48>
   1189e:	2000      	movs	r0, #0
}
   118a0:	bd08      	pop	{r3, pc}
        p_mutex = (struct k_mutex *)mutex->mutex;
   118a2:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_lock(mutex, timeout);
   118a4:	f04f 32ff 	mov.w	r2, #4294967295
   118a8:	f04f 33ff 	mov.w	r3, #4294967295
   118ac:	f003 fefe 	bl	156ac <z_impl_k_mutex_lock>
        if (ret == 0) {
   118b0:	2800      	cmp	r0, #0
   118b2:	d0f5      	beq.n	118a0 <mutex_lock_platform+0x30>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_FAILED;
   118b4:	4804      	ldr	r0, [pc, #16]	; (118c8 <mutex_lock_platform+0x58>)
   118b6:	e7f3      	b.n	118a0 <mutex_lock_platform+0x30>
                       NRF_CC3XX_PLATFORM_SUCCESS :
   118b8:	4803      	ldr	r0, [pc, #12]	; (118c8 <mutex_lock_platform+0x58>)
   118ba:	e7f1      	b.n	118a0 <mutex_lock_platform+0x30>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
   118bc:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
}
   118c0:	4770      	bx	lr
   118c2:	bf00      	nop
   118c4:	ffff8fea 	.word	0xffff8fea
   118c8:	ffff8fe9 	.word	0xffff8fe9

000118cc <mutex_free_platform>:
static void mutex_free_platform(nrf_cc3xx_platform_mutex_t *mutex) {
   118cc:	b510      	push	{r4, lr}
    if (mutex == NULL) {
   118ce:	4604      	mov	r4, r0
   118d0:	b188      	cbz	r0, 118f6 <mutex_free_platform+0x2a>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
   118d2:	6863      	ldr	r3, [r4, #4]
   118d4:	2b04      	cmp	r3, #4
   118d6:	d00d      	beq.n	118f4 <mutex_free_platform+0x28>
   118d8:	2b08      	cmp	r3, #8
   118da:	d00b      	beq.n	118f4 <mutex_free_platform+0x28>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
   118dc:	b153      	cbz	r3, 118f4 <mutex_free_platform+0x28>
    if ((mutex->flags & NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED) != 0) {
   118de:	f013 0f02 	tst.w	r3, #2
   118e2:	d00d      	beq.n	11900 <mutex_free_platform+0x34>
        k_mem_slab_free(&mutex_slab, &mutex->mutex);
   118e4:	4621      	mov	r1, r4
   118e6:	4809      	ldr	r0, [pc, #36]	; (1190c <mutex_free_platform+0x40>)
   118e8:	f007 fb87 	bl	18ffa <k_mem_slab_free>
        mutex->mutex = NULL;
   118ec:	2300      	movs	r3, #0
   118ee:	6023      	str	r3, [r4, #0]
    mutex->flags = NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID;
   118f0:	2300      	movs	r3, #0
   118f2:	6063      	str	r3, [r4, #4]
}
   118f4:	bd10      	pop	{r4, pc}
        platform_abort_apis.abort_fn(
   118f6:	4b06      	ldr	r3, [pc, #24]	; (11910 <mutex_free_platform+0x44>)
   118f8:	685b      	ldr	r3, [r3, #4]
   118fa:	4806      	ldr	r0, [pc, #24]	; (11914 <mutex_free_platform+0x48>)
   118fc:	4798      	blx	r3
   118fe:	e7e8      	b.n	118d2 <mutex_free_platform+0x6>
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
   11900:	2214      	movs	r2, #20
   11902:	2100      	movs	r1, #0
   11904:	6820      	ldr	r0, [r4, #0]
   11906:	f006 f99b 	bl	17c40 <memset>
   1190a:	e7f1      	b.n	118f0 <mutex_free_platform+0x24>
   1190c:	200003e4 	.word	0x200003e4
   11910:	2000013c 	.word	0x2000013c
   11914:	00019bc8 	.word	0x00019bc8

00011918 <mutex_init_platform>:
static void mutex_init_platform(nrf_cc3xx_platform_mutex_t *mutex) {
   11918:	b510      	push	{r4, lr}
    if (mutex == NULL) {
   1191a:	4604      	mov	r4, r0
   1191c:	b178      	cbz	r0, 1193e <mutex_init_platform+0x26>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
   1191e:	6863      	ldr	r3, [r4, #4]
   11920:	2b04      	cmp	r3, #4
   11922:	d00b      	beq.n	1193c <mutex_init_platform+0x24>
   11924:	2b08      	cmp	r3, #8
   11926:	d009      	beq.n	1193c <mutex_init_platform+0x24>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID &&
   11928:	b90b      	cbnz	r3, 1192e <mutex_init_platform+0x16>
        mutex->mutex == NULL) {
   1192a:	6823      	ldr	r3, [r4, #0]
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID &&
   1192c:	b163      	cbz	r3, 11948 <mutex_init_platform+0x30>
    p_mutex = (struct k_mutex *)mutex->mutex;
   1192e:	6820      	ldr	r0, [r4, #0]
	return z_impl_k_mutex_init(mutex);
   11930:	f007 fbd2 	bl	190d8 <z_impl_k_mutex_init>
    mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_VALID;
   11934:	6863      	ldr	r3, [r4, #4]
   11936:	f043 0301 	orr.w	r3, r3, #1
   1193a:	6063      	str	r3, [r4, #4]
}
   1193c:	bd10      	pop	{r4, pc}
        platform_abort_apis.abort_fn(
   1193e:	4b0f      	ldr	r3, [pc, #60]	; (1197c <mutex_init_platform+0x64>)
   11940:	685b      	ldr	r3, [r3, #4]
   11942:	480f      	ldr	r0, [pc, #60]	; (11980 <mutex_init_platform+0x68>)
   11944:	4798      	blx	r3
   11946:	e7ea      	b.n	1191e <mutex_init_platform+0x6>
        ret = k_mem_slab_alloc(&mutex_slab, &mutex->mutex, K_FOREVER);
   11948:	f04f 32ff 	mov.w	r2, #4294967295
   1194c:	f04f 33ff 	mov.w	r3, #4294967295
   11950:	4621      	mov	r1, r4
   11952:	480c      	ldr	r0, [pc, #48]	; (11984 <mutex_init_platform+0x6c>)
   11954:	f003 fd7c 	bl	15450 <k_mem_slab_alloc>
        if(ret != 0 || mutex->mutex == NULL)
   11958:	b908      	cbnz	r0, 1195e <mutex_init_platform+0x46>
   1195a:	6823      	ldr	r3, [r4, #0]
   1195c:	b91b      	cbnz	r3, 11966 <mutex_init_platform+0x4e>
            platform_abort_apis.abort_fn(
   1195e:	4b07      	ldr	r3, [pc, #28]	; (1197c <mutex_init_platform+0x64>)
   11960:	685b      	ldr	r3, [r3, #4]
   11962:	4809      	ldr	r0, [pc, #36]	; (11988 <mutex_init_platform+0x70>)
   11964:	4798      	blx	r3
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
   11966:	2214      	movs	r2, #20
   11968:	2100      	movs	r1, #0
   1196a:	6820      	ldr	r0, [r4, #0]
   1196c:	f006 f968 	bl	17c40 <memset>
        mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED;
   11970:	6863      	ldr	r3, [r4, #4]
   11972:	f043 0302 	orr.w	r3, r3, #2
   11976:	6063      	str	r3, [r4, #4]
   11978:	e7d9      	b.n	1192e <mutex_init_platform+0x16>
   1197a:	bf00      	nop
   1197c:	2000013c 	.word	0x2000013c
   11980:	00019bc8 	.word	0x00019bc8
   11984:	200003e4 	.word	0x200003e4
   11988:	00019bf0 	.word	0x00019bf0

0001198c <nrf_cc3xx_platform_mutex_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform mutex APIs
 */
void nrf_cc3xx_platform_mutex_init(void)
{
   1198c:	b508      	push	{r3, lr}
    k_mem_slab_init(&mutex_slab,
   1198e:	2340      	movs	r3, #64	; 0x40
   11990:	2214      	movs	r2, #20
   11992:	4904      	ldr	r1, [pc, #16]	; (119a4 <nrf_cc3xx_platform_mutex_init+0x18>)
   11994:	4804      	ldr	r0, [pc, #16]	; (119a8 <nrf_cc3xx_platform_mutex_init+0x1c>)
   11996:	f007 fb22 	bl	18fde <k_mem_slab_init>
                mutex_slab_buffer,
                sizeof(struct k_mutex),
                NUM_MUTEXES);

    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
   1199a:	4904      	ldr	r1, [pc, #16]	; (119ac <nrf_cc3xx_platform_mutex_init+0x20>)
   1199c:	4804      	ldr	r0, [pc, #16]	; (119b0 <nrf_cc3xx_platform_mutex_init+0x24>)
   1199e:	f004 fdf9 	bl	16594 <nrf_cc3xx_platform_set_mutexes>
}
   119a2:	bd08      	pop	{r3, pc}
   119a4:	20000400 	.word	0x20000400
   119a8:	200003e4 	.word	0x200003e4
   119ac:	00019c30 	.word	0x00019c30
   119b0:	00019c20 	.word	0x00019c20

000119b4 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
   119b4:	4901      	ldr	r1, [pc, #4]	; (119bc <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
   119b6:	2210      	movs	r2, #16
	str	r2, [r1]
   119b8:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
   119ba:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
   119bc:	e000ed10 	.word	0xe000ed10

000119c0 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
   119c0:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
   119c2:	4040      	eors	r0, r0
	msr	BASEPRI, r0
   119c4:	f380 8811 	msr	BASEPRI, r0
	isb
   119c8:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
   119cc:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
   119d0:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
   119d2:	b662      	cpsie	i
	isb
   119d4:	f3bf 8f6f 	isb	sy

	bx	lr
   119d8:	4770      	bx	lr
   119da:	bf00      	nop

000119dc <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
   119dc:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
   119de:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
   119e0:	f381 8811 	msr	BASEPRI, r1

	wfe
   119e4:	bf20      	wfe

	msr	BASEPRI, r0
   119e6:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
   119ea:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
   119ec:	4770      	bx	lr
   119ee:	bf00      	nop

000119f0 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
   119f0:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
   119f2:	2800      	cmp	r0, #0
   119f4:	db07      	blt.n	11a06 <arch_irq_enable+0x16>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   119f6:	f000 021f 	and.w	r2, r0, #31
   119fa:	0940      	lsrs	r0, r0, #5
   119fc:	2301      	movs	r3, #1
   119fe:	4093      	lsls	r3, r2
   11a00:	4a01      	ldr	r2, [pc, #4]	; (11a08 <arch_irq_enable+0x18>)
   11a02:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
}
   11a06:	4770      	bx	lr
   11a08:	e000e100 	.word	0xe000e100

00011a0c <arch_irq_disable>:

void arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
   11a0c:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
   11a0e:	2800      	cmp	r0, #0
   11a10:	db0c      	blt.n	11a2c <arch_irq_disable+0x20>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   11a12:	f000 021f 	and.w	r2, r0, #31
   11a16:	0940      	lsrs	r0, r0, #5
   11a18:	2301      	movs	r3, #1
   11a1a:	4093      	lsls	r3, r2
   11a1c:	3020      	adds	r0, #32
   11a1e:	4a04      	ldr	r2, [pc, #16]	; (11a30 <arch_irq_disable+0x24>)
   11a20:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
   11a24:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   11a28:	f3bf 8f6f 	isb	sy
}
   11a2c:	4770      	bx	lr
   11a2e:	bf00      	nop
   11a30:	e000e100 	.word	0xe000e100

00011a34 <arch_irq_is_enabled>:

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
   11a34:	0942      	lsrs	r2, r0, #5
   11a36:	4b05      	ldr	r3, [pc, #20]	; (11a4c <arch_irq_is_enabled+0x18>)
   11a38:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   11a3c:	f000 001f 	and.w	r0, r0, #31
   11a40:	2301      	movs	r3, #1
   11a42:	fa03 f000 	lsl.w	r0, r3, r0
}
   11a46:	4010      	ands	r0, r2
   11a48:	4770      	bx	lr
   11a4a:	bf00      	nop
   11a4c:	e000e100 	.word	0xe000e100

00011a50 <z_arm_irq_priority_set>:
			prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
		} else {
			/* Use caller supplied prio level as-is */
		}
	} else {
		prio += _IRQ_PRIO_OFFSET;
   11a50:	3101      	adds	r1, #1
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
   11a52:	b240      	sxtb	r0, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
   11a54:	2800      	cmp	r0, #0
   11a56:	db08      	blt.n	11a6a <z_arm_irq_priority_set+0x1a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   11a58:	0149      	lsls	r1, r1, #5
   11a5a:	b2c9      	uxtb	r1, r1
   11a5c:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
   11a60:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
   11a64:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
   11a68:	4770      	bx	lr
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   11a6a:	f000 000f 	and.w	r0, r0, #15
   11a6e:	0149      	lsls	r1, r1, #5
   11a70:	b2c9      	uxtb	r1, r1
   11a72:	4b01      	ldr	r3, [pc, #4]	; (11a78 <z_arm_irq_priority_set+0x28>)
   11a74:	5419      	strb	r1, [r3, r0]
}
   11a76:	4770      	bx	lr
   11a78:	e000ed14 	.word	0xe000ed14

00011a7c <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
   11a7c:	bf30      	wfi
    b z_SysNmiOnReset
   11a7e:	f7ff bffd 	b.w	11a7c <z_SysNmiOnReset>
   11a82:	bf00      	nop

00011a84 <z_arm_prep_c>:
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
   11a84:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   11a86:	4b0b      	ldr	r3, [pc, #44]	; (11ab4 <z_arm_prep_c+0x30>)
   11a88:	4a0b      	ldr	r2, [pc, #44]	; (11ab8 <z_arm_prep_c+0x34>)
   11a8a:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   11a8e:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
   11a90:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   11a94:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
   11a98:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
   11a9c:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
   11aa0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
   11aa4:	f003 fc1e 	bl	152e4 <z_bss_zero>
	z_data_copy();
   11aa8:	f004 fb2c 	bl	16104 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
   11aac:	f000 fa14 	bl	11ed8 <z_arm_interrupt_init>
	z_cstart();
   11ab0:	f003 fc76 	bl	153a0 <z_cstart>
   11ab4:	e000ed00 	.word	0xe000ed00
   11ab8:	00010200 	.word	0x00010200

00011abc <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
   11abc:	4a0a      	ldr	r2, [pc, #40]	; (11ae8 <arch_swap+0x2c>)
   11abe:	6893      	ldr	r3, [r2, #8]
   11ac0:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
	_current->arch.swap_return_value = _k_neg_eagain;
   11ac4:	4909      	ldr	r1, [pc, #36]	; (11aec <arch_swap+0x30>)
   11ac6:	6809      	ldr	r1, [r1, #0]
   11ac8:	f8c3 10ac 	str.w	r1, [r3, #172]	; 0xac

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   11acc:	4908      	ldr	r1, [pc, #32]	; (11af0 <arch_swap+0x34>)
   11ace:	684b      	ldr	r3, [r1, #4]
   11ad0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   11ad4:	604b      	str	r3, [r1, #4]
   11ad6:	2300      	movs	r3, #0
   11ad8:	f383 8811 	msr	BASEPRI, r3
   11adc:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
   11ae0:	6893      	ldr	r3, [r2, #8]
}
   11ae2:	f8d3 00ac 	ldr.w	r0, [r3, #172]	; 0xac
   11ae6:	4770      	bx	lr
   11ae8:	20000ea8 	.word	0x20000ea8
   11aec:	00019eb8 	.word	0x00019eb8
   11af0:	e000ed00 	.word	0xe000ed00

00011af4 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
   11af4:	4913      	ldr	r1, [pc, #76]	; (11b44 <z_arm_pendsv+0x50>)
    ldr r2, [r1, #_kernel_offset_to_current]
   11af6:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
   11af8:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
   11afc:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
   11afe:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
   11b02:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   11b06:	2020      	movs	r0, #32
    msr BASEPRI_MAX, r0
   11b08:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
   11b0c:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
   11b10:	4f0d      	ldr	r7, [pc, #52]	; (11b48 <z_arm_pendsv+0x54>)
    ldr v3, =_SCS_ICSR_UNPENDSV
   11b12:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
   11b16:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
   11b18:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
   11b1a:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
   11b1c:	f8d2 00a8 	ldr.w	r0, [r2, #168]	; 0xa8
    movs r3, #0
   11b20:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
   11b22:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
   11b26:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
   11b2a:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
   11b2c:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
   11b2e:	f000 fa83 	bl	12038 <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
   11b32:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
   11b36:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
   11b3a:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
   11b3e:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
   11b42:	4770      	bx	lr
    ldr r1, =_kernel
   11b44:	20000ea8 	.word	0x20000ea8
    ldr v4, =_SCS_ICSR
   11b48:	e000ed04 	.word	0xe000ed04

00011b4c <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
   11b4c:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
   11b50:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
   11b52:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
   11b56:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
   11b5a:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
   11b5c:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
   11b60:	2902      	cmp	r1, #2
    beq _oops
   11b62:	d0ff      	beq.n	11b64 <_oops>

00011b64 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
   11b64:	b501      	push	{r0, lr}
    push {r1, r2}
    push {r4-r11}
    mov  r1, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    bl z_do_kernel_oops
   11b66:	f005 ff3b 	bl	179e0 <z_do_kernel_oops>
     * the MSP to its value prior to entering the function
     */
    add sp, #40
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    pop {r0, pc}
   11b6a:	bd01      	pop	{r0, pc}

00011b6c <arch_new_thread>:
 * of the ESF.
 */
void arch_new_thread(struct k_thread *thread, k_thread_stack_t *stack,
		     char *stack_ptr, k_thread_entry_t entry,
		     void *p1, void *p2, void *p3)
{
   11b6c:	b410      	push	{r4}
		thread->stack_info.size -= FP_GUARD_EXTRA_SIZE;
	}
#endif /* FP_GUARD_EXTRA_SIZE */
#endif /* CONFIG_MPU_STACK_GUARD */

	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
   11b6e:	f1a2 0420 	sub.w	r4, r2, #32
		iframe->pc = (uint32_t)arch_user_mode_enter;
	} else {
		iframe->pc = (uint32_t)z_thread_entry;
	}
#else
	iframe->pc = (uint32_t)z_thread_entry;
   11b72:	490e      	ldr	r1, [pc, #56]	; (11bac <arch_new_thread+0x40>)
   11b74:	f842 1c08 	str.w	r1, [r2, #-8]
#endif

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
   11b78:	f021 0101 	bic.w	r1, r1, #1
   11b7c:	f842 1c08 	str.w	r1, [r2, #-8]
#endif
	iframe->a1 = (uint32_t)entry;
   11b80:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
   11b84:	9b01      	ldr	r3, [sp, #4]
   11b86:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->a3 = (uint32_t)p2;
   11b8a:	9b02      	ldr	r3, [sp, #8]
   11b8c:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
   11b90:	9b03      	ldr	r3, [sp, #12]
   11b92:	f842 3c14 	str.w	r3, [r2, #-20]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
   11b96:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   11b9a:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe = (struct __basic_sf *)
		((uintptr_t)iframe - sizeof(struct __fpu_sf));
	memset(iframe, 0, sizeof(struct __fpu_sf));
#endif

	thread->callee_saved.psp = (uint32_t)iframe;
   11b9e:	6504      	str	r4, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
   11ba0:	2300      	movs	r3, #0
   11ba2:	f8c0 30a8 	str.w	r3, [r0, #168]	; 0xa8
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
   11ba6:	bc10      	pop	{r4}
   11ba8:	4770      	bx	lr
   11baa:	bf00      	nop
   11bac:	0001749d 	.word	0x0001749d

00011bb0 <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
   11bb0:	4b12      	ldr	r3, [pc, #72]	; (11bfc <z_check_thread_stack_fail+0x4c>)
   11bb2:	689a      	ldr	r2, [r3, #8]

	if (thread == NULL) {
   11bb4:	b302      	cbz	r2, 11bf8 <z_check_thread_stack_fail+0x48>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
   11bb6:	f110 0f16 	cmn.w	r0, #22
   11bba:	d011      	beq.n	11be0 <z_check_thread_stack_fail+0x30>
   11bbc:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
   11bc0:	f1a3 0c40 	sub.w	ip, r3, #64	; 0x40
   11bc4:	4584      	cmp	ip, r0
   11bc6:	d805      	bhi.n	11bd4 <z_check_thread_stack_fail+0x24>
   11bc8:	4283      	cmp	r3, r0
   11bca:	d905      	bls.n	11bd8 <z_check_thread_stack_fail+0x28>
   11bcc:	428b      	cmp	r3, r1
   11bce:	d805      	bhi.n	11bdc <z_check_thread_stack_fail+0x2c>
   11bd0:	2100      	movs	r1, #0
   11bd2:	e00b      	b.n	11bec <z_check_thread_stack_fail+0x3c>
   11bd4:	2100      	movs	r1, #0
   11bd6:	e009      	b.n	11bec <z_check_thread_stack_fail+0x3c>
   11bd8:	2100      	movs	r1, #0
   11bda:	e007      	b.n	11bec <z_check_thread_stack_fail+0x3c>
   11bdc:	2101      	movs	r1, #1
   11bde:	e005      	b.n	11bec <z_check_thread_stack_fail+0x3c>
   11be0:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
   11be4:	428b      	cmp	r3, r1
   11be6:	bf94      	ite	ls
   11be8:	2100      	movls	r1, #0
   11bea:	2101      	movhi	r1, #1
   11bec:	b909      	cbnz	r1, 11bf2 <z_check_thread_stack_fail+0x42>
		return (uint32_t)Z_THREAD_STACK_BUFFER(z_main_stack);
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
   11bee:	2000      	movs	r0, #0
}
   11bf0:	4770      	bx	lr
		return thread->stack_info.start;
   11bf2:	f8d2 0098 	ldr.w	r0, [r2, #152]	; 0x98
   11bf6:	4770      	bx	lr
		return 0;
   11bf8:	2000      	movs	r0, #0
   11bfa:	4770      	bx	lr
   11bfc:	20000ea8 	.word	0x20000ea8

00011c00 <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
   11c00:	b508      	push	{r3, lr}
   11c02:	460d      	mov	r5, r1
   11c04:	4614      	mov	r4, r2
	z_arm_prepare_switch_to_main();

	_current = main_thread;
   11c06:	4b08      	ldr	r3, [pc, #32]	; (11c28 <arch_switch_to_main_thread+0x28>)
   11c08:	6098      	str	r0, [r3, #8]
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
   11c0a:	f000 fa15 	bl	12038 <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
   11c0e:	4620      	mov	r0, r4
   11c10:	f385 8809 	msr	PSP, r5
   11c14:	2100      	movs	r1, #0
   11c16:	b663      	cpsie	if
   11c18:	f381 8811 	msr	BASEPRI, r1
   11c1c:	f3bf 8f6f 	isb	sy
   11c20:	2200      	movs	r2, #0
   11c22:	2300      	movs	r3, #0
   11c24:	f005 fc3a 	bl	1749c <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
   11c28:	20000ea8 	.word	0x20000ea8

00011c2c <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
   11c2c:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
   11c2e:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
   11c30:	4a0b      	ldr	r2, [pc, #44]	; (11c60 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
   11c32:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
   11c34:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
   11c36:	bf1e      	ittt	ne
	movne	r1, #0
   11c38:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
   11c3a:	6191      	strne	r1, [r2, #24]
		blne	z_pm_save_idle_exit
   11c3c:	f007 fa30 	blne	190a0 <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
   11c40:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
   11c42:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
   11c46:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
   11c4a:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
   11c4e:	4905      	ldr	r1, [pc, #20]	; (11c64 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
   11c50:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
   11c52:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
   11c54:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
   11c56:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
   11c5a:	4903      	ldr	r1, [pc, #12]	; (11c68 <_isr_wrapper+0x3c>)
	bx r1
   11c5c:	4708      	bx	r1
   11c5e:	0000      	.short	0x0000
	ldr r2, =_kernel
   11c60:	20000ea8 	.word	0x20000ea8
	ldr r1, =_sw_isr_table
   11c64:	0001966c 	.word	0x0001966c
	ldr r1, =z_arm_int_exit
   11c68:	00011c6d 	.word	0x00011c6d

00011c6c <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
   11c6c:	4b04      	ldr	r3, [pc, #16]	; (11c80 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
   11c6e:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
   11c70:	69d8      	ldr	r0, [r3, #28]
	cmp r0, r1
   11c72:	4288      	cmp	r0, r1
	beq _EXIT_EXC
   11c74:	d003      	beq.n	11c7e <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
   11c76:	4903      	ldr	r1, [pc, #12]	; (11c84 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
   11c78:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
   11c7c:	600a      	str	r2, [r1, #0]

00011c7e <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
   11c7e:	4770      	bx	lr
	ldr r3, =_kernel
   11c80:	20000ea8 	.word	0x20000ea8
	ldr r1, =_SCS_ICSR
   11c84:	e000ed04 	.word	0xe000ed04

00011c88 <bus_fault>:
 *
 * @return error code to identify the fatal error reason.
 *
 */
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
{
   11c88:	b510      	push	{r4, lr}
   11c8a:	4614      	mov	r4, r2
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
   11c8c:	4b12      	ldr	r3, [pc, #72]	; (11cd8 <bus_fault+0x50>)
   11c8e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error");
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
   11c90:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
   11c92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   11c94:	f413 7f00 	tst.w	r3, #512	; 0x200
   11c98:	d00b      	beq.n	11cb2 <bus_fault+0x2a>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
   11c9a:	4b0f      	ldr	r3, [pc, #60]	; (11cd8 <bus_fault+0x50>)
   11c9c:	6b9a      	ldr	r2, [r3, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
   11c9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   11ca0:	f413 4f00 	tst.w	r3, #32768	; 0x8000
   11ca4:	d005      	beq.n	11cb2 <bus_fault+0x2a>
			PR_EXC("  BFAR Address: 0x%x", bfar);
			if (from_hard_fault != 0) {
   11ca6:	b121      	cbz	r1, 11cb2 <bus_fault+0x2a>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
   11ca8:	4a0b      	ldr	r2, [pc, #44]	; (11cd8 <bus_fault+0x50>)
   11caa:	6a93      	ldr	r3, [r2, #40]	; 0x28
   11cac:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
   11cb0:	6293      	str	r3, [r2, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
   11cb2:	4b09      	ldr	r3, [pc, #36]	; (11cd8 <bus_fault+0x50>)
   11cb4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Imprecise data bus error");
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
   11cb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   11cb8:	f413 7f80 	tst.w	r3, #256	; 0x100
   11cbc:	d101      	bne.n	11cc2 <bus_fault+0x3a>
		PR_FAULT_INFO("  Instruction bus error");
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
   11cbe:	4b06      	ldr	r3, [pc, #24]	; (11cd8 <bus_fault+0x50>)
   11cc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
   11cc2:	4a05      	ldr	r2, [pc, #20]	; (11cd8 <bus_fault+0x50>)
   11cc4:	6a93      	ldr	r3, [r2, #40]	; 0x28
   11cc6:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
   11cca:	6293      	str	r3, [r2, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf, true);
   11ccc:	2101      	movs	r1, #1
   11cce:	f005 fe99 	bl	17a04 <memory_fault_recoverable>
   11cd2:	7020      	strb	r0, [r4, #0]

	return reason;
}
   11cd4:	2000      	movs	r0, #0
   11cd6:	bd10      	pop	{r4, pc}
   11cd8:	e000ed00 	.word	0xe000ed00

00011cdc <usage_fault>:
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
   11cdc:	4b07      	ldr	r3, [pc, #28]	; (11cfc <usage_fault+0x20>)
   11cde:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Division by zero");
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
   11ce0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
   11ce2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  No coprocessor instructions");
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
   11ce4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
   11ce6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Illegal use of the EPSR");
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
   11ce8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   11cea:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   11cec:	ea6f 4202 	mvn.w	r2, r2, lsl #16
   11cf0:	ea6f 4212 	mvn.w	r2, r2, lsr #16
   11cf4:	629a      	str	r2, [r3, #40]	; 0x28

	return reason;
}
   11cf6:	2000      	movs	r0, #0
   11cf8:	4770      	bx	lr
   11cfa:	bf00      	nop
   11cfc:	e000ed00 	.word	0xe000ed00

00011d00 <mem_manage_fault>:
{
   11d00:	b570      	push	{r4, r5, r6, lr}
   11d02:	4605      	mov	r5, r0
   11d04:	4616      	mov	r6, r2
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
   11d06:	4b25      	ldr	r3, [pc, #148]	; (11d9c <mem_manage_fault+0x9c>)
   11d08:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
   11d0a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
   11d0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   11d0e:	f013 0f02 	tst.w	r3, #2
   11d12:	d00c      	beq.n	11d2e <mem_manage_fault+0x2e>
		uint32_t temp = SCB->MMFAR;
   11d14:	4b21      	ldr	r3, [pc, #132]	; (11d9c <mem_manage_fault+0x9c>)
   11d16:	6b58      	ldr	r0, [r3, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
   11d18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   11d1a:	f013 0f80 	tst.w	r3, #128	; 0x80
   11d1e:	d02f      	beq.n	11d80 <mem_manage_fault+0x80>
			if (from_hard_fault != 0) {
   11d20:	b139      	cbz	r1, 11d32 <mem_manage_fault+0x32>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
   11d22:	4a1e      	ldr	r2, [pc, #120]	; (11d9c <mem_manage_fault+0x9c>)
   11d24:	6a93      	ldr	r3, [r2, #40]	; 0x28
   11d26:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   11d2a:	6293      	str	r3, [r2, #40]	; 0x28
   11d2c:	e001      	b.n	11d32 <mem_manage_fault+0x32>
	uint32_t mmfar = -EINVAL;
   11d2e:	f06f 0015 	mvn.w	r0, #21
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
   11d32:	4b1a      	ldr	r3, [pc, #104]	; (11d9c <mem_manage_fault+0x9c>)
   11d34:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
   11d36:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
   11d38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   11d3a:	f013 0f10 	tst.w	r3, #16
   11d3e:	d104      	bne.n	11d4a <mem_manage_fault+0x4a>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
   11d40:	4b16      	ldr	r3, [pc, #88]	; (11d9c <mem_manage_fault+0x9c>)
   11d42:	6a9c      	ldr	r4, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
   11d44:	f014 0402 	ands.w	r4, r4, #2
   11d48:	d004      	beq.n	11d54 <mem_manage_fault+0x54>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
   11d4a:	4b14      	ldr	r3, [pc, #80]	; (11d9c <mem_manage_fault+0x9c>)
   11d4c:	685c      	ldr	r4, [r3, #4]
   11d4e:	f414 6400 	ands.w	r4, r4, #2048	; 0x800
   11d52:	d118      	bne.n	11d86 <mem_manage_fault+0x86>
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
   11d54:	4b11      	ldr	r3, [pc, #68]	; (11d9c <mem_manage_fault+0x9c>)
   11d56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   11d58:	f013 0f20 	tst.w	r3, #32
   11d5c:	d004      	beq.n	11d68 <mem_manage_fault+0x68>
		SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTPENDED_Msk;
   11d5e:	4a0f      	ldr	r2, [pc, #60]	; (11d9c <mem_manage_fault+0x9c>)
   11d60:	6a53      	ldr	r3, [r2, #36]	; 0x24
   11d62:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
   11d66:	6253      	str	r3, [r2, #36]	; 0x24
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
   11d68:	4a0c      	ldr	r2, [pc, #48]	; (11d9c <mem_manage_fault+0x9c>)
   11d6a:	6a93      	ldr	r3, [r2, #40]	; 0x28
   11d6c:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
   11d70:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
   11d72:	2101      	movs	r1, #1
   11d74:	4628      	mov	r0, r5
   11d76:	f005 fe45 	bl	17a04 <memory_fault_recoverable>
   11d7a:	7030      	strb	r0, [r6, #0]
}
   11d7c:	4620      	mov	r0, r4
   11d7e:	bd70      	pop	{r4, r5, r6, pc}
	uint32_t mmfar = -EINVAL;
   11d80:	f06f 0015 	mvn.w	r0, #21
   11d84:	e7d5      	b.n	11d32 <mem_manage_fault+0x32>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
   11d86:	4629      	mov	r1, r5
   11d88:	f7ff ff12 	bl	11bb0 <z_check_thread_stack_fail>
			if (min_stack_ptr) {
   11d8c:	4604      	mov	r4, r0
   11d8e:	2800      	cmp	r0, #0
   11d90:	d0e0      	beq.n	11d54 <mem_manage_fault+0x54>
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
   11d92:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
   11d96:	2402      	movs	r4, #2
   11d98:	e7dc      	b.n	11d54 <mem_manage_fault+0x54>
   11d9a:	bf00      	nop
   11d9c:	e000ed00 	.word	0xe000ed00

00011da0 <hard_fault>:
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t hard_fault(z_arch_esf_t *esf, bool *recoverable)
{
   11da0:	b508      	push	{r3, lr}
   11da2:	4684      	mov	ip, r0
		reason = esf->basic.r0;
	}

	*recoverable = memory_fault_recoverable(esf, true);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	*recoverable = false;
   11da4:	2300      	movs	r3, #0
   11da6:	700b      	strb	r3, [r1, #0]

	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   11da8:	4b1c      	ldr	r3, [pc, #112]	; (11e1c <hard_fault+0x7c>)
   11daa:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
   11dac:	f010 0002 	ands.w	r0, r0, #2
   11db0:	d131      	bne.n	11e16 <hard_fault+0x76>
		PR_EXC("  Bus fault on vector table read");
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
   11db2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   11db4:	2b00      	cmp	r3, #0
   11db6:	db2f      	blt.n	11e18 <hard_fault+0x78>
		PR_EXC("  Debug event");
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
   11db8:	4b18      	ldr	r3, [pc, #96]	; (11e1c <hard_fault+0x7c>)
   11dba:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
   11dbc:	f010 4080 	ands.w	r0, r0, #1073741824	; 0x40000000
   11dc0:	d02a      	beq.n	11e18 <hard_fault+0x78>
	uint16_t *ret_addr = (uint16_t *)esf->basic.pc;
   11dc2:	f8dc 3018 	ldr.w	r3, [ip, #24]
	uint16_t fault_insn = *(ret_addr - 1);
   11dc6:	f833 2c02 	ldrh.w	r2, [r3, #-2]
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
   11dca:	f64d 7302 	movw	r3, #57090	; 0xdf02
   11dce:	429a      	cmp	r2, r3
   11dd0:	d012      	beq.n	11df8 <hard_fault+0x58>
		PR_EXC("  Fault escalation (see below)");
		if (z_arm_is_synchronous_svc(esf)) {
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
			reason = esf->basic.r0;
		} else if ((SCB->CFSR & SCB_CFSR_MEMFAULTSR_Msk) != 0) {
   11dd2:	4b12      	ldr	r3, [pc, #72]	; (11e1c <hard_fault+0x7c>)
   11dd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   11dd6:	f013 0fff 	tst.w	r3, #255	; 0xff
   11dda:	d110      	bne.n	11dfe <hard_fault+0x5e>
			reason = mem_manage_fault(esf, 1, recoverable);
		} else if ((SCB->CFSR & SCB_CFSR_BUSFAULTSR_Msk) != 0) {
   11ddc:	4b0f      	ldr	r3, [pc, #60]	; (11e1c <hard_fault+0x7c>)
   11dde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   11de0:	f413 4f7f 	tst.w	r3, #65280	; 0xff00
   11de4:	d111      	bne.n	11e0a <hard_fault+0x6a>
			reason = bus_fault(esf, 1, recoverable);
		} else if ((SCB->CFSR & SCB_CFSR_USGFAULTSR_Msk) != 0) {
   11de6:	4b0d      	ldr	r3, [pc, #52]	; (11e1c <hard_fault+0x7c>)
   11de8:	6a98      	ldr	r0, [r3, #40]	; 0x28
   11dea:	0c00      	lsrs	r0, r0, #16
   11dec:	0400      	lsls	r0, r0, #16
   11dee:	b198      	cbz	r0, 11e18 <hard_fault+0x78>
			reason = usage_fault(esf);
   11df0:	4660      	mov	r0, ip
   11df2:	f7ff ff73 	bl	11cdc <usage_fault>
   11df6:	e00f      	b.n	11e18 <hard_fault+0x78>
			reason = esf->basic.r0;
   11df8:	f8dc 0000 	ldr.w	r0, [ip]
   11dfc:	e00c      	b.n	11e18 <hard_fault+0x78>
			reason = mem_manage_fault(esf, 1, recoverable);
   11dfe:	460a      	mov	r2, r1
   11e00:	2101      	movs	r1, #1
   11e02:	4660      	mov	r0, ip
   11e04:	f7ff ff7c 	bl	11d00 <mem_manage_fault>
   11e08:	e006      	b.n	11e18 <hard_fault+0x78>
			reason = bus_fault(esf, 1, recoverable);
   11e0a:	460a      	mov	r2, r1
   11e0c:	2101      	movs	r1, #1
   11e0e:	4660      	mov	r0, ip
   11e10:	f7ff ff3a 	bl	11c88 <bus_fault>
   11e14:	e000      	b.n	11e18 <hard_fault+0x78>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   11e16:	2000      	movs	r0, #0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	return reason;
}
   11e18:	bd08      	pop	{r3, pc}
   11e1a:	bf00      	nop
   11e1c:	e000ed00 	.word	0xe000ed00

00011e20 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
   11e20:	b570      	push	{r4, r5, r6, lr}
   11e22:	b08a      	sub	sp, #40	; 0x28
   11e24:	460c      	mov	r4, r1
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   11e26:	4b22      	ldr	r3, [pc, #136]	; (11eb0 <z_arm_fault+0x90>)
   11e28:	6859      	ldr	r1, [r3, #4]
   11e2a:	f3c1 0108 	ubfx	r1, r1, #0, #9
   11e2e:	2300      	movs	r3, #0
   11e30:	f383 8811 	msr	BASEPRI, r3
   11e34:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
   11e38:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
   11e3c:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
   11e40:	d115      	bne.n	11e6e <z_arm_fault+0x4e>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
   11e42:	f002 030c 	and.w	r3, r2, #12
   11e46:	2b08      	cmp	r3, #8
   11e48:	d014      	beq.n	11e74 <z_arm_fault+0x54>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
   11e4a:	f012 0f08 	tst.w	r2, #8
   11e4e:	d00b      	beq.n	11e68 <z_arm_fault+0x48>
	*nested_exc = false;
   11e50:	2600      	movs	r6, #0

#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
   11e52:	f10d 0227 	add.w	r2, sp, #39	; 0x27
   11e56:	4620      	mov	r0, r4
   11e58:	f005 fdd9 	bl	17a0e <fault_handle>
   11e5c:	4605      	mov	r5, r0
	if (recoverable) {
   11e5e:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
   11e62:	b153      	cbz	r3, 11e7a <z_arm_fault+0x5a>
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
	}

	z_arm_fatal_error(reason, &esf_copy);
}
   11e64:	b00a      	add	sp, #40	; 0x28
   11e66:	bd70      	pop	{r4, r5, r6, pc}
			ptr_esf = (z_arch_esf_t *)msp;
   11e68:	4604      	mov	r4, r0
			*nested_exc = true;
   11e6a:	2601      	movs	r6, #1
   11e6c:	e7f1      	b.n	11e52 <z_arm_fault+0x32>
	*nested_exc = false;
   11e6e:	2600      	movs	r6, #0
		return NULL;
   11e70:	4634      	mov	r4, r6
   11e72:	e7ee      	b.n	11e52 <z_arm_fault+0x32>
	*nested_exc = false;
   11e74:	2600      	movs	r6, #0
		return NULL;
   11e76:	4634      	mov	r4, r6
   11e78:	e7eb      	b.n	11e52 <z_arm_fault+0x32>
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
   11e7a:	2220      	movs	r2, #32
   11e7c:	4621      	mov	r1, r4
   11e7e:	a801      	add	r0, sp, #4
   11e80:	f005 feaf 	bl	17be2 <memcpy>
	if (nested_exc) {
   11e84:	b14e      	cbz	r6, 11e9a <z_arm_fault+0x7a>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
   11e86:	9b08      	ldr	r3, [sp, #32]
   11e88:	f3c3 0208 	ubfx	r2, r3, #0, #9
   11e8c:	b95a      	cbnz	r2, 11ea6 <z_arm_fault+0x86>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
   11e8e:	ea6f 2353 	mvn.w	r3, r3, lsr #9
   11e92:	ea6f 2343 	mvn.w	r3, r3, lsl #9
   11e96:	9308      	str	r3, [sp, #32]
   11e98:	e005      	b.n	11ea6 <z_arm_fault+0x86>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   11e9a:	9b08      	ldr	r3, [sp, #32]
   11e9c:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
   11ea0:	f023 0301 	bic.w	r3, r3, #1
   11ea4:	9308      	str	r3, [sp, #32]
	z_arm_fatal_error(reason, &esf_copy);
   11ea6:	a901      	add	r1, sp, #4
   11ea8:	4628      	mov	r0, r5
   11eaa:	f005 fd95 	bl	179d8 <z_arm_fatal_error>
   11eae:	e7d9      	b.n	11e64 <z_arm_fault+0x44>
   11eb0:	e000ed00 	.word	0xe000ed00

00011eb4 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
   11eb4:	4a02      	ldr	r2, [pc, #8]	; (11ec0 <z_arm_fault_init+0xc>)
   11eb6:	6953      	ldr	r3, [r2, #20]
   11eb8:	f043 0310 	orr.w	r3, r3, #16
   11ebc:	6153      	str	r3, [r2, #20]
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
   11ebe:	4770      	bx	lr
   11ec0:	e000ed00 	.word	0xe000ed00

00011ec4 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
   11ec4:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
   11ec8:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
   11ecc:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
   11ece:	4672      	mov	r2, lr
	bl z_arm_fault
   11ed0:	f7ff ffa6 	bl	11e20 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
   11ed4:	bd01      	pop	{r0, pc}
   11ed6:	bf00      	nop

00011ed8 <z_arm_interrupt_init>:
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
   11ed8:	2200      	movs	r2, #0

	for (; irq < CONFIG_NUM_IRQS; irq++) {
   11eda:	e006      	b.n	11eea <z_arm_interrupt_init+0x12>
   11edc:	f002 010f 	and.w	r1, r2, #15
   11ee0:	4b09      	ldr	r3, [pc, #36]	; (11f08 <z_arm_interrupt_init+0x30>)
   11ee2:	440b      	add	r3, r1
   11ee4:	2120      	movs	r1, #32
   11ee6:	7619      	strb	r1, [r3, #24]
   11ee8:	3201      	adds	r2, #1
   11eea:	2a2f      	cmp	r2, #47	; 0x2f
   11eec:	dc0a      	bgt.n	11f04 <z_arm_interrupt_init+0x2c>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
   11eee:	b253      	sxtb	r3, r2
  if ((int32_t)(IRQn) >= 0)
   11ef0:	2b00      	cmp	r3, #0
   11ef2:	dbf3      	blt.n	11edc <z_arm_interrupt_init+0x4>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   11ef4:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
   11ef8:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
   11efc:	2120      	movs	r1, #32
   11efe:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
   11f02:	e7f1      	b.n	11ee8 <z_arm_interrupt_init+0x10>
	}
}
   11f04:	4770      	bx	lr
   11f06:	bf00      	nop
   11f08:	e000ecfc 	.word	0xe000ecfc

00011f0c <__start>:
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_DEBUG_THREAD_INFO)
    /* Clear z_sys_post_kernel flag for RTOS aware debuggers */
    movs.n r0, #0
   11f0c:	2000      	movs	r0, #0
    ldr r1, =z_sys_post_kernel
   11f0e:	4913      	ldr	r1, [pc, #76]	; (11f5c <__start+0x50>)
    strb r0, [r1]
   11f10:	7008      	strb	r0, [r1, #0]
#endif /* CONFIG_DEBUG_THREAD_INFO */

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
   11f12:	2000      	movs	r0, #0
    msr CONTROL, r0
   11f14:	f380 8814 	msr	CONTROL, r0
    isb
   11f18:	f3bf 8f6f 	isb	sy
#if defined(CONFIG_PM_S2RAM)
    bl arch_pm_s2ram_resume
#endif /* CONFIG_PM_S2RAM */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
   11f1c:	f7ff fae8 	bl	114f0 <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
   11f20:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
   11f22:	490f      	ldr	r1, [pc, #60]	; (11f60 <__start+0x54>)
    str r0, [r1]
   11f24:	6008      	str	r0, [r1, #0]
    dsb
   11f26:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
   11f2a:	480e      	ldr	r0, [pc, #56]	; (11f64 <__start+0x58>)
    msr msp, r0
   11f2c:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
   11f30:	f000 f830 	bl	11f94 <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   11f34:	2020      	movs	r0, #32
    msr BASEPRI, r0
   11f36:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
   11f3a:	480b      	ldr	r0, [pc, #44]	; (11f68 <__start+0x5c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
   11f3c:	f44f 6104 	mov.w	r1, #2112	; 0x840
    adds r0, r0, r1
   11f40:	1840      	adds	r0, r0, r1
    msr PSP, r0
   11f42:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
   11f46:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
   11f4a:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
   11f4c:	4308      	orrs	r0, r1
    msr CONTROL, r0
   11f4e:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
   11f52:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
   11f56:	f7ff fd95 	bl	11a84 <z_arm_prep_c>
   11f5a:	0000      	.short	0x0000
    ldr r1, =z_sys_post_kernel
   11f5c:	200010c3 	.word	0x200010c3
    ldr r1, =_SCS_MPU_CTRL
   11f60:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
   11f64:	20001900 	.word	0x20001900
    ldr r0, =z_interrupt_stacks
   11f68:	20001ac0 	.word	0x20001ac0

00011f6c <z_arm_clear_arm_mpu_config>:
void z_arm_clear_arm_mpu_config(void)
{
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
   11f6c:	4b08      	ldr	r3, [pc, #32]	; (11f90 <z_arm_clear_arm_mpu_config+0x24>)
   11f6e:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
	int num_regions =
   11f72:	f3c0 2007 	ubfx	r0, r0, #8, #8

	for (i = 0; i < num_regions; i++) {
   11f76:	2300      	movs	r3, #0
   11f78:	e006      	b.n	11f88 <z_arm_clear_arm_mpu_config+0x1c>
/** Clear and disable the given MPU region.
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
   11f7a:	4a05      	ldr	r2, [pc, #20]	; (11f90 <z_arm_clear_arm_mpu_config+0x24>)
   11f7c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
  MPU->RASR = 0U;
   11f80:	2100      	movs	r1, #0
   11f82:	f8c2 10a0 	str.w	r1, [r2, #160]	; 0xa0
   11f86:	3301      	adds	r3, #1
   11f88:	4283      	cmp	r3, r0
   11f8a:	dbf6      	blt.n	11f7a <z_arm_clear_arm_mpu_config+0xe>
		ARM_MPU_ClrRegion(i);
	}
}
   11f8c:	4770      	bx	lr
   11f8e:	bf00      	nop
   11f90:	e000ed00 	.word	0xe000ed00

00011f94 <z_arm_init_arch_hw_at_boot>:
 * This routine resets Cortex-M system control block
 * components and core registers.
 *
 */
void z_arm_init_arch_hw_at_boot(void)
{
   11f94:	b510      	push	{r4, lr}
  __ASM volatile ("cpsid i" : : : "memory");
   11f96:	b672      	cpsid	i
  \details Assigns the given value to the Fault Mask register.
  \param [in]    faultMask  Fault Mask value to set
 */
__STATIC_FORCEINLINE void __set_FAULTMASK(uint32_t faultMask)
{
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
   11f98:	2400      	movs	r4, #0
   11f9a:	f384 8813 	msr	FAULTMASK, r4

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
   11f9e:	f7ff ffe5 	bl	11f6c <z_arm_clear_arm_mpu_config>
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
   11fa2:	4623      	mov	r3, r4
   11fa4:	e008      	b.n	11fb8 <z_arm_init_arch_hw_at_boot+0x24>
		NVIC->ICER[i] = 0xFFFFFFFF;
   11fa6:	f103 0120 	add.w	r1, r3, #32
   11faa:	4a0e      	ldr	r2, [pc, #56]	; (11fe4 <z_arm_init_arch_hw_at_boot+0x50>)
   11fac:	f04f 30ff 	mov.w	r0, #4294967295
   11fb0:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
   11fb4:	3301      	adds	r3, #1
   11fb6:	b2db      	uxtb	r3, r3
   11fb8:	2b07      	cmp	r3, #7
   11fba:	d9f4      	bls.n	11fa6 <z_arm_init_arch_hw_at_boot+0x12>
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
   11fbc:	2300      	movs	r3, #0
   11fbe:	e008      	b.n	11fd2 <z_arm_init_arch_hw_at_boot+0x3e>
		NVIC->ICPR[i] = 0xFFFFFFFF;
   11fc0:	f103 0160 	add.w	r1, r3, #96	; 0x60
   11fc4:	4a07      	ldr	r2, [pc, #28]	; (11fe4 <z_arm_init_arch_hw_at_boot+0x50>)
   11fc6:	f04f 30ff 	mov.w	r0, #4294967295
   11fca:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
   11fce:	3301      	adds	r3, #1
   11fd0:	b2db      	uxtb	r3, r3
   11fd2:	2b07      	cmp	r3, #7
   11fd4:	d9f4      	bls.n	11fc0 <z_arm_init_arch_hw_at_boot+0x2c>
  __ASM volatile ("cpsie i" : : : "memory");
   11fd6:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
   11fd8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   11fdc:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
   11fe0:	bd10      	pop	{r4, pc}
   11fe2:	bf00      	nop
   11fe4:	e000e100 	.word	0xe000e100

00011fe8 <z_impl_k_thread_abort>:
#include <kswap.h>
#include <zephyr/wait_q.h>
#include <zephyr/sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
   11fe8:	b508      	push	{r3, lr}
	if (_current == thread) {
   11fea:	4b0a      	ldr	r3, [pc, #40]	; (12014 <z_impl_k_thread_abort+0x2c>)
   11fec:	689b      	ldr	r3, [r3, #8]
   11fee:	4283      	cmp	r3, r0
   11ff0:	d002      	beq.n	11ff8 <z_impl_k_thread_abort+0x10>
			 */
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
		}
	}

	z_thread_abort(thread);
   11ff2:	f004 f84f 	bl	16094 <z_thread_abort>
}
   11ff6:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   11ff8:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
   11ffc:	2b00      	cmp	r3, #0
   11ffe:	d0f8      	beq.n	11ff2 <z_impl_k_thread_abort+0xa>
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   12000:	4b05      	ldr	r3, [pc, #20]	; (12018 <z_impl_k_thread_abort+0x30>)
   12002:	685a      	ldr	r2, [r3, #4]
   12004:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
   12008:	605a      	str	r2, [r3, #4]
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
   1200a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   1200c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
   12010:	625a      	str	r2, [r3, #36]	; 0x24
   12012:	e7ee      	b.n	11ff2 <z_impl_k_thread_abort+0xa>
   12014:	20000ea8 	.word	0x20000ea8
   12018:	e000ed00 	.word	0xe000ed00

0001201c <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
   1201c:	b508      	push	{r3, lr}
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
   1201e:	4b03      	ldr	r3, [pc, #12]	; (1202c <z_arm_configure_static_mpu_regions+0x10>)
   12020:	4a03      	ldr	r2, [pc, #12]	; (12030 <z_arm_configure_static_mpu_regions+0x14>)
   12022:	2101      	movs	r1, #1
   12024:	4803      	ldr	r0, [pc, #12]	; (12034 <z_arm_configure_static_mpu_regions+0x18>)
   12026:	f005 fd78 	bl	17b1a <arm_core_mpu_configure_static_mpu_regions>
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
   1202a:	bd08      	pop	{r3, pc}
   1202c:	20040000 	.word	0x20040000
   12030:	20000000 	.word	0x20000000
   12034:	00019c44 	.word	0x00019c44

00012038 <z_arm_configure_dynamic_mpu_regions>:
 *
 * This function is not inherently thread-safe, but the memory domain
 * spinlock needs to be held anyway.
 */
void z_arm_configure_dynamic_mpu_regions(struct k_thread *thread)
{
   12038:	b508      	push	{r3, lr}
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
   1203a:	f8d0 3098 	ldr.w	r3, [r0, #152]	; 0x98
   1203e:	3b40      	subs	r3, #64	; 0x40
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
   12040:	4804      	ldr	r0, [pc, #16]	; (12054 <z_arm_configure_dynamic_mpu_regions+0x1c>)
   12042:	6003      	str	r3, [r0, #0]
	dynamic_regions[region_num].size = guard_size;
   12044:	2340      	movs	r3, #64	; 0x40
   12046:	6043      	str	r3, [r0, #4]
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
   12048:	4b03      	ldr	r3, [pc, #12]	; (12058 <z_arm_configure_dynamic_mpu_regions+0x20>)
   1204a:	6083      	str	r3, [r0, #8]

	/* Configure the dynamic MPU regions */
#ifdef CONFIG_AARCH32_ARMV8_R
	arm_core_mpu_disable();
#endif
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
   1204c:	2101      	movs	r1, #1
   1204e:	f005 fd68 	bl	17b22 <arm_core_mpu_configure_dynamic_mpu_regions>
						   region_num);
#ifdef CONFIG_AARCH32_ARMV8_R
	arm_core_mpu_enable();
#endif
}
   12052:	bd08      	pop	{r3, pc}
   12054:	20000900 	.word	0x20000900
   12058:	150b0000 	.word	0x150b0000

0001205c <region_init>:
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
   1205c:	4a08      	ldr	r2, [pc, #32]	; (12080 <region_init+0x24>)
   1205e:	f8c2 0098 	str.w	r0, [r2, #152]	; 0x98

	set_region_base_address(region_conf->base & MPU_RBAR_ADDR_Msk);
	set_region_attributes(region_conf->attr.rasr);
	set_region_size(region_conf->size | MPU_RASR_ENABLE_Msk);
#else
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   12062:	680b      	ldr	r3, [r1, #0]
   12064:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
   12068:	4303      	orrs	r3, r0
   1206a:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   1206e:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
   12072:	688b      	ldr	r3, [r1, #8]
   12074:	f043 0301 	orr.w	r3, r3, #1
   12078:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
	LOG_DBG("[%d] 0x%08x 0x%08x",
		index, region_conf->base, region_conf->attr.rasr);
#endif
}
   1207c:	4770      	bx	lr
   1207e:	bf00      	nop
   12080:	e000ed00 	.word	0xe000ed00

00012084 <mpu_configure_static_mpu_regions>:
 */
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
   12084:	b510      	push	{r4, lr}
	int mpu_reg_index = static_regions_num;
   12086:	4c03      	ldr	r4, [pc, #12]	; (12094 <mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
   12088:	2301      	movs	r3, #1
   1208a:	7822      	ldrb	r2, [r4, #0]
   1208c:	f005 fd1d 	bl	17aca <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
   12090:	7020      	strb	r0, [r4, #0]

	return mpu_reg_index;
}
   12092:	bd10      	pop	{r4, pc}
   12094:	200010bc 	.word	0x200010bc

00012098 <mpu_configure_dynamic_mpu_regions>:
 * If the dynamic MPU regions configuration has not been successfully
 * performed, the error signal is propagated to the caller of the function.
 */
static int mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	dynamic_regions[], uint8_t regions_num)
{
   12098:	b508      	push	{r3, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
   1209a:	2300      	movs	r3, #0
   1209c:	4a09      	ldr	r2, [pc, #36]	; (120c4 <mpu_configure_dynamic_mpu_regions+0x2c>)
   1209e:	7812      	ldrb	r2, [r2, #0]
   120a0:	f005 fd13 	bl	17aca <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
   120a4:	f110 0f16 	cmn.w	r0, #22
   120a8:	d00a      	beq.n	120c0 <mpu_configure_dynamic_mpu_regions+0x28>

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
   120aa:	4603      	mov	r3, r0
   120ac:	e006      	b.n	120bc <mpu_configure_dynamic_mpu_regions+0x24>
  MPU->RNR = rnr;
   120ae:	4a06      	ldr	r2, [pc, #24]	; (120c8 <mpu_configure_dynamic_mpu_regions+0x30>)
   120b0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
  MPU->RASR = 0U;
   120b4:	2100      	movs	r1, #0
   120b6:	f8c2 10a0 	str.w	r1, [r2, #160]	; 0xa0
   120ba:	3301      	adds	r3, #1
   120bc:	2b07      	cmp	r3, #7
   120be:	ddf6      	ble.n	120ae <mpu_configure_dynamic_mpu_regions+0x16>
			ARM_MPU_ClrRegion(i);
		}
	}

	return mpu_reg_index;
}
   120c0:	bd08      	pop	{r3, pc}
   120c2:	bf00      	nop
   120c4:	200010bc 	.word	0x200010bc
   120c8:	e000ed00 	.word	0xe000ed00

000120cc <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
   120cc:	4b04      	ldr	r3, [pc, #16]	; (120e0 <arm_core_mpu_enable+0x14>)
   120ce:	2205      	movs	r2, #5
   120d0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
   120d4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   120d8:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
   120dc:	4770      	bx	lr
   120de:	bf00      	nop
   120e0:	e000ed00 	.word	0xe000ed00

000120e4 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
   120e4:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
   120e8:	4b02      	ldr	r3, [pc, #8]	; (120f4 <arm_core_mpu_disable+0x10>)
   120ea:	2200      	movs	r2, #0
   120ec:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
   120f0:	4770      	bx	lr
   120f2:	bf00      	nop
   120f4:	e000ed00 	.word	0xe000ed00

000120f8 <z_arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
int z_arm_mpu_init(void)
{
   120f8:	b538      	push	{r3, r4, r5, lr}
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
   120fa:	4b0e      	ldr	r3, [pc, #56]	; (12134 <z_arm_mpu_init+0x3c>)
   120fc:	681d      	ldr	r5, [r3, #0]
   120fe:	2d08      	cmp	r5, #8
   12100:	d815      	bhi.n	1212e <z_arm_mpu_init+0x36>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
   12102:	f7ff ffef 	bl	120e4 <arm_core_mpu_disable>

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   12106:	2400      	movs	r4, #0
   12108:	e009      	b.n	1211e <z_arm_mpu_init+0x26>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
   1210a:	4b0a      	ldr	r3, [pc, #40]	; (12134 <z_arm_mpu_init+0x3c>)
   1210c:	6859      	ldr	r1, [r3, #4]
   1210e:	eb04 0244 	add.w	r2, r4, r4, lsl #1
   12112:	0093      	lsls	r3, r2, #2
   12114:	4419      	add	r1, r3
   12116:	4620      	mov	r0, r4
   12118:	f7ff ffa0 	bl	1205c <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   1211c:	3401      	adds	r4, #1
   1211e:	42a5      	cmp	r5, r4
   12120:	d8f3      	bhi.n	1210a <z_arm_mpu_init+0x12>
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
   12122:	4b05      	ldr	r3, [pc, #20]	; (12138 <z_arm_mpu_init+0x40>)
   12124:	701d      	strb	r5, [r3, #0]


	arm_core_mpu_enable();
   12126:	f7ff ffd1 	bl	120cc <arm_core_mpu_enable>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
   1212a:	2000      	movs	r0, #0
}
   1212c:	bd38      	pop	{r3, r4, r5, pc}
		return -1;
   1212e:	f04f 30ff 	mov.w	r0, #4294967295
   12132:	e7fb      	b.n	1212c <z_arm_mpu_init+0x34>
   12134:	00019c60 	.word	0x00019c60
   12138:	200010bc 	.word	0x200010bc

0001213c <__stdout_hook_install>:

static int (*_stdout_hook)(int c) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int c))
{
	_stdout_hook = hook;
   1213c:	4b01      	ldr	r3, [pc, #4]	; (12144 <__stdout_hook_install+0x8>)
   1213e:	6018      	str	r0, [r3, #0]
}
   12140:	4770      	bx	lr
   12142:	bf00      	nop
   12144:	20000034 	.word	0x20000034

00012148 <z_impl_zephyr_fputc>:

int z_impl_zephyr_fputc(int c, FILE *stream)
{
	return (stream == stdout || stream == stderr) ? _stdout_hook(c) : EOF;
   12148:	3902      	subs	r1, #2
   1214a:	2901      	cmp	r1, #1
   1214c:	d804      	bhi.n	12158 <z_impl_zephyr_fputc+0x10>
{
   1214e:	b508      	push	{r3, lr}
	return (stream == stdout || stream == stderr) ? _stdout_hook(c) : EOF;
   12150:	4b03      	ldr	r3, [pc, #12]	; (12160 <z_impl_zephyr_fputc+0x18>)
   12152:	681b      	ldr	r3, [r3, #0]
   12154:	4798      	blx	r3
}
   12156:	bd08      	pop	{r3, pc}
	return (stream == stdout || stream == stderr) ? _stdout_hook(c) : EOF;
   12158:	f04f 30ff 	mov.w	r0, #4294967295
}
   1215c:	4770      	bx	lr
   1215e:	bf00      	nop
   12160:	20000034 	.word	0x20000034

00012164 <printf>:

	return r;
}

int printf(const char *ZRESTRICT format, ...)
{
   12164:	b40f      	push	{r0, r1, r2, r3}
   12166:	b500      	push	{lr}
   12168:	b085      	sub	sp, #20
   1216a:	ab06      	add	r3, sp, #24
   1216c:	f853 2b04 	ldr.w	r2, [r3], #4
	va_list vargs;
	int     r;

	va_start(vargs, format);
   12170:	9303      	str	r3, [sp, #12]
   12172:	2100      	movs	r1, #0
   12174:	9100      	str	r1, [sp, #0]
   12176:	2102      	movs	r1, #2
   12178:	4803      	ldr	r0, [pc, #12]	; (12188 <printf+0x24>)
   1217a:	f7fe febd 	bl	10ef8 <z_cbvprintf_impl>
	r = cbvprintf(fputc, DESC(stdout), format, vargs);
	va_end(vargs);

	return r;
}
   1217e:	b005      	add	sp, #20
   12180:	f85d eb04 	ldr.w	lr, [sp], #4
   12184:	b004      	add	sp, #16
   12186:	4770      	bx	lr
   12188:	00017c83 	.word	0x00017c83

0001218c <nordicsemi_nrf52_init>:
	nrf_power_gpregret_set(NRF_POWER, (uint8_t)type);
	NVIC_SystemReset();
}

static int nordicsemi_nrf52_init(const struct device *arg)
{
   1218c:	b510      	push	{r4, lr}
	__asm__ volatile(
   1218e:	f04f 0320 	mov.w	r3, #32
   12192:	f3ef 8411 	mrs	r4, BASEPRI
   12196:	f383 8812 	msr	BASEPRI_MAX, r3
   1219a:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
   1219e:	2301      	movs	r3, #1
   121a0:	4a0c      	ldr	r2, [pc, #48]	; (121d4 <nordicsemi_nrf52_init+0x48>)
   121a2:	f8c2 3540 	str.w	r3, [r2, #1344]	; 0x540
#endif

#if NRF_POWER_HAS_DCDCEN
NRF_STATIC_INLINE void nrf_power_dcdcen_set(NRF_POWER_Type * p_reg, bool enable)
{
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
   121a6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   121aa:	f8c2 3578 	str.w	r3, [r2, #1400]	; 0x578
#endif // defined(POWER_RAM_POWER_S0POWER_Msk)

#if NRF_POWER_HAS_DCDCEN_VDDH
NRF_STATIC_INLINE void nrf_power_dcdcen_vddh_set(NRF_POWER_Type * p_reg, bool enable)
{
    if (enable && nrf52_errata_197())
   121ae:	f005 fd6c 	bl	17c8a <nrf52_errata_197>
   121b2:	b120      	cbz	r0, 121be <nordicsemi_nrf52_init+0x32>
    {
        // Workaround for anomaly 197 "POWER: DCDC of REG0 not functional".
        *(volatile uint32_t *)0x40000638ul = 1ul;
   121b4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   121b8:	2201      	movs	r2, #1
   121ba:	f8c3 2638 	str.w	r2, [r3, #1592]	; 0x638
    }
    p_reg->DCDCEN0 = (enable ? POWER_DCDCEN0_DCDCEN_Enabled : POWER_DCDCEN0_DCDCEN_Disabled) <<
   121be:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   121c2:	2201      	movs	r2, #1
   121c4:	f8c3 2580 	str.w	r2, [r3, #1408]	; 0x580
	__asm__ volatile(
   121c8:	f384 8811 	msr	BASEPRI, r4
   121cc:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
   121d0:	2000      	movs	r0, #0
   121d2:	bd10      	pop	{r4, pc}
   121d4:	4001e000 	.word	0x4001e000

000121d8 <sys_arch_reboot>:
    *p_gpregret = val;
   121d8:	b2c0      	uxtb	r0, r0
   121da:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   121de:	f8c2 051c 	str.w	r0, [r2, #1308]	; 0x51c
  __ASM volatile ("dsb 0xF":::"memory");
   121e2:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   121e6:	4905      	ldr	r1, [pc, #20]	; (121fc <sys_arch_reboot+0x24>)
   121e8:	68ca      	ldr	r2, [r1, #12]
   121ea:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   121ee:	4b04      	ldr	r3, [pc, #16]	; (12200 <sys_arch_reboot+0x28>)
   121f0:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   121f2:	60cb      	str	r3, [r1, #12]
   121f4:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
   121f8:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   121fa:	e7fd      	b.n	121f8 <sys_arch_reboot+0x20>
   121fc:	e000ed00 	.word	0xe000ed00
   12200:	05fa0004 	.word	0x05fa0004

00012204 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
   12204:	b130      	cbz	r0, 12214 <arch_busy_wait+0x10>

void arch_busy_wait(uint32_t time_us)
{
   12206:	b508      	push	{r3, lr}
    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
   12208:	0180      	lsls	r0, r0, #6
   1220a:	4b03      	ldr	r3, [pc, #12]	; (12218 <arch_busy_wait+0x14>)
   1220c:	f043 0301 	orr.w	r3, r3, #1
   12210:	4798      	blx	r3
	nrfx_coredep_delay_us(time_us);
}
   12212:	bd08      	pop	{r3, pc}
   12214:	4770      	bx	lr
   12216:	bf00      	nop
   12218:	00019870 	.word	0x00019870

0001221c <get_hf_flags>:
static uint32_t *get_hf_flags(void)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;

	return &data->subsys[CLOCK_CONTROL_NRF_TYPE_HFCLK].flags;
}
   1221c:	4800      	ldr	r0, [pc, #0]	; (12220 <get_hf_flags+0x4>)
   1221e:	4770      	bx	lr
   12220:	2000095c 	.word	0x2000095c

00012224 <get_subsys>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
   12224:	4b03      	ldr	r3, [pc, #12]	; (12234 <get_subsys+0x10>)
   12226:	1ac0      	subs	r0, r0, r3
   12228:	1080      	asrs	r0, r0, #2

	return (clock_control_subsys_t)offset;
}
   1222a:	4b03      	ldr	r3, [pc, #12]	; (12238 <get_subsys+0x14>)
   1222c:	fb03 f000 	mul.w	r0, r3, r0
   12230:	4770      	bx	lr
   12232:	bf00      	nop
   12234:	2000091c 	.word	0x2000091c
   12238:	b6db6db7 	.word	0xb6db6db7

0001223c <onoff_stop>:

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   1223c:	b538      	push	{r3, r4, r5, lr}
   1223e:	4605      	mov	r5, r0
   12240:	460c      	mov	r4, r1
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   12242:	f7ff ffef 	bl	12224 <get_subsys>
   12246:	4601      	mov	r1, r0
   12248:	2240      	movs	r2, #64	; 0x40
   1224a:	4803      	ldr	r0, [pc, #12]	; (12258 <onoff_stop+0x1c>)
   1224c:	f005 fdbc 	bl	17dc8 <stop>
   12250:	4601      	mov	r1, r0
	notify(mgr, res);
   12252:	4628      	mov	r0, r5
   12254:	47a0      	blx	r4
}
   12256:	bd38      	pop	{r3, r4, r5, pc}
   12258:	000195c4 	.word	0x000195c4

0001225c <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   1225c:	b530      	push	{r4, r5, lr}
   1225e:	b083      	sub	sp, #12
   12260:	4605      	mov	r5, r0
   12262:	460c      	mov	r4, r1
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   12264:	f7ff ffde 	bl	12224 <get_subsys>
   12268:	4601      	mov	r1, r0
   1226a:	2340      	movs	r3, #64	; 0x40
   1226c:	9300      	str	r3, [sp, #0]
   1226e:	4623      	mov	r3, r4
   12270:	4a05      	ldr	r2, [pc, #20]	; (12288 <onoff_start+0x2c>)
   12272:	4806      	ldr	r0, [pc, #24]	; (1228c <onoff_start+0x30>)
   12274:	f005 fdc2 	bl	17dfc <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
   12278:	1e01      	subs	r1, r0, #0
   1227a:	db01      	blt.n	12280 <onoff_start+0x24>
		notify(mgr, err);
	}
}
   1227c:	b003      	add	sp, #12
   1227e:	bd30      	pop	{r4, r5, pc}
		notify(mgr, err);
   12280:	4628      	mov	r0, r5
   12282:	47a0      	blx	r4
}
   12284:	e7fa      	b.n	1227c <onoff_start+0x20>
   12286:	bf00      	nop
   12288:	00017e45 	.word	0x00017e45
   1228c:	000195c4 	.word	0x000195c4

00012290 <clock_event_handler>:
		__ASSERT_NO_MSG(false);
	}
}

static void clock_event_handler(nrfx_clock_evt_type_t event)
{
   12290:	b508      	push	{r3, lr}
	const struct device *dev = CLOCK_DEVICE;

	switch (event) {
   12292:	b110      	cbz	r0, 1229a <clock_event_handler+0xa>
   12294:	2801      	cmp	r0, #1
   12296:	d00d      	beq.n	122b4 <clock_event_handler+0x24>
		break;
	default:
		__ASSERT_NO_MSG(0);
		break;
	}
}
   12298:	bd08      	pop	{r3, pc}
				get_sub_data(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
   1229a:	2100      	movs	r1, #0
   1229c:	4808      	ldr	r0, [pc, #32]	; (122c0 <clock_event_handler+0x30>)
   1229e:	f005 fd1e 	bl	17cde <get_sub_data>
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
   122a2:	6883      	ldr	r3, [r0, #8]
   122a4:	f013 0f07 	tst.w	r3, #7
   122a8:	d1f6      	bne.n	12298 <clock_event_handler+0x8>
			clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
   122aa:	2100      	movs	r1, #0
   122ac:	4804      	ldr	r0, [pc, #16]	; (122c0 <clock_event_handler+0x30>)
   122ae:	f005 fd79 	bl	17da4 <clkstarted_handle>
   122b2:	e7f1      	b.n	12298 <clock_event_handler+0x8>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
   122b4:	2101      	movs	r1, #1
   122b6:	4802      	ldr	r0, [pc, #8]	; (122c0 <clock_event_handler+0x30>)
   122b8:	f005 fd74 	bl	17da4 <clkstarted_handle>
}
   122bc:	e7ec      	b.n	12298 <clock_event_handler+0x8>
   122be:	bf00      	nop
   122c0:	000195c4 	.word	0x000195c4

000122c4 <generic_hfclk_start>:
{
   122c4:	b510      	push	{r4, lr}
	__asm__ volatile(
   122c6:	f04f 0320 	mov.w	r3, #32
   122ca:	f3ef 8411 	mrs	r4, BASEPRI
   122ce:	f383 8812 	msr	BASEPRI_MAX, r3
   122d2:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
   122d6:	4a13      	ldr	r2, [pc, #76]	; (12324 <generic_hfclk_start+0x60>)
   122d8:	6813      	ldr	r3, [r2, #0]
   122da:	f043 0302 	orr.w	r3, r3, #2
   122de:	6013      	str	r3, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
   122e0:	f013 0f01 	tst.w	r3, #1
   122e4:	d108      	bne.n	122f8 <generic_hfclk_start+0x34>
	bool already_started = false;
   122e6:	2300      	movs	r3, #0
	__asm__ volatile(
   122e8:	f384 8811 	msr	BASEPRI, r4
   122ec:	f3bf 8f6f 	isb	sy
	if (already_started) {
   122f0:	b99b      	cbnz	r3, 1231a <generic_hfclk_start+0x56>
	hfclk_start();
   122f2:	f005 fdaf 	bl	17e54 <hfclk_start>
}
   122f6:	bd10      	pop	{r4, pc}
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   122f8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   122fc:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   12300:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
   12304:	f012 0f01 	tst.w	r2, #1
   12308:	d101      	bne.n	1230e <generic_hfclk_start+0x4a>
	bool already_started = false;
   1230a:	2300      	movs	r3, #0
   1230c:	e7ec      	b.n	122e8 <generic_hfclk_start+0x24>
			set_on_state(get_hf_flags());
   1230e:	f7ff ff85 	bl	1221c <get_hf_flags>
   12312:	f005 fd34 	bl	17d7e <set_on_state>
			already_started = true;
   12316:	2301      	movs	r3, #1
   12318:	e7e6      	b.n	122e8 <generic_hfclk_start+0x24>
		clkstarted_handle(CLOCK_DEVICE,
   1231a:	2100      	movs	r1, #0
   1231c:	4802      	ldr	r0, [pc, #8]	; (12328 <generic_hfclk_start+0x64>)
   1231e:	f005 fd41 	bl	17da4 <clkstarted_handle>
		return;
   12322:	e7e8      	b.n	122f6 <generic_hfclk_start+0x32>
   12324:	2000096c 	.word	0x2000096c
   12328:	000195c4 	.word	0x000195c4

0001232c <generic_hfclk_stop>:
{
   1232c:	b508      	push	{r3, lr}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1232e:	4b0a      	ldr	r3, [pc, #40]	; (12358 <generic_hfclk_stop+0x2c>)
   12330:	f3bf 8f5b 	dmb	ish
   12334:	e853 2f00 	ldrex	r2, [r3]
   12338:	f022 0102 	bic.w	r1, r2, #2
   1233c:	e843 1000 	strex	r0, r1, [r3]
   12340:	2800      	cmp	r0, #0
   12342:	d1f7      	bne.n	12334 <generic_hfclk_stop+0x8>
   12344:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
   12348:	f012 0f01 	tst.w	r2, #1
   1234c:	d000      	beq.n	12350 <generic_hfclk_stop+0x24>
}
   1234e:	bd08      	pop	{r3, pc}
	hfclk_stop();
   12350:	f005 fd8a 	bl	17e68 <hfclk_stop>
   12354:	e7fb      	b.n	1234e <generic_hfclk_stop+0x22>
   12356:	bf00      	nop
   12358:	2000096c 	.word	0x2000096c

0001235c <api_blocking_start>:
{
   1235c:	b500      	push	{lr}
   1235e:	b085      	sub	sp, #20
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   12360:	f8cd d000 	str.w	sp, [sp]
   12364:	f8cd d004 	str.w	sp, [sp, #4]
   12368:	2300      	movs	r3, #0
   1236a:	9302      	str	r3, [sp, #8]
   1236c:	2301      	movs	r3, #1
   1236e:	9303      	str	r3, [sp, #12]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   12370:	466b      	mov	r3, sp
   12372:	4a07      	ldr	r2, [pc, #28]	; (12390 <api_blocking_start+0x34>)
   12374:	f005 fd5e 	bl	17e34 <api_start>
	if (err < 0) {
   12378:	2800      	cmp	r0, #0
   1237a:	db05      	blt.n	12388 <api_blocking_start+0x2c>
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm1 = { .val = timeout };
		return (int) arch_syscall_invoke3(parm0.x, parm1.split.lo, parm1.split.hi, K_SYSCALL_K_SEM_TAKE);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_take(sem, timeout);
   1237c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   12380:	2300      	movs	r3, #0
   12382:	4668      	mov	r0, sp
   12384:	f003 fa7e 	bl	15884 <z_impl_k_sem_take>
}
   12388:	b005      	add	sp, #20
   1238a:	f85d fb04 	ldr.w	pc, [sp], #4
   1238e:	bf00      	nop
   12390:	00017e7d 	.word	0x00017e7d

00012394 <clk_init>:
#endif /* NRF_CLOCK_HAS_HFCLKAUDIO */
#endif
}

static int clk_init(const struct device *dev)
{
   12394:	b570      	push	{r4, r5, r6, lr}
   12396:	4606      	mov	r6, r0
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   12398:	2200      	movs	r2, #0
   1239a:	2101      	movs	r1, #1
   1239c:	4610      	mov	r0, r2
   1239e:	f7ff fb57 	bl	11a50 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);

	nrfx_err = nrfx_clock_init(clock_event_handler);
   123a2:	4811      	ldr	r0, [pc, #68]	; (123e8 <clk_init+0x54>)
   123a4:	f001 fda4 	bl	13ef0 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
   123a8:	4b10      	ldr	r3, [pc, #64]	; (123ec <clk_init+0x58>)
   123aa:	4298      	cmp	r0, r3
   123ac:	d119      	bne.n	123e2 <clk_init+0x4e>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
   123ae:	f006 fc9c 	bl	18cea <nrfx_clock_enable>

	for (enum clock_control_nrf_type i = 0;
   123b2:	2400      	movs	r4, #0
   123b4:	2c01      	cmp	r4, #1
   123b6:	d812      	bhi.n	123de <clk_init+0x4a>
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);
   123b8:	4621      	mov	r1, r4
   123ba:	4630      	mov	r0, r6
   123bc:	f005 fc8f 	bl	17cde <get_sub_data>
   123c0:	4605      	mov	r5, r0

		err = onoff_manager_init(get_onoff_manager(dev, i),
   123c2:	4621      	mov	r1, r4
   123c4:	4630      	mov	r0, r6
   123c6:	f005 fc95 	bl	17cf4 <get_onoff_manager>
   123ca:	4909      	ldr	r1, [pc, #36]	; (123f0 <clk_init+0x5c>)
   123cc:	f004 ffed 	bl	173aa <onoff_manager_init>
					 &transitions);
		if (err < 0) {
   123d0:	2800      	cmp	r0, #0
   123d2:	db05      	blt.n	123e0 <clk_init+0x4c>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   123d4:	2301      	movs	r3, #1
   123d6:	60ab      	str	r3, [r5, #8]
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
   123d8:	441c      	add	r4, r3
   123da:	b2e4      	uxtb	r4, r4
   123dc:	e7ea      	b.n	123b4 <clk_init+0x20>
	}

	return 0;
   123de:	2000      	movs	r0, #0
}
   123e0:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
   123e2:	f06f 0004 	mvn.w	r0, #4
   123e6:	e7fb      	b.n	123e0 <clk_init+0x4c>
   123e8:	00012291 	.word	0x00012291
   123ec:	0bad0000 	.word	0x0bad0000
   123f0:	00019cbc 	.word	0x00019cbc

000123f4 <lfclk_spinwait>:
{
   123f4:	b570      	push	{r4, r5, r6, lr}
   123f6:	4605      	mov	r5, r0
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
   123f8:	2801      	cmp	r0, #1
   123fa:	d107      	bne.n	1240c <lfclk_spinwait+0x18>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
   123fc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   12400:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
   12404:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
   12408:	2b01      	cmp	r3, #1
   1240a:	d05a      	beq.n	124c2 <lfclk_spinwait+0xce>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   1240c:	f006 fe33 	bl	19076 <k_is_in_isr>
   12410:	b928      	cbnz	r0, 1241e <lfclk_spinwait+0x2a>
	return !z_sys_post_kernel;
   12412:	4b2f      	ldr	r3, [pc, #188]	; (124d0 <lfclk_spinwait+0xdc>)
   12414:	781b      	ldrb	r3, [r3, #0]
   12416:	2b00      	cmp	r3, #0
   12418:	d043      	beq.n	124a2 <lfclk_spinwait+0xae>
   1241a:	2300      	movs	r3, #0
   1241c:	e000      	b.n	12420 <lfclk_spinwait+0x2c>
   1241e:	2301      	movs	r3, #1
	int key = isr_mode ? irq_lock() : 0;
   12420:	461c      	mov	r4, r3
   12422:	2b00      	cmp	r3, #0
   12424:	d03f      	beq.n	124a6 <lfclk_spinwait+0xb2>
	__asm__ volatile(
   12426:	f04f 0320 	mov.w	r3, #32
   1242a:	f3ef 8611 	mrs	r6, BASEPRI
   1242e:	f383 8812 	msr	BASEPRI_MAX, r3
   12432:	f3bf 8f6f 	isb	sy
	if (!isr_mode) {
   12436:	b924      	cbnz	r4, 12442 <lfclk_spinwait+0x4e>
    p_reg->INTENCLR = mask;
   12438:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1243c:	2202      	movs	r2, #2
   1243e:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   12442:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   12446:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
   1244a:	f003 0303 	and.w	r3, r3, #3
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   1244e:	f8d2 2418 	ldr.w	r2, [r2, #1048]	; 0x418
   12452:	f412 3f80 	tst.w	r2, #65536	; 0x10000
   12456:	d12d      	bne.n	124b4 <lfclk_spinwait+0xc0>
    return false;
   12458:	2200      	movs	r2, #0
	while (!(nrfx_clock_is_running(d, (void *)&type)
   1245a:	b11a      	cbz	r2, 12464 <lfclk_spinwait+0x70>
   1245c:	2b01      	cmp	r3, #1
   1245e:	d02b      	beq.n	124b8 <lfclk_spinwait+0xc4>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
   12460:	2d01      	cmp	r5, #1
   12462:	d029      	beq.n	124b8 <lfclk_spinwait+0xc4>
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
   12464:	b30c      	cbz	r4, 124aa <lfclk_spinwait+0xb6>
 *
 * @param key Interrupt locking key obtained from irq_lock().
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
   12466:	4630      	mov	r0, r6
   12468:	f7ff fab8 	bl	119dc <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
   1246c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   12470:	f8d3 3518 	ldr.w	r3, [r3, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
   12474:	2b00      	cmp	r3, #0
   12476:	d1e4      	bne.n	12442 <lfclk_spinwait+0x4e>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   12478:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1247c:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
		    && nrf_clock_event_check(NRF_CLOCK,
   12480:	2b00      	cmp	r3, #0
   12482:	d0de      	beq.n	12442 <lfclk_spinwait+0x4e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   12484:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   12488:	2200      	movs	r2, #0
   1248a:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
   1248e:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    p_reg->LFCLKSRC = (uint32_t)(source);
   12492:	2201      	movs	r2, #1
   12494:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   12498:	490e      	ldr	r1, [pc, #56]	; (124d4 <lfclk_spinwait+0xe0>)
   1249a:	f8c1 2180 	str.w	r2, [r1, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1249e:	609a      	str	r2, [r3, #8]
}
   124a0:	e7cf      	b.n	12442 <lfclk_spinwait+0x4e>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   124a2:	2301      	movs	r3, #1
   124a4:	e7bc      	b.n	12420 <lfclk_spinwait+0x2c>
	int key = isr_mode ? irq_lock() : 0;
   124a6:	2600      	movs	r6, #0
   124a8:	e7c5      	b.n	12436 <lfclk_spinwait+0x42>
	return z_impl_k_sleep(timeout);
   124aa:	2021      	movs	r0, #33	; 0x21
   124ac:	2100      	movs	r1, #0
   124ae:	f003 fdbf 	bl	16030 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   124b2:	e7db      	b.n	1246c <lfclk_spinwait+0x78>
                return true;
   124b4:	2201      	movs	r2, #1
   124b6:	e7d0      	b.n	1245a <lfclk_spinwait+0x66>
	if (isr_mode) {
   124b8:	b124      	cbz	r4, 124c4 <lfclk_spinwait+0xd0>
	__asm__ volatile(
   124ba:	f386 8811 	msr	BASEPRI, r6
   124be:	f3bf 8f6f 	isb	sy
}
   124c2:	bd70      	pop	{r4, r5, r6, pc}
    p_reg->INTENSET = mask;
   124c4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   124c8:	2202      	movs	r2, #2
   124ca:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   124ce:	e7f8      	b.n	124c2 <lfclk_spinwait+0xce>
   124d0:	200010c3 	.word	0x200010c3
   124d4:	e000e100 	.word	0xe000e100

000124d8 <z_nrf_clock_control_lf_on>:
{
   124d8:	b510      	push	{r4, lr}
   124da:	4604      	mov	r4, r0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   124dc:	4b10      	ldr	r3, [pc, #64]	; (12520 <z_nrf_clock_control_lf_on+0x48>)
   124de:	2101      	movs	r1, #1
   124e0:	f3bf 8f5b 	dmb	ish
   124e4:	e853 2f00 	ldrex	r2, [r3]
   124e8:	e843 1000 	strex	r0, r1, [r3]
   124ec:	2800      	cmp	r0, #0
   124ee:	d1f9      	bne.n	124e4 <z_nrf_clock_control_lf_on+0xc>
   124f0:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
   124f4:	b11a      	cbz	r2, 124fe <z_nrf_clock_control_lf_on+0x26>
	switch (start_mode) {
   124f6:	1e63      	subs	r3, r4, #1
   124f8:	2b01      	cmp	r3, #1
   124fa:	d90d      	bls.n	12518 <z_nrf_clock_control_lf_on+0x40>
}
   124fc:	bd10      	pop	{r4, pc}
				get_onoff_manager(CLOCK_DEVICE,
   124fe:	4809      	ldr	r0, [pc, #36]	; (12524 <z_nrf_clock_control_lf_on+0x4c>)
   12500:	f005 fbf8 	bl	17cf4 <get_onoff_manager>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
   12504:	4908      	ldr	r1, [pc, #32]	; (12528 <z_nrf_clock_control_lf_on+0x50>)
   12506:	2300      	movs	r3, #0
   12508:	604b      	str	r3, [r1, #4]
   1250a:	608b      	str	r3, [r1, #8]
   1250c:	60cb      	str	r3, [r1, #12]
   1250e:	2301      	movs	r3, #1
   12510:	608b      	str	r3, [r1, #8]
		err = onoff_request(mgr, &cli);
   12512:	f004 ff67 	bl	173e4 <onoff_request>
   12516:	e7ee      	b.n	124f6 <z_nrf_clock_control_lf_on+0x1e>
		lfclk_spinwait(start_mode);
   12518:	4620      	mov	r0, r4
   1251a:	f7ff ff6b 	bl	123f4 <lfclk_spinwait>
		break;
   1251e:	e7ed      	b.n	124fc <z_nrf_clock_control_lf_on+0x24>
   12520:	20000970 	.word	0x20000970
   12524:	000195c4 	.word	0x000195c4
   12528:	2000090c 	.word	0x2000090c

0001252c <console_out>:
 *
 * @return The character passed as input.
 */

static int console_out(int c)
{
   1252c:	b510      	push	{r4, lr}
   1252e:	4604      	mov	r4, r0
		return c;
	}

#endif  /* CONFIG_UART_CONSOLE_DEBUG_SERVER_HOOKS */

	if ('\n' == c) {
   12530:	280a      	cmp	r0, #10
   12532:	d007      	beq.n	12544 <console_out+0x18>
		uart_poll_out(uart_console_dev, '\r');
	}
	uart_poll_out(uart_console_dev, c);
   12534:	4b07      	ldr	r3, [pc, #28]	; (12554 <console_out+0x28>)
   12536:	6818      	ldr	r0, [r3, #0]
   12538:	b2e1      	uxtb	r1, r4
			     unsigned char out_char);

static inline void z_impl_uart_poll_out(const struct device *dev,
					unsigned char out_char)
{
	const struct uart_driver_api *api =
   1253a:	6883      	ldr	r3, [r0, #8]
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
   1253c:	685b      	ldr	r3, [r3, #4]
   1253e:	4798      	blx	r3

	return c;
}
   12540:	4620      	mov	r0, r4
   12542:	bd10      	pop	{r4, pc}
		uart_poll_out(uart_console_dev, '\r');
   12544:	4b03      	ldr	r3, [pc, #12]	; (12554 <console_out+0x28>)
   12546:	6818      	ldr	r0, [r3, #0]
	const struct uart_driver_api *api =
   12548:	6883      	ldr	r3, [r0, #8]
	api->poll_out(dev, out_char);
   1254a:	685b      	ldr	r3, [r3, #4]
   1254c:	210d      	movs	r1, #13
   1254e:	4798      	blx	r3
		return;
	}
#endif
	compiler_barrier();
	z_impl_uart_poll_out(dev, out_char);
}
   12550:	e7f0      	b.n	12534 <console_out+0x8>
   12552:	bf00      	nop
   12554:	20000974 	.word	0x20000974

00012558 <uart_console_hook_install>:
/**
 * @brief Install printk/stdout hook for UART console output
 */

static void uart_console_hook_install(void)
{
   12558:	b510      	push	{r4, lr}
#if defined(CONFIG_STDOUT_CONSOLE)
	__stdout_hook_install(console_out);
   1255a:	4c04      	ldr	r4, [pc, #16]	; (1256c <uart_console_hook_install+0x14>)
   1255c:	4620      	mov	r0, r4
   1255e:	f7ff fded 	bl	1213c <__stdout_hook_install>
#endif
#if defined(CONFIG_PRINTK)
	__printk_hook_install(console_out);
   12562:	4620      	mov	r0, r4
   12564:	f7fe fa7e 	bl	10a64 <__printk_hook_install>
#endif
}
   12568:	bd10      	pop	{r4, pc}
   1256a:	bf00      	nop
   1256c:	0001252d 	.word	0x0001252d

00012570 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
   12570:	b508      	push	{r3, lr}

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
   12572:	4806      	ldr	r0, [pc, #24]	; (1258c <uart_console_init+0x1c>)
   12574:	4b06      	ldr	r3, [pc, #24]	; (12590 <uart_console_init+0x20>)
   12576:	6018      	str	r0, [r3, #0]
   12578:	f006 fceb 	bl	18f52 <z_device_is_ready>
	if (!device_is_ready(uart_console_dev)) {
   1257c:	b118      	cbz	r0, 12586 <uart_console_init+0x16>
		return -ENODEV;
	}

	uart_console_hook_install();
   1257e:	f7ff ffeb 	bl	12558 <uart_console_hook_install>

	return 0;
   12582:	2000      	movs	r0, #0
}
   12584:	bd08      	pop	{r3, pc}
		return -ENODEV;
   12586:	f06f 0012 	mvn.w	r0, #18
   1258a:	e7fb      	b.n	12584 <uart_console_init+0x14>
   1258c:	00019624 	.word	0x00019624
   12590:	20000974 	.word	0x20000974

00012594 <get_dev>:
			dev = DEVICE_DT_INST_GET(i); \
		}

	if (0) {
	} /* Followed by else if from FOREACH macro. Done to avoid return statement in macro.  */
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   12594:	b128      	cbz	r0, 125a2 <get_dev+0xe>
   12596:	2801      	cmp	r0, #1
   12598:	d101      	bne.n	1259e <get_dev+0xa>
   1259a:	4803      	ldr	r0, [pc, #12]	; (125a8 <get_dev+0x14>)
	#undef GPIO_NRF_GET_DEV

	return dev;
}
   1259c:	4770      	bx	lr
	const struct device *dev = NULL;
   1259e:	2000      	movs	r0, #0
   125a0:	4770      	bx	lr
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   125a2:	4802      	ldr	r0, [pc, #8]	; (125ac <get_dev+0x18>)
   125a4:	4770      	bx	lr
   125a6:	bf00      	nop
   125a8:	000195dc 	.word	0x000195dc
   125ac:	000195f4 	.word	0x000195f4

000125b0 <gpio_nrfx_pin_interrupt_configure>:
{
   125b0:	b5f0      	push	{r4, r5, r6, r7, lr}
   125b2:	b085      	sub	sp, #20
   125b4:	460e      	mov	r6, r1
   125b6:	4619      	mov	r1, r3
	return port->config;
   125b8:	6843      	ldr	r3, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   125ba:	7b1b      	ldrb	r3, [r3, #12]
   125bc:	f006 051f 	and.w	r5, r6, #31
   125c0:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
	if (mode == GPIO_INT_MODE_DISABLED) {
   125c4:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
   125c8:	d022      	beq.n	12610 <gpio_nrfx_pin_interrupt_configure+0x60>
   125ca:	4607      	mov	r7, r0
   125cc:	4614      	mov	r4, r2
	nrfx_gpiote_trigger_config_t trigger_config = {
   125ce:	2300      	movs	r3, #0
   125d0:	9301      	str	r3, [sp, #4]
   125d2:	9302      	str	r3, [sp, #8]
		.trigger = get_trigger(mode, trig),
   125d4:	4610      	mov	r0, r2
   125d6:	f005 fcd1 	bl	17f7c <get_trigger>
	nrfx_gpiote_trigger_config_t trigger_config = {
   125da:	f88d 0004 	strb.w	r0, [sp, #4]
	return port->config;
   125de:	687b      	ldr	r3, [r7, #4]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
   125e0:	6899      	ldr	r1, [r3, #8]
   125e2:	40f1      	lsrs	r1, r6
   125e4:	f011 0f01 	tst.w	r1, #1
   125e8:	d102      	bne.n	125f0 <gpio_nrfx_pin_interrupt_configure+0x40>
   125ea:	f1b4 7fa0 	cmp.w	r4, #20971520	; 0x1400000
   125ee:	d014      	beq.n	1261a <gpio_nrfx_pin_interrupt_configure+0x6a>
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   125f0:	2300      	movs	r3, #0
   125f2:	aa01      	add	r2, sp, #4
   125f4:	4619      	mov	r1, r3
   125f6:	4628      	mov	r0, r5
   125f8:	f001 feea 	bl	143d0 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
   125fc:	4b1b      	ldr	r3, [pc, #108]	; (1266c <gpio_nrfx_pin_interrupt_configure+0xbc>)
   125fe:	4298      	cmp	r0, r3
   12600:	d131      	bne.n	12666 <gpio_nrfx_pin_interrupt_configure+0xb6>
	nrfx_gpiote_trigger_enable(abs_pin, true);
   12602:	2101      	movs	r1, #1
   12604:	4628      	mov	r0, r5
   12606:	f002 f8c1 	bl	1478c <nrfx_gpiote_trigger_enable>
	return 0;
   1260a:	2000      	movs	r0, #0
}
   1260c:	b005      	add	sp, #20
   1260e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrfx_gpiote_trigger_disable(abs_pin);
   12610:	4628      	mov	r0, r5
   12612:	f002 f91f 	bl	14854 <nrfx_gpiote_trigger_disable>
		return 0;
   12616:	2000      	movs	r0, #0
   12618:	e7f8      	b.n	1260c <gpio_nrfx_pin_interrupt_configure+0x5c>
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;
   1261a:	f005 031f 	and.w	r3, r5, #31

    return pin_number >> 5;
   1261e:	096a      	lsrs	r2, r5, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   12620:	2a01      	cmp	r2, #1
   12622:	d014      	beq.n	1264e <gpio_nrfx_pin_interrupt_configure+0x9e>
        case 0: return NRF_P0;
   12624:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   12628:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   1262c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
   12630:	f013 0f01 	tst.w	r3, #1
   12634:	d1dc      	bne.n	125f0 <gpio_nrfx_pin_interrupt_configure+0x40>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
   12636:	f10d 010f 	add.w	r1, sp, #15
   1263a:	4628      	mov	r0, r5
   1263c:	f002 f84a 	bl	146d4 <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
   12640:	4b0b      	ldr	r3, [pc, #44]	; (12670 <gpio_nrfx_pin_interrupt_configure+0xc0>)
   12642:	4298      	cmp	r0, r3
   12644:	d005      	beq.n	12652 <gpio_nrfx_pin_interrupt_configure+0xa2>
		trigger_config.p_in_channel = &ch;
   12646:	f10d 030f 	add.w	r3, sp, #15
   1264a:	9302      	str	r3, [sp, #8]
   1264c:	e7d0      	b.n	125f0 <gpio_nrfx_pin_interrupt_configure+0x40>
        case 1: return NRF_P1;
   1264e:	4a09      	ldr	r2, [pc, #36]	; (12674 <gpio_nrfx_pin_interrupt_configure+0xc4>)
   12650:	e7ea      	b.n	12628 <gpio_nrfx_pin_interrupt_configure+0x78>
			err = nrfx_gpiote_channel_alloc(&ch);
   12652:	f10d 000f 	add.w	r0, sp, #15
   12656:	f002 f891 	bl	1477c <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
   1265a:	4b04      	ldr	r3, [pc, #16]	; (1266c <gpio_nrfx_pin_interrupt_configure+0xbc>)
   1265c:	4298      	cmp	r0, r3
   1265e:	d0f2      	beq.n	12646 <gpio_nrfx_pin_interrupt_configure+0x96>
				return -ENOMEM;
   12660:	f06f 000b 	mvn.w	r0, #11
   12664:	e7d2      	b.n	1260c <gpio_nrfx_pin_interrupt_configure+0x5c>
		return -EINVAL;
   12666:	f06f 0015 	mvn.w	r0, #21
   1266a:	e7cf      	b.n	1260c <gpio_nrfx_pin_interrupt_configure+0x5c>
   1266c:	0bad0000 	.word	0x0bad0000
   12670:	0bad0004 	.word	0x0bad0004
   12674:	50000300 	.word	0x50000300

00012678 <gpio_nrfx_pin_configure>:
{
   12678:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1267c:	b086      	sub	sp, #24
   1267e:	460e      	mov	r6, r1
   12680:	4614      	mov	r4, r2
	return port->config;
   12682:	f8d0 8004 	ldr.w	r8, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   12686:	f898 300c 	ldrb.w	r3, [r8, #12]
   1268a:	f001 051f 	and.w	r5, r1, #31
   1268e:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
   12692:	f10d 0117 	add.w	r1, sp, #23
   12696:	4628      	mov	r0, r5
   12698:	f002 f81c 	bl	146d4 <nrfx_gpiote_channel_get>
   1269c:	4607      	mov	r7, r0
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
   1269e:	f414 3f40 	tst.w	r4, #196608	; 0x30000
   126a2:	d03b      	beq.n	1271c <gpio_nrfx_pin_configure+0xa4>
	nrfx_gpiote_trigger_config_t trigger_config = {
   126a4:	2100      	movs	r1, #0
   126a6:	9103      	str	r1, [sp, #12]
   126a8:	9104      	str	r1, [sp, #16]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   126aa:	460b      	mov	r3, r1
   126ac:	aa03      	add	r2, sp, #12
   126ae:	4628      	mov	r0, r5
   126b0:	f001 fe8e 	bl	143d0 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
   126b4:	4b34      	ldr	r3, [pc, #208]	; (12788 <gpio_nrfx_pin_configure+0x110>)
   126b6:	4298      	cmp	r0, r3
   126b8:	d163      	bne.n	12782 <gpio_nrfx_pin_configure+0x10a>
	if (free_ch) {
   126ba:	429f      	cmp	r7, r3
   126bc:	d03e      	beq.n	1273c <gpio_nrfx_pin_configure+0xc4>
	if (flags & GPIO_OUTPUT) {
   126be:	f414 3f00 	tst.w	r4, #131072	; 0x20000
   126c2:	d04b      	beq.n	1275c <gpio_nrfx_pin_configure+0xe4>
		int rv = get_drive(flags, &drive);
   126c4:	f10d 0103 	add.w	r1, sp, #3
   126c8:	4620      	mov	r0, r4
   126ca:	f005 fbdc 	bl	17e86 <get_drive>
		if (rv != 0) {
   126ce:	4607      	mov	r7, r0
   126d0:	bb58      	cbnz	r0, 1272a <gpio_nrfx_pin_configure+0xb2>
		nrfx_gpiote_output_config_t output_config = {
   126d2:	f89d 3003 	ldrb.w	r3, [sp, #3]
   126d6:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
   126da:	f414 3f80 	tst.w	r4, #65536	; 0x10000
   126de:	bf0c      	ite	eq
   126e0:	2301      	moveq	r3, #1
   126e2:	2300      	movne	r3, #0
		nrfx_gpiote_output_config_t output_config = {
   126e4:	f88d 3005 	strb.w	r3, [sp, #5]
			.pull = get_pull(flags)
   126e8:	4620      	mov	r0, r4
   126ea:	f005 fc0f 	bl	17f0c <get_pull>
		nrfx_gpiote_output_config_t output_config = {
   126ee:	f88d 0006 	strb.w	r0, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
   126f2:	f414 2f00 	tst.w	r4, #524288	; 0x80000
   126f6:	d026      	beq.n	12746 <gpio_nrfx_pin_configure+0xce>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
   126f8:	f8d8 3004 	ldr.w	r3, [r8, #4]
   126fc:	2101      	movs	r1, #1
   126fe:	fa01 f606 	lsl.w	r6, r1, r6
    p_reg->OUTSET = set_mask;
   12702:	f8c3 6508 	str.w	r6, [r3, #1288]	; 0x508
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
   12706:	2200      	movs	r2, #0
   12708:	a901      	add	r1, sp, #4
   1270a:	4628      	mov	r0, r5
   1270c:	f001 ff18 	bl	14540 <nrfx_gpiote_output_configure>
		return (err != NRFX_SUCCESS) ? -EINVAL : 0;
   12710:	4b1d      	ldr	r3, [pc, #116]	; (12788 <gpio_nrfx_pin_configure+0x110>)
   12712:	4298      	cmp	r0, r3
   12714:	d009      	beq.n	1272a <gpio_nrfx_pin_configure+0xb2>
   12716:	f06f 0715 	mvn.w	r7, #21
   1271a:	e006      	b.n	1272a <gpio_nrfx_pin_configure+0xb2>
		(void)nrfx_gpiote_pin_uninit(abs_pin);
   1271c:	4628      	mov	r0, r5
   1271e:	f002 f8c9 	bl	148b4 <nrfx_gpiote_pin_uninit>
		if (free_ch) {
   12722:	4b19      	ldr	r3, [pc, #100]	; (12788 <gpio_nrfx_pin_configure+0x110>)
   12724:	429f      	cmp	r7, r3
   12726:	d004      	beq.n	12732 <gpio_nrfx_pin_configure+0xba>
		return 0;
   12728:	2700      	movs	r7, #0
}
   1272a:	4638      	mov	r0, r7
   1272c:	b006      	add	sp, #24
   1272e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			err = nrfx_gpiote_channel_free(ch);
   12732:	f89d 0017 	ldrb.w	r0, [sp, #23]
   12736:	f002 f819 	bl	1476c <nrfx_gpiote_channel_free>
   1273a:	e7f5      	b.n	12728 <gpio_nrfx_pin_configure+0xb0>
		err = nrfx_gpiote_channel_free(ch);
   1273c:	f89d 0017 	ldrb.w	r0, [sp, #23]
   12740:	f002 f814 	bl	1476c <nrfx_gpiote_channel_free>
   12744:	e7bb      	b.n	126be <gpio_nrfx_pin_configure+0x46>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
   12746:	f414 2f80 	tst.w	r4, #262144	; 0x40000
   1274a:	d0dc      	beq.n	12706 <gpio_nrfx_pin_configure+0x8e>
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
   1274c:	f8d8 2004 	ldr.w	r2, [r8, #4]
   12750:	2301      	movs	r3, #1
   12752:	fa03 f606 	lsl.w	r6, r3, r6
    p_reg->OUTCLR = clr_mask;
   12756:	f8c2 650c 	str.w	r6, [r2, #1292]	; 0x50c
}
   1275a:	e7d4      	b.n	12706 <gpio_nrfx_pin_configure+0x8e>
		.pull = get_pull(flags)
   1275c:	4620      	mov	r0, r4
   1275e:	f005 fbd5 	bl	17f0c <get_pull>
	nrfx_gpiote_input_config_t input_config = {
   12762:	f88d 0008 	strb.w	r0, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   12766:	2300      	movs	r3, #0
   12768:	461a      	mov	r2, r3
   1276a:	a902      	add	r1, sp, #8
   1276c:	4628      	mov	r0, r5
   1276e:	f001 fe2f 	bl	143d0 <nrfx_gpiote_input_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
   12772:	4b05      	ldr	r3, [pc, #20]	; (12788 <gpio_nrfx_pin_configure+0x110>)
   12774:	4298      	cmp	r0, r3
   12776:	d101      	bne.n	1277c <gpio_nrfx_pin_configure+0x104>
   12778:	2700      	movs	r7, #0
   1277a:	e7d6      	b.n	1272a <gpio_nrfx_pin_configure+0xb2>
   1277c:	f06f 0715 	mvn.w	r7, #21
   12780:	e7d3      	b.n	1272a <gpio_nrfx_pin_configure+0xb2>
		return -EINVAL;
   12782:	f06f 0715 	mvn.w	r7, #21
   12786:	e7d0      	b.n	1272a <gpio_nrfx_pin_configure+0xb2>
   12788:	0bad0000 	.word	0x0bad0000

0001278c <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
   1278c:	b508      	push	{r3, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
   1278e:	f001 ffe3 	bl	14758 <nrfx_gpiote_is_init>
   12792:	b108      	cbz	r0, 12798 <gpio_nrfx_init+0xc>
		return 0;
   12794:	2000      	movs	r0, #0

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
   12796:	bd08      	pop	{r3, pc}
	err = nrfx_gpiote_init(0/*not used*/);
   12798:	f001 ffb4 	bl	14704 <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
   1279c:	4b08      	ldr	r3, [pc, #32]	; (127c0 <gpio_nrfx_init+0x34>)
   1279e:	4298      	cmp	r0, r3
   127a0:	d10a      	bne.n	127b8 <gpio_nrfx_init+0x2c>
	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
   127a2:	2100      	movs	r1, #0
   127a4:	4807      	ldr	r0, [pc, #28]	; (127c4 <gpio_nrfx_init+0x38>)
   127a6:	f001 ff8f 	bl	146c8 <nrfx_gpiote_global_callback_set>
	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
   127aa:	2200      	movs	r2, #0
   127ac:	2105      	movs	r1, #5
   127ae:	2006      	movs	r0, #6
   127b0:	f7ff f94e 	bl	11a50 <z_arm_irq_priority_set>
	return 0;
   127b4:	2000      	movs	r0, #0
   127b6:	e7ee      	b.n	12796 <gpio_nrfx_init+0xa>
		return -EIO;
   127b8:	f06f 0004 	mvn.w	r0, #4
   127bc:	e7eb      	b.n	12796 <gpio_nrfx_init+0xa>
   127be:	bf00      	nop
   127c0:	0bad0000 	.word	0x0bad0000
   127c4:	0001801b 	.word	0x0001801b

000127c8 <qspi_nor_pages_layout>:

static void qspi_nor_pages_layout(const struct device *dev,
				  const struct flash_pages_layout **layout,
				  size_t *layout_size)
{
	*layout = &dev_layout;
   127c8:	4b02      	ldr	r3, [pc, #8]	; (127d4 <qspi_nor_pages_layout+0xc>)
   127ca:	600b      	str	r3, [r1, #0]
	*layout_size = 1;
   127cc:	2301      	movs	r3, #1
   127ce:	6013      	str	r3, [r2, #0]
}
   127d0:	4770      	bx	lr
   127d2:	bf00      	nop
   127d4:	00019d68 	.word	0x00019d68

000127d8 <qspi_flash_get_parameters>:
		.write_block_size = 4,
		.erase_value = 0xff,
	};

	return &qspi_flash_parameters;
}
   127d8:	4800      	ldr	r0, [pc, #0]	; (127dc <qspi_flash_get_parameters+0x4>)
   127da:	4770      	bx	lr
   127dc:	00019d70 	.word	0x00019d70

000127e0 <qspi_device_init>:
{
   127e0:	b538      	push	{r3, r4, r5, lr}
   127e2:	4604      	mov	r4, r0
	struct qspi_nor_data *dev_data = dev->data;
   127e4:	6905      	ldr	r5, [r0, #16]
	k_sem_take(&dev_data->sem, K_FOREVER);
   127e6:	f105 0010 	add.w	r0, r5, #16
	return z_impl_k_sem_take(sem, timeout);
   127ea:	f04f 32ff 	mov.w	r2, #4294967295
   127ee:	f04f 33ff 	mov.w	r3, #4294967295
   127f2:	f003 f847 	bl	15884 <z_impl_k_sem_take>
	k_sem_give(&dev_data->count);
   127f6:	f105 0030 	add.w	r0, r5, #48	; 0x30
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
   127fa:	f003 f81f 	bl	1583c <z_impl_k_sem_give>
	if (!qspi_initialized) {
   127fe:	4b16      	ldr	r3, [pc, #88]	; (12858 <qspi_device_init+0x78>)
   12800:	781b      	ldrb	r3, [r3, #0]
   12802:	b133      	cbz	r3, 12812 <qspi_device_init+0x32>
	int ret = 0;
   12804:	2500      	movs	r5, #0
	struct qspi_nor_data *dev_data = dev->data;
   12806:	6920      	ldr	r0, [r4, #16]
	k_sem_give(&dev_data->sem);
   12808:	3010      	adds	r0, #16
   1280a:	f003 f817 	bl	1583c <z_impl_k_sem_give>
}
   1280e:	4628      	mov	r0, r5
   12810:	bd38      	pop	{r3, r4, r5, pc}
		res = nrfx_qspi_init(&dev_config->nrfx_cfg,
   12812:	462a      	mov	r2, r5
   12814:	4911      	ldr	r1, [pc, #68]	; (1285c <qspi_device_init+0x7c>)
   12816:	6860      	ldr	r0, [r4, #4]
   12818:	f002 fafa 	bl	14e10 <nrfx_qspi_init>
	switch (res) {
   1281c:	f100 4074 	add.w	r0, r0, #4093640704	; 0xf4000000
   12820:	f500 00a6 	add.w	r0, r0, #5439488	; 0x530000
   12824:	280a      	cmp	r0, #10
   12826:	d80c      	bhi.n	12842 <qspi_device_init+0x62>
   12828:	e8df f000 	tbb	[pc, r0]
   1282c:	0b0b0b06 	.word	0x0b0b0b06
   12830:	0b0b080e 	.word	0x0b0b080e
   12834:	0b0b      	.short	0x0b0b
   12836:	0e          	.byte	0x0e
   12837:	00          	.byte	0x00
   12838:	2500      	movs	r5, #0
   1283a:	e007      	b.n	1284c <qspi_device_init+0x6c>
		return -ECANCELED;
   1283c:	f06f 058b 	mvn.w	r5, #139	; 0x8b
   12840:	e004      	b.n	1284c <qspi_device_init+0x6c>
		return -EBUSY;
   12842:	f06f 050f 	mvn.w	r5, #15
   12846:	e001      	b.n	1284c <qspi_device_init+0x6c>
		return -EINVAL;
   12848:	f06f 0515 	mvn.w	r5, #21
		qspi_initialized = (ret == 0);
   1284c:	fab5 f385 	clz	r3, r5
   12850:	095b      	lsrs	r3, r3, #5
   12852:	4a01      	ldr	r2, [pc, #4]	; (12858 <qspi_device_init+0x78>)
   12854:	7013      	strb	r3, [r2, #0]
   12856:	e7d6      	b.n	12806 <qspi_device_init+0x26>
   12858:	200010bd 	.word	0x200010bd
   1285c:	00018063 	.word	0x00018063

00012860 <qspi_device_uninit>:
{
   12860:	b538      	push	{r3, r4, r5, lr}
   12862:	4604      	mov	r4, r0
	struct qspi_nor_data *dev_data = dev->data;
   12864:	6900      	ldr	r0, [r0, #16]
	k_sem_take(&dev_data->sem, K_FOREVER);
   12866:	3010      	adds	r0, #16
	return z_impl_k_sem_take(sem, timeout);
   12868:	f04f 32ff 	mov.w	r2, #4294967295
   1286c:	f04f 33ff 	mov.w	r3, #4294967295
   12870:	f003 f808 	bl	15884 <z_impl_k_sem_take>
	struct qspi_nor_data *dev_data = dev->data;
   12874:	6925      	ldr	r5, [r4, #16]
	(void) k_sem_take(&dev_data->count, K_NO_WAIT);
   12876:	f105 0030 	add.w	r0, r5, #48	; 0x30
   1287a:	2200      	movs	r2, #0
   1287c:	2300      	movs	r3, #0
   1287e:	f003 f801 	bl	15884 <z_impl_k_sem_take>
	return sem->count;
   12882:	6bab      	ldr	r3, [r5, #56]	; 0x38
	if (last) {
   12884:	b14b      	cbz	r3, 1289a <qspi_device_uninit+0x3a>
	struct qspi_nor_data *dev_data = dev->data;
   12886:	6920      	ldr	r0, [r4, #16]
	k_sem_give(&dev_data->sem);
   12888:	3010      	adds	r0, #16
	z_impl_k_sem_give(sem);
   1288a:	f002 ffd7 	bl	1583c <z_impl_k_sem_give>
}
   1288e:	bd38      	pop	{r3, r4, r5, pc}
	return z_impl_k_sleep(timeout);
   12890:	f240 6067 	movw	r0, #1639	; 0x667
   12894:	2100      	movs	r1, #0
   12896:	f003 fbcb 	bl	16030 <z_impl_k_sleep>
		while (nrfx_qspi_mem_busy_check() != NRFX_SUCCESS) {
   1289a:	f002 fbaf 	bl	14ffc <nrfx_qspi_mem_busy_check>
   1289e:	4b04      	ldr	r3, [pc, #16]	; (128b0 <qspi_device_uninit+0x50>)
   128a0:	4298      	cmp	r0, r3
   128a2:	d1f5      	bne.n	12890 <qspi_device_uninit+0x30>
		nrfx_qspi_uninit();
   128a4:	f002 fbd2 	bl	1504c <nrfx_qspi_uninit>
		qspi_initialized = false;
   128a8:	4b02      	ldr	r3, [pc, #8]	; (128b4 <qspi_device_uninit+0x54>)
   128aa:	2200      	movs	r2, #0
   128ac:	701a      	strb	r2, [r3, #0]
   128ae:	e7ea      	b.n	12886 <qspi_device_uninit+0x26>
   128b0:	0bad0000 	.word	0x0bad0000
   128b4:	200010bd 	.word	0x200010bd

000128b8 <qspi_nrfx_configure>:
{
   128b8:	b538      	push	{r3, r4, r5, lr}
   128ba:	4604      	mov	r4, r0
	const struct qspi_nor_config *dev_config = dev->config;
   128bc:	6845      	ldr	r5, [r0, #4]
	nrfx_err_t res = nrfx_qspi_init(&dev_config->nrfx_cfg,
   128be:	6902      	ldr	r2, [r0, #16]
   128c0:	4921      	ldr	r1, [pc, #132]	; (12948 <qspi_nrfx_configure+0x90>)
   128c2:	4628      	mov	r0, r5
   128c4:	f002 faa4 	bl	14e10 <nrfx_qspi_init>
	switch (res) {
   128c8:	f100 4374 	add.w	r3, r0, #4093640704	; 0xf4000000
   128cc:	f503 03a6 	add.w	r3, r3, #5439488	; 0x530000
   128d0:	2b0a      	cmp	r3, #10
   128d2:	d80c      	bhi.n	128ee <qspi_nrfx_configure+0x36>
   128d4:	e8df f003 	tbb	[pc, r3]
   128d8:	0b0b0b06 	.word	0x0b0b0b06
   128dc:	0b0b080e 	.word	0x0b0b080e
   128e0:	0b0b      	.short	0x0b0b
   128e2:	0e          	.byte	0x0e
   128e3:	00          	.byte	0x00
   128e4:	2000      	movs	r0, #0
   128e6:	e007      	b.n	128f8 <qspi_nrfx_configure+0x40>
		return -ECANCELED;
   128e8:	f06f 008b 	mvn.w	r0, #139	; 0x8b
   128ec:	e004      	b.n	128f8 <qspi_nrfx_configure+0x40>
		return -EBUSY;
   128ee:	f06f 000f 	mvn.w	r0, #15
   128f2:	e001      	b.n	128f8 <qspi_nrfx_configure+0x40>
		return -EINVAL;
   128f4:	f06f 0015 	mvn.w	r0, #21
	if (ret < 0) {
   128f8:	2800      	cmp	r0, #0
   128fa:	db1b      	blt.n	12934 <qspi_nrfx_configure+0x7c>
		bool qe_value = (prot_if->writeoc == NRF_QSPI_WRITEOC_PP4IO) ||
   128fc:	7aeb      	ldrb	r3, [r5, #11]
   128fe:	3b02      	subs	r3, #2
   12900:	b2db      	uxtb	r3, r3
				(prot_if->readoc == NRF_QSPI_READOC_READ4IO) ||
   12902:	2b01      	cmp	r3, #1
   12904:	d908      	bls.n	12918 <qspi_nrfx_configure+0x60>
   12906:	7aab      	ldrb	r3, [r5, #10]
				(prot_if->writeoc == NRF_QSPI_WRITEOC_PP4O)  ||
   12908:	2b04      	cmp	r3, #4
   1290a:	d014      	beq.n	12936 <qspi_nrfx_configure+0x7e>
				(prot_if->readoc == NRF_QSPI_READOC_READ4IO) ||
   1290c:	2b03      	cmp	r3, #3
   1290e:	d001      	beq.n	12914 <qspi_nrfx_configure+0x5c>
   12910:	2300      	movs	r3, #0
   12912:	e002      	b.n	1291a <qspi_nrfx_configure+0x62>
   12914:	2301      	movs	r3, #1
   12916:	e000      	b.n	1291a <qspi_nrfx_configure+0x62>
   12918:	2301      	movs	r3, #1
		bool qe_value = (prot_if->writeoc == NRF_QSPI_WRITEOC_PP4IO) ||
   1291a:	461d      	mov	r5, r3
		ret = qspi_rdsr(dev, sr_num);
   1291c:	2101      	movs	r1, #1
   1291e:	4620      	mov	r0, r4
   12920:	f005 fc1f 	bl	18162 <qspi_rdsr>
		if (ret < 0) {
   12924:	2800      	cmp	r0, #0
   12926:	db05      	blt.n	12934 <qspi_nrfx_configure+0x7c>
		uint8_t sr = (uint8_t)ret;
   12928:	b2c1      	uxtb	r1, r0
		bool qe_state = ((sr & qe_mask) != 0U);
   1292a:	f3c0 1380 	ubfx	r3, r0, #6, #1
		if (qe_state != qe_value) {
   1292e:	42ab      	cmp	r3, r5
   12930:	d103      	bne.n	1293a <qspi_nrfx_configure+0x82>
		ret = 0;
   12932:	2000      	movs	r0, #0
}
   12934:	bd38      	pop	{r3, r4, r5, pc}
				(prot_if->readoc == NRF_QSPI_READOC_READ4IO) ||
   12936:	2301      	movs	r3, #1
   12938:	e7ef      	b.n	1291a <qspi_nrfx_configure+0x62>
			ret = qspi_wrsr(dev, sr, sr_num);
   1293a:	2201      	movs	r2, #1
   1293c:	f081 0140 	eor.w	r1, r1, #64	; 0x40
   12940:	4620      	mov	r0, r4
   12942:	f005 fc44 	bl	181ce <qspi_wrsr>
		if (ret < 0) {
   12946:	e7f5      	b.n	12934 <qspi_nrfx_configure+0x7c>
   12948:	00018063 	.word	0x00018063

0001294c <qspi_erase>:
{
   1294c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if ((addr % QSPI_SECTOR_SIZE) != 0) {
   12950:	f3c1 030b 	ubfx	r3, r1, #0, #12
   12954:	2b00      	cmp	r3, #0
   12956:	f040 8093 	bne.w	12a80 <qspi_erase+0x134>
   1295a:	4605      	mov	r5, r0
   1295c:	460e      	mov	r6, r1
   1295e:	4614      	mov	r4, r2
	if ((size == 0) || (size % QSPI_SECTOR_SIZE) != 0) {
   12960:	2a00      	cmp	r2, #0
   12962:	f000 8090 	beq.w	12a86 <qspi_erase+0x13a>
   12966:	f3c2 090b 	ubfx	r9, r2, #0, #12
   1296a:	f1b9 0f00 	cmp.w	r9, #0
   1296e:	f040 808d 	bne.w	12a8c <qspi_erase+0x140>
	const struct qspi_nor_config *params = dev->config;
   12972:	f8d0 b004 	ldr.w	fp, [r0, #4]
	rv = qspi_device_init(dev);
   12976:	f7ff ff33 	bl	127e0 <qspi_device_init>
	if (rv != 0) {
   1297a:	4682      	mov	sl, r0
   1297c:	b128      	cbz	r0, 1298a <qspi_erase+0x3e>
	qspi_device_uninit(dev);
   1297e:	4628      	mov	r0, r5
   12980:	f7ff ff6e 	bl	12860 <qspi_device_uninit>
}
   12984:	4650      	mov	r0, sl
   12986:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	struct qspi_nor_data *dev_data = dev->data;
   1298a:	6928      	ldr	r0, [r5, #16]
	return z_impl_k_sem_take(sem, timeout);
   1298c:	f04f 32ff 	mov.w	r2, #4294967295
   12990:	f04f 33ff 	mov.w	r3, #4294967295
   12994:	f002 ff76 	bl	15884 <z_impl_k_sem_take>
	rv = qspi_nor_write_protection_set(dev, false);
   12998:	2100      	movs	r1, #0
   1299a:	4628      	mov	r0, r5
   1299c:	f005 fbca 	bl	18134 <qspi_nor_write_protection_set>
	if (rv != 0) {
   129a0:	4682      	mov	sl, r0
   129a2:	b118      	cbz	r0, 129ac <qspi_erase+0x60>
	struct qspi_nor_data *dev_data = dev->data;
   129a4:	6928      	ldr	r0, [r5, #16]
	z_impl_k_sem_give(sem);
   129a6:	f002 ff49 	bl	1583c <z_impl_k_sem_give>
}
   129aa:	e7e8      	b.n	1297e <qspi_erase+0x32>
	struct qspi_nor_data *dev_data = dev->data;
   129ac:	6928      	ldr	r0, [r5, #16]
	k_sem_take(&dev_data->sem, K_FOREVER);
   129ae:	3010      	adds	r0, #16
	return z_impl_k_sem_take(sem, timeout);
   129b0:	f04f 32ff 	mov.w	r2, #4294967295
   129b4:	f04f 33ff 	mov.w	r3, #4294967295
   129b8:	f002 ff64 	bl	15884 <z_impl_k_sem_take>
}
   129bc:	e020      	b.n	12a00 <qspi_erase+0xb4>
			res = nrfx_qspi_chip_erase();
   129be:	f006 fab9 	bl	18f34 <nrfx_qspi_chip_erase>
   129c2:	4607      	mov	r7, r0
			adj = size;
   129c4:	46a0      	mov	r8, r4
   129c6:	e011      	b.n	129ec <qspi_erase+0xa0>
			res = nrfx_qspi_erase(NRF_QSPI_ERASE_LEN_64KB, addr);
   129c8:	4631      	mov	r1, r6
   129ca:	2001      	movs	r0, #1
   129cc:	f002 fb72 	bl	150b4 <nrfx_qspi_erase>
   129d0:	4607      	mov	r7, r0
			adj = QSPI_BLOCK_SIZE;
   129d2:	f44f 3880 	mov.w	r8, #65536	; 0x10000
   129d6:	e009      	b.n	129ec <qspi_erase+0xa0>
			res = nrfx_qspi_erase(NRF_QSPI_ERASE_LEN_4KB, addr);
   129d8:	4631      	mov	r1, r6
   129da:	2000      	movs	r0, #0
   129dc:	f002 fb6a 	bl	150b4 <nrfx_qspi_erase>
   129e0:	4607      	mov	r7, r0
			adj = QSPI_SECTOR_SIZE;
   129e2:	f44f 5880 	mov.w	r8, #4096	; 0x1000
   129e6:	e001      	b.n	129ec <qspi_erase+0xa0>
		uint32_t adj = 0;
   129e8:	46c8      	mov	r8, r9
			res = NRFX_ERROR_INVALID_PARAM;
   129ea:	4f2a      	ldr	r7, [pc, #168]	; (12a94 <qspi_erase+0x148>)
	struct qspi_nor_data *dev_data = dev->data;
   129ec:	6928      	ldr	r0, [r5, #16]
	if (res == NRFX_SUCCESS) {
   129ee:	4b2a      	ldr	r3, [pc, #168]	; (12a98 <qspi_erase+0x14c>)
   129f0:	429f      	cmp	r7, r3
   129f2:	d01a      	beq.n	12a2a <qspi_erase+0xde>
		if (res == NRFX_SUCCESS) {
   129f4:	4b28      	ldr	r3, [pc, #160]	; (12a98 <qspi_erase+0x14c>)
   129f6:	429f      	cmp	r7, r3
   129f8:	d11f      	bne.n	12a3a <qspi_erase+0xee>
			addr += adj;
   129fa:	4446      	add	r6, r8
			size -= adj;
   129fc:	eba4 0408 	sub.w	r4, r4, r8
	while (size > 0) {
   12a00:	b38c      	cbz	r4, 12a66 <qspi_erase+0x11a>
		if (size == params->size) {
   12a02:	f8db 3018 	ldr.w	r3, [fp, #24]
   12a06:	42a3      	cmp	r3, r4
   12a08:	d0d9      	beq.n	129be <qspi_erase+0x72>
		} else if ((size >= QSPI_BLOCK_SIZE) &&
   12a0a:	f5b4 3f80 	cmp.w	r4, #65536	; 0x10000
   12a0e:	d302      	bcc.n	12a16 <qspi_erase+0xca>
			   QSPI_IS_BLOCK_ALIGNED(addr)) {
   12a10:	b2b3      	uxth	r3, r6
		} else if ((size >= QSPI_BLOCK_SIZE) &&
   12a12:	2b00      	cmp	r3, #0
   12a14:	d0d8      	beq.n	129c8 <qspi_erase+0x7c>
		} else if ((size >= QSPI_SECTOR_SIZE) &&
   12a16:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
   12a1a:	d3e5      	bcc.n	129e8 <qspi_erase+0x9c>
			   QSPI_IS_SECTOR_ALIGNED(addr)) {
   12a1c:	f3c6 030b 	ubfx	r3, r6, #0, #12
		} else if ((size >= QSPI_SECTOR_SIZE) &&
   12a20:	2b00      	cmp	r3, #0
   12a22:	d0d9      	beq.n	129d8 <qspi_erase+0x8c>
		uint32_t adj = 0;
   12a24:	46c8      	mov	r8, r9
			res = NRFX_ERROR_INVALID_PARAM;
   12a26:	4f1b      	ldr	r7, [pc, #108]	; (12a94 <qspi_erase+0x148>)
   12a28:	e7e0      	b.n	129ec <qspi_erase+0xa0>
		k_sem_take(&dev_data->sync, K_FOREVER);
   12a2a:	3020      	adds	r0, #32
   12a2c:	f04f 32ff 	mov.w	r2, #4294967295
   12a30:	f04f 33ff 	mov.w	r3, #4294967295
   12a34:	f002 ff26 	bl	15884 <z_impl_k_sem_take>
   12a38:	e7dc      	b.n	129f4 <qspi_erase+0xa8>
	switch (res) {
   12a3a:	f107 4774 	add.w	r7, r7, #4093640704	; 0xf4000000
   12a3e:	f507 07a6 	add.w	r7, r7, #5439488	; 0x530000
   12a42:	2f0a      	cmp	r7, #10
   12a44:	d80a      	bhi.n	12a5c <qspi_erase+0x110>
   12a46:	e8df f007 	tbb	[pc, r7]
   12a4a:	090e      	.short	0x090e
   12a4c:	060c0909 	.word	0x060c0909
   12a50:	09090909 	.word	0x09090909
   12a54:	0c          	.byte	0x0c
   12a55:	00          	.byte	0x00
		return -ECANCELED;
   12a56:	f06f 0a8b 	mvn.w	sl, #139	; 0x8b
   12a5a:	e004      	b.n	12a66 <qspi_erase+0x11a>
		return -EBUSY;
   12a5c:	f06f 0a0f 	mvn.w	sl, #15
   12a60:	e001      	b.n	12a66 <qspi_erase+0x11a>
		return -EINVAL;
   12a62:	f06f 0a15 	mvn.w	sl, #21
	struct qspi_nor_data *dev_data = dev->data;
   12a66:	6928      	ldr	r0, [r5, #16]
	k_sem_give(&dev_data->sem);
   12a68:	3010      	adds	r0, #16
	z_impl_k_sem_give(sem);
   12a6a:	f002 fee7 	bl	1583c <z_impl_k_sem_give>
	int rv2 = qspi_nor_write_protection_set(dev, true);
   12a6e:	2101      	movs	r1, #1
   12a70:	4628      	mov	r0, r5
   12a72:	f005 fb5f 	bl	18134 <qspi_nor_write_protection_set>
	if (!rv) {
   12a76:	f1ba 0f00 	cmp.w	sl, #0
   12a7a:	d193      	bne.n	129a4 <qspi_erase+0x58>
		rv = rv2;
   12a7c:	4682      	mov	sl, r0
   12a7e:	e791      	b.n	129a4 <qspi_erase+0x58>
		return -EINVAL;
   12a80:	f06f 0a15 	mvn.w	sl, #21
   12a84:	e77e      	b.n	12984 <qspi_erase+0x38>
		return -EINVAL;
   12a86:	f06f 0a15 	mvn.w	sl, #21
   12a8a:	e77b      	b.n	12984 <qspi_erase+0x38>
   12a8c:	f06f 0a15 	mvn.w	sl, #21
   12a90:	e778      	b.n	12984 <qspi_erase+0x38>
   12a92:	bf00      	nop
   12a94:	0bad0004 	.word	0x0bad0004
   12a98:	0bad0000 	.word	0x0bad0000

00012a9c <read_non_aligned>:
{
   12a9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12aa0:	b087      	sub	sp, #28
   12aa2:	4682      	mov	sl, r0
   12aa4:	460e      	mov	r6, r1
   12aa6:	4617      	mov	r7, r2
	off_t flash_prefix = (WORD_SIZE - (addr % WORD_SIZE)) % WORD_SIZE;
   12aa8:	424a      	negs	r2, r1
   12aaa:	f001 0403 	and.w	r4, r1, #3
   12aae:	f002 0203 	and.w	r2, r2, #3
   12ab2:	bf58      	it	pl
   12ab4:	4254      	negpl	r4, r2
   12ab6:	f1c4 0404 	rsb	r4, r4, #4
   12aba:	4262      	negs	r2, r4
   12abc:	f004 0403 	and.w	r4, r4, #3
   12ac0:	f002 0203 	and.w	r2, r2, #3
   12ac4:	bf58      	it	pl
   12ac6:	4254      	negpl	r4, r2
	if (flash_prefix > size) {
   12ac8:	429c      	cmp	r4, r3
   12aca:	d900      	bls.n	12ace <read_non_aligned+0x32>
		flash_prefix = size;
   12acc:	461c      	mov	r4, r3
	off_t dest_prefix = (WORD_SIZE - (off_t)dptr % WORD_SIZE) % WORD_SIZE;
   12ace:	427a      	negs	r2, r7
   12ad0:	f007 0503 	and.w	r5, r7, #3
   12ad4:	f002 0203 	and.w	r2, r2, #3
   12ad8:	bf58      	it	pl
   12ada:	4255      	negpl	r5, r2
   12adc:	f1c5 0504 	rsb	r5, r5, #4
   12ae0:	426a      	negs	r2, r5
   12ae2:	f005 0503 	and.w	r5, r5, #3
   12ae6:	f002 0203 	and.w	r2, r2, #3
   12aea:	bf58      	it	pl
   12aec:	4255      	negpl	r5, r2
	if (dest_prefix > size) {
   12aee:	429d      	cmp	r5, r3
   12af0:	d900      	bls.n	12af4 <read_non_aligned+0x58>
		dest_prefix = size;
   12af2:	461d      	mov	r5, r3
	off_t flash_suffix = (size - flash_prefix) % WORD_SIZE;
   12af4:	9401      	str	r4, [sp, #4]
   12af6:	1b1a      	subs	r2, r3, r4
   12af8:	f002 0b03 	and.w	fp, r2, #3
	off_t flash_middle = size - flash_prefix - flash_suffix;
   12afc:	f022 0903 	bic.w	r9, r2, #3
			    (size - dest_prefix) % WORD_SIZE;
   12b00:	4629      	mov	r1, r5
   12b02:	1b5b      	subs	r3, r3, r5
	off_t dest_middle = size - dest_prefix -
   12b04:	f023 0303 	bic.w	r3, r3, #3
	if (flash_middle > dest_middle) {
   12b08:	4599      	cmp	r9, r3
   12b0a:	dd02      	ble.n	12b12 <read_non_aligned+0x76>
		flash_suffix = size - flash_prefix - flash_middle;
   12b0c:	eba2 0b03 	sub.w	fp, r2, r3
		flash_middle = dest_middle;
   12b10:	4699      	mov	r9, r3
	if (flash_middle != 0) {
   12b12:	f1b9 0f00 	cmp.w	r9, #0
   12b16:	d109      	bne.n	12b2c <read_non_aligned+0x90>
	nrfx_err_t res = NRFX_SUCCESS;
   12b18:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 12bf4 <read_non_aligned+0x158>
	if (flash_prefix != 0) {
   12b1c:	bb4c      	cbnz	r4, 12b72 <read_non_aligned+0xd6>
	if (flash_suffix != 0) {
   12b1e:	f1bb 0f00 	cmp.w	fp, #0
   12b22:	d147      	bne.n	12bb4 <read_non_aligned+0x118>
}
   12b24:	4640      	mov	r0, r8
   12b26:	b007      	add	sp, #28
   12b28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		res = nrfx_qspi_read(dptr + dest_prefix, flash_middle,
   12b2c:	187b      	adds	r3, r7, r1
   12b2e:	9302      	str	r3, [sp, #8]
   12b30:	f8cd 900c 	str.w	r9, [sp, #12]
   12b34:	19a2      	adds	r2, r4, r6
   12b36:	4649      	mov	r1, r9
   12b38:	4618      	mov	r0, r3
   12b3a:	f006 f9f6 	bl	18f2a <nrfx_qspi_read>
   12b3e:	4680      	mov	r8, r0
	struct qspi_nor_data *dev_data = dev->data;
   12b40:	f8da 0010 	ldr.w	r0, [sl, #16]
	if (res == NRFX_SUCCESS) {
   12b44:	4b2b      	ldr	r3, [pc, #172]	; (12bf4 <read_non_aligned+0x158>)
   12b46:	4598      	cmp	r8, r3
   12b48:	d00b      	beq.n	12b62 <read_non_aligned+0xc6>
		if (res != NRFX_SUCCESS) {
   12b4a:	4b2a      	ldr	r3, [pc, #168]	; (12bf4 <read_non_aligned+0x158>)
   12b4c:	4598      	cmp	r8, r3
   12b4e:	d1e9      	bne.n	12b24 <read_non_aligned+0x88>
		if (flash_prefix != dest_prefix) {
   12b50:	42ac      	cmp	r4, r5
   12b52:	d0e3      	beq.n	12b1c <read_non_aligned+0x80>
			memmove(dptr + flash_prefix, dptr + dest_prefix, flash_middle);
   12b54:	9a03      	ldr	r2, [sp, #12]
   12b56:	9902      	ldr	r1, [sp, #8]
   12b58:	9b01      	ldr	r3, [sp, #4]
   12b5a:	18f8      	adds	r0, r7, r3
   12b5c:	f005 f82e 	bl	17bbc <memmove>
   12b60:	e7dc      	b.n	12b1c <read_non_aligned+0x80>
		k_sem_take(&dev_data->sync, K_FOREVER);
   12b62:	3020      	adds	r0, #32
	return z_impl_k_sem_take(sem, timeout);
   12b64:	f04f 32ff 	mov.w	r2, #4294967295
   12b68:	f04f 33ff 	mov.w	r3, #4294967295
   12b6c:	f002 fe8a 	bl	15884 <z_impl_k_sem_take>
   12b70:	e7eb      	b.n	12b4a <read_non_aligned+0xae>
				     (WORD_SIZE - flash_prefix));
   12b72:	f1c4 0204 	rsb	r2, r4, #4
		res = nrfx_qspi_read(buf, WORD_SIZE, addr -
   12b76:	1ab2      	subs	r2, r6, r2
   12b78:	2104      	movs	r1, #4
   12b7a:	a804      	add	r0, sp, #16
   12b7c:	f006 f9d5 	bl	18f2a <nrfx_qspi_read>
   12b80:	4680      	mov	r8, r0
	struct qspi_nor_data *dev_data = dev->data;
   12b82:	f8da 0010 	ldr.w	r0, [sl, #16]
	if (res == NRFX_SUCCESS) {
   12b86:	4b1b      	ldr	r3, [pc, #108]	; (12bf4 <read_non_aligned+0x158>)
   12b88:	4598      	cmp	r8, r3
   12b8a:	d00b      	beq.n	12ba4 <read_non_aligned+0x108>
		if (res != NRFX_SUCCESS) {
   12b8c:	4b19      	ldr	r3, [pc, #100]	; (12bf4 <read_non_aligned+0x158>)
   12b8e:	4598      	cmp	r8, r3
   12b90:	d1c8      	bne.n	12b24 <read_non_aligned+0x88>
		memcpy(dptr, buf + WORD_SIZE - flash_prefix, flash_prefix);
   12b92:	9a01      	ldr	r2, [sp, #4]
   12b94:	f1c2 0104 	rsb	r1, r2, #4
   12b98:	ab04      	add	r3, sp, #16
   12b9a:	4419      	add	r1, r3
   12b9c:	4638      	mov	r0, r7
   12b9e:	f005 f820 	bl	17be2 <memcpy>
   12ba2:	e7bc      	b.n	12b1e <read_non_aligned+0x82>
		k_sem_take(&dev_data->sync, K_FOREVER);
   12ba4:	3020      	adds	r0, #32
   12ba6:	f04f 32ff 	mov.w	r2, #4294967295
   12baa:	f04f 33ff 	mov.w	r3, #4294967295
   12bae:	f002 fe69 	bl	15884 <z_impl_k_sem_take>
   12bb2:	e7eb      	b.n	12b8c <read_non_aligned+0xf0>
				     addr + flash_prefix + flash_middle);
   12bb4:	19a2      	adds	r2, r4, r6
		res = nrfx_qspi_read(buf, WORD_SIZE * 2,
   12bb6:	444a      	add	r2, r9
   12bb8:	2108      	movs	r1, #8
   12bba:	a804      	add	r0, sp, #16
   12bbc:	f006 f9b5 	bl	18f2a <nrfx_qspi_read>
   12bc0:	4680      	mov	r8, r0
	struct qspi_nor_data *dev_data = dev->data;
   12bc2:	f8da 0010 	ldr.w	r0, [sl, #16]
	if (res == NRFX_SUCCESS) {
   12bc6:	4b0b      	ldr	r3, [pc, #44]	; (12bf4 <read_non_aligned+0x158>)
   12bc8:	4598      	cmp	r8, r3
   12bca:	d00a      	beq.n	12be2 <read_non_aligned+0x146>
		if (res != NRFX_SUCCESS) {
   12bcc:	4b09      	ldr	r3, [pc, #36]	; (12bf4 <read_non_aligned+0x158>)
   12bce:	4598      	cmp	r8, r3
   12bd0:	d1a8      	bne.n	12b24 <read_non_aligned+0x88>
		memcpy(dptr + flash_prefix + flash_middle, buf, flash_suffix);
   12bd2:	9801      	ldr	r0, [sp, #4]
   12bd4:	4448      	add	r0, r9
   12bd6:	465a      	mov	r2, fp
   12bd8:	a904      	add	r1, sp, #16
   12bda:	4438      	add	r0, r7
   12bdc:	f005 f801 	bl	17be2 <memcpy>
   12be0:	e7a0      	b.n	12b24 <read_non_aligned+0x88>
		k_sem_take(&dev_data->sync, K_FOREVER);
   12be2:	3020      	adds	r0, #32
   12be4:	f04f 32ff 	mov.w	r2, #4294967295
   12be8:	f04f 33ff 	mov.w	r3, #4294967295
   12bec:	f002 fe4a 	bl	15884 <z_impl_k_sem_take>
   12bf0:	e7ec      	b.n	12bcc <read_non_aligned+0x130>
   12bf2:	bf00      	nop
   12bf4:	0bad0000 	.word	0x0bad0000

00012bf8 <qspi_nor_read>:
{
   12bf8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!dest) {
   12bfc:	2a00      	cmp	r2, #0
   12bfe:	d052      	beq.n	12ca6 <qspi_nor_read+0xae>
   12c00:	4604      	mov	r4, r0
   12c02:	460f      	mov	r7, r1
   12c04:	461d      	mov	r5, r3
   12c06:	4690      	mov	r8, r2
	if (!size) {
   12c08:	2b00      	cmp	r3, #0
   12c0a:	d04f      	beq.n	12cac <qspi_nor_read+0xb4>
	const struct qspi_nor_config *params = dev->config;
   12c0c:	6842      	ldr	r2, [r0, #4]
	if (addr < 0 ||
   12c0e:	2900      	cmp	r1, #0
   12c10:	db4e      	blt.n	12cb0 <qspi_nor_read+0xb8>
	    (addr + size) > params->size) {
   12c12:	18cb      	adds	r3, r1, r3
   12c14:	6992      	ldr	r2, [r2, #24]
	if (addr < 0 ||
   12c16:	4293      	cmp	r3, r2
   12c18:	d84d      	bhi.n	12cb6 <qspi_nor_read+0xbe>
	int rc = qspi_device_init(dev);
   12c1a:	f7ff fde1 	bl	127e0 <qspi_device_init>
	if (rc != 0) {
   12c1e:	4606      	mov	r6, r0
   12c20:	b128      	cbz	r0, 12c2e <qspi_nor_read+0x36>
	qspi_device_uninit(dev);
   12c22:	4620      	mov	r0, r4
   12c24:	f7ff fe1c 	bl	12860 <qspi_device_uninit>
}
   12c28:	4630      	mov	r0, r6
   12c2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	struct qspi_nor_data *dev_data = dev->data;
   12c2e:	6920      	ldr	r0, [r4, #16]
	k_sem_take(&dev_data->sem, K_FOREVER);
   12c30:	3010      	adds	r0, #16
   12c32:	f04f 32ff 	mov.w	r2, #4294967295
   12c36:	f04f 33ff 	mov.w	r3, #4294967295
   12c3a:	f002 fe23 	bl	15884 <z_impl_k_sem_take>
	nrfx_err_t res = read_non_aligned(dev, addr, dest, size);
   12c3e:	462b      	mov	r3, r5
   12c40:	4642      	mov	r2, r8
   12c42:	4639      	mov	r1, r7
   12c44:	4620      	mov	r0, r4
   12c46:	f7ff ff29 	bl	12a9c <read_non_aligned>
   12c4a:	4605      	mov	r5, r0
	struct qspi_nor_data *dev_data = dev->data;
   12c4c:	6920      	ldr	r0, [r4, #16]
	k_sem_give(&dev_data->sem);
   12c4e:	3010      	adds	r0, #16
	z_impl_k_sem_give(sem);
   12c50:	f002 fdf4 	bl	1583c <z_impl_k_sem_give>
	switch (res) {
   12c54:	f105 4074 	add.w	r0, r5, #4093640704	; 0xf4000000
   12c58:	f500 00a6 	add.w	r0, r0, #5439488	; 0x530000
   12c5c:	280a      	cmp	r0, #10
   12c5e:	d81c      	bhi.n	12c9a <qspi_nor_read+0xa2>
   12c60:	a301      	add	r3, pc, #4	; (adr r3, 12c68 <qspi_nor_read+0x70>)
   12c62:	f853 f020 	ldr.w	pc, [r3, r0, lsl #2]
   12c66:	bf00      	nop
   12c68:	00012c23 	.word	0x00012c23
   12c6c:	00012c9b 	.word	0x00012c9b
   12c70:	00012c9b 	.word	0x00012c9b
   12c74:	00012c9b 	.word	0x00012c9b
   12c78:	00012ca1 	.word	0x00012ca1
   12c7c:	00012c95 	.word	0x00012c95
   12c80:	00012c9b 	.word	0x00012c9b
   12c84:	00012c9b 	.word	0x00012c9b
   12c88:	00012c9b 	.word	0x00012c9b
   12c8c:	00012c9b 	.word	0x00012c9b
   12c90:	00012ca1 	.word	0x00012ca1
		return -ECANCELED;
   12c94:	f06f 068b 	mvn.w	r6, #139	; 0x8b
   12c98:	e7c3      	b.n	12c22 <qspi_nor_read+0x2a>
		return -EBUSY;
   12c9a:	f06f 060f 	mvn.w	r6, #15
   12c9e:	e7c0      	b.n	12c22 <qspi_nor_read+0x2a>
		return -EINVAL;
   12ca0:	f06f 0615 	mvn.w	r6, #21
   12ca4:	e7bd      	b.n	12c22 <qspi_nor_read+0x2a>
		return -EINVAL;
   12ca6:	f06f 0615 	mvn.w	r6, #21
   12caa:	e7bd      	b.n	12c28 <qspi_nor_read+0x30>
		return 0;
   12cac:	2600      	movs	r6, #0
   12cae:	e7bb      	b.n	12c28 <qspi_nor_read+0x30>
		return -EINVAL;
   12cb0:	f06f 0615 	mvn.w	r6, #21
   12cb4:	e7b8      	b.n	12c28 <qspi_nor_read+0x30>
   12cb6:	f06f 0615 	mvn.w	r6, #21
   12cba:	e7b5      	b.n	12c28 <qspi_nor_read+0x30>

00012cbc <qspi_nor_write>:
{
   12cbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12cc0:	b083      	sub	sp, #12
	if (!src) {
   12cc2:	2a00      	cmp	r2, #0
   12cc4:	f000 80e7 	beq.w	12e96 <qspi_nor_write+0x1da>
   12cc8:	4605      	mov	r5, r0
   12cca:	460f      	mov	r7, r1
   12ccc:	461e      	mov	r6, r3
   12cce:	4692      	mov	sl, r2
	if ((size == 0)
   12cd0:	2b00      	cmp	r3, #0
   12cd2:	f000 80e3 	beq.w	12e9c <qspi_nor_write+0x1e0>
	    || ((size > 4) && ((size % 4U) != 0))) {
   12cd6:	2b04      	cmp	r3, #4
   12cd8:	d903      	bls.n	12ce2 <qspi_nor_write+0x26>
   12cda:	f013 0f03 	tst.w	r3, #3
   12cde:	f040 80e0 	bne.w	12ea2 <qspi_nor_write+0x1e6>
	if ((addr % 4U) != 0) {
   12ce2:	46b8      	mov	r8, r7
   12ce4:	f017 0f03 	tst.w	r7, #3
   12ce8:	f040 80de 	bne.w	12ea8 <qspi_nor_write+0x1ec>
	const struct qspi_nor_config *params = dev->config;
   12cec:	686a      	ldr	r2, [r5, #4]
	if (addr < 0 ||
   12cee:	2f00      	cmp	r7, #0
   12cf0:	f2c0 80dd 	blt.w	12eae <qspi_nor_write+0x1f2>
	    (addr + size) > params->size) {
   12cf4:	19bb      	adds	r3, r7, r6
   12cf6:	6992      	ldr	r2, [r2, #24]
	if (addr < 0 ||
   12cf8:	4293      	cmp	r3, r2
   12cfa:	f200 80db 	bhi.w	12eb4 <qspi_nor_write+0x1f8>
	int rc = qspi_device_init(dev);
   12cfe:	4628      	mov	r0, r5
   12d00:	f7ff fd6e 	bl	127e0 <qspi_device_init>
	if (rc != 0) {
   12d04:	4683      	mov	fp, r0
   12d06:	b130      	cbz	r0, 12d16 <qspi_nor_write+0x5a>
	qspi_device_uninit(dev);
   12d08:	4628      	mov	r0, r5
   12d0a:	f7ff fda9 	bl	12860 <qspi_device_uninit>
}
   12d0e:	4658      	mov	r0, fp
   12d10:	b003      	add	sp, #12
   12d12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	struct qspi_nor_data *dev_data = dev->data;
   12d16:	6928      	ldr	r0, [r5, #16]
	return z_impl_k_sem_take(sem, timeout);
   12d18:	f04f 32ff 	mov.w	r2, #4294967295
   12d1c:	f04f 33ff 	mov.w	r3, #4294967295
   12d20:	f002 fdb0 	bl	15884 <z_impl_k_sem_take>
	res = qspi_nor_write_protection_set(dev, false);
   12d24:	2100      	movs	r1, #0
   12d26:	4628      	mov	r0, r5
   12d28:	f005 fa04 	bl	18134 <qspi_nor_write_protection_set>
   12d2c:	4604      	mov	r4, r0
	struct qspi_nor_data *dev_data = dev->data;
   12d2e:	6928      	ldr	r0, [r5, #16]
	k_sem_take(&dev_data->sem, K_FOREVER);
   12d30:	3010      	adds	r0, #16
   12d32:	f04f 32ff 	mov.w	r2, #4294967295
   12d36:	f04f 33ff 	mov.w	r3, #4294967295
   12d3a:	f002 fda3 	bl	15884 <z_impl_k_sem_take>
	if (!res) {
   12d3e:	2c00      	cmp	r4, #0
   12d40:	d139      	bne.n	12db6 <qspi_nor_write+0xfa>
		if (size < 4U) {
   12d42:	2e03      	cmp	r6, #3
   12d44:	d929      	bls.n	12d9a <qspi_nor_write+0xde>

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrfx_is_in_ram(void const * p_object)
{
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
   12d46:	f00a 4360 	and.w	r3, sl, #3758096384	; 0xe0000000
		} else if (!nrfx_is_in_ram(src)) {
   12d4a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   12d4e:	f000 8087 	beq.w	12e60 <qspi_nor_write+0x1a4>
	nrfx_err_t res = NRFX_SUCCESS;
   12d52:	4c5a      	ldr	r4, [pc, #360]	; (12ebc <qspi_nor_write+0x200>)
		while ((slen > 0) && (res == NRFX_SUCCESS)) {
   12d54:	b37e      	cbz	r6, 12db6 <qspi_nor_write+0xfa>
   12d56:	4b59      	ldr	r3, [pc, #356]	; (12ebc <qspi_nor_write+0x200>)
   12d58:	429c      	cmp	r4, r3
   12d5a:	d12c      	bne.n	12db6 <qspi_nor_write+0xfa>
			size_t len = MIN(slen, sizeof(buf));
   12d5c:	46b0      	mov	r8, r6
   12d5e:	2e04      	cmp	r6, #4
   12d60:	bf28      	it	cs
   12d62:	f04f 0804 	movcs.w	r8, #4
			memcpy(buf, sp, len);
   12d66:	4642      	mov	r2, r8
   12d68:	4651      	mov	r1, sl
   12d6a:	a801      	add	r0, sp, #4
   12d6c:	f004 ff39 	bl	17be2 <memcpy>
			res = nrfx_qspi_write(buf, sizeof(buf), addr);
   12d70:	46b9      	mov	r9, r7
   12d72:	463a      	mov	r2, r7
   12d74:	2104      	movs	r1, #4
   12d76:	eb0d 0001 	add.w	r0, sp, r1
   12d7a:	f006 f8d1 	bl	18f20 <nrfx_qspi_write>
   12d7e:	4604      	mov	r4, r0
	struct qspi_nor_data *dev_data = dev->data;
   12d80:	6928      	ldr	r0, [r5, #16]
	if (res == NRFX_SUCCESS) {
   12d82:	4b4e      	ldr	r3, [pc, #312]	; (12ebc <qspi_nor_write+0x200>)
   12d84:	429c      	cmp	r4, r3
   12d86:	d063      	beq.n	12e50 <qspi_nor_write+0x194>
			if (res == NRFX_SUCCESS) {
   12d88:	4b4c      	ldr	r3, [pc, #304]	; (12ebc <qspi_nor_write+0x200>)
   12d8a:	429c      	cmp	r4, r3
   12d8c:	d1e2      	bne.n	12d54 <qspi_nor_write+0x98>
				slen -= len;
   12d8e:	eba6 0608 	sub.w	r6, r6, r8
				sp += len;
   12d92:	44c2      	add	sl, r8
				addr += len;
   12d94:	eb08 0709 	add.w	r7, r8, r9
   12d98:	e7dc      	b.n	12d54 <qspi_nor_write+0x98>
	res = nrfx_qspi_read(buf, sizeof(buf), addr);
   12d9a:	463a      	mov	r2, r7
   12d9c:	2104      	movs	r1, #4
   12d9e:	eb0d 0001 	add.w	r0, sp, r1
   12da2:	f006 f8c2 	bl	18f2a <nrfx_qspi_read>
   12da6:	4604      	mov	r4, r0
	struct qspi_nor_data *dev_data = dev->data;
   12da8:	6928      	ldr	r0, [r5, #16]
	if (res == NRFX_SUCCESS) {
   12daa:	4b44      	ldr	r3, [pc, #272]	; (12ebc <qspi_nor_write+0x200>)
   12dac:	429c      	cmp	r4, r3
   12dae:	d02f      	beq.n	12e10 <qspi_nor_write+0x154>
	if (res == NRFX_SUCCESS) {
   12db0:	4b42      	ldr	r3, [pc, #264]	; (12ebc <qspi_nor_write+0x200>)
   12db2:	429c      	cmp	r4, r3
   12db4:	d034      	beq.n	12e20 <qspi_nor_write+0x164>
	struct qspi_nor_data *dev_data = dev->data;
   12db6:	6928      	ldr	r0, [r5, #16]
	k_sem_give(&dev_data->sem);
   12db8:	3010      	adds	r0, #16
	z_impl_k_sem_give(sem);
   12dba:	f002 fd3f 	bl	1583c <z_impl_k_sem_give>
	int res2 = qspi_nor_write_protection_set(dev, true);
   12dbe:	2101      	movs	r1, #1
   12dc0:	4628      	mov	r0, r5
   12dc2:	f005 f9b7 	bl	18134 <qspi_nor_write_protection_set>
   12dc6:	4606      	mov	r6, r0
	struct qspi_nor_data *dev_data = dev->data;
   12dc8:	6928      	ldr	r0, [r5, #16]
   12dca:	f002 fd37 	bl	1583c <z_impl_k_sem_give>
	if (!res) {
   12dce:	b904      	cbnz	r4, 12dd2 <qspi_nor_write+0x116>
		res = res2;
   12dd0:	4634      	mov	r4, r6
	switch (res) {
   12dd2:	f104 4074 	add.w	r0, r4, #4093640704	; 0xf4000000
   12dd6:	f500 00a6 	add.w	r0, r0, #5439488	; 0x530000
   12dda:	280a      	cmp	r0, #10
   12ddc:	d855      	bhi.n	12e8a <qspi_nor_write+0x1ce>
   12dde:	a301      	add	r3, pc, #4	; (adr r3, 12de4 <qspi_nor_write+0x128>)
   12de0:	f853 f020 	ldr.w	pc, [r3, r0, lsl #2]
   12de4:	00012d09 	.word	0x00012d09
   12de8:	00012e8b 	.word	0x00012e8b
   12dec:	00012e8b 	.word	0x00012e8b
   12df0:	00012e8b 	.word	0x00012e8b
   12df4:	00012e91 	.word	0x00012e91
   12df8:	00012e85 	.word	0x00012e85
   12dfc:	00012e8b 	.word	0x00012e8b
   12e00:	00012e8b 	.word	0x00012e8b
   12e04:	00012e8b 	.word	0x00012e8b
   12e08:	00012e8b 	.word	0x00012e8b
   12e0c:	00012e91 	.word	0x00012e91
		k_sem_take(&dev_data->sync, K_FOREVER);
   12e10:	3020      	adds	r0, #32
	return z_impl_k_sem_take(sem, timeout);
   12e12:	f04f 32ff 	mov.w	r2, #4294967295
   12e16:	f04f 33ff 	mov.w	r3, #4294967295
   12e1a:	f002 fd33 	bl	15884 <z_impl_k_sem_take>
   12e1e:	e7c7      	b.n	12db0 <qspi_nor_write+0xf4>
		memcpy(buf, sptr, slen);
   12e20:	4632      	mov	r2, r6
   12e22:	4651      	mov	r1, sl
   12e24:	a801      	add	r0, sp, #4
   12e26:	f004 fedc 	bl	17be2 <memcpy>
		res = nrfx_qspi_write(buf, sizeof(buf), addr);
   12e2a:	4642      	mov	r2, r8
   12e2c:	2104      	movs	r1, #4
   12e2e:	eb0d 0001 	add.w	r0, sp, r1
   12e32:	f006 f875 	bl	18f20 <nrfx_qspi_write>
   12e36:	4604      	mov	r4, r0
	struct qspi_nor_data *dev_data = dev->data;
   12e38:	6928      	ldr	r0, [r5, #16]
	if (res == NRFX_SUCCESS) {
   12e3a:	4b20      	ldr	r3, [pc, #128]	; (12ebc <qspi_nor_write+0x200>)
   12e3c:	429c      	cmp	r4, r3
   12e3e:	d1ba      	bne.n	12db6 <qspi_nor_write+0xfa>
		k_sem_take(&dev_data->sync, K_FOREVER);
   12e40:	3020      	adds	r0, #32
   12e42:	f04f 32ff 	mov.w	r2, #4294967295
   12e46:	f04f 33ff 	mov.w	r3, #4294967295
   12e4a:	f002 fd1b 	bl	15884 <z_impl_k_sem_take>
}
   12e4e:	e7b2      	b.n	12db6 <qspi_nor_write+0xfa>
		k_sem_take(&dev_data->sync, K_FOREVER);
   12e50:	3020      	adds	r0, #32
   12e52:	f04f 32ff 	mov.w	r2, #4294967295
   12e56:	f04f 33ff 	mov.w	r3, #4294967295
   12e5a:	f002 fd13 	bl	15884 <z_impl_k_sem_take>
   12e5e:	e793      	b.n	12d88 <qspi_nor_write+0xcc>
			res = nrfx_qspi_write(src, size, addr);
   12e60:	463a      	mov	r2, r7
   12e62:	4631      	mov	r1, r6
   12e64:	4650      	mov	r0, sl
   12e66:	f006 f85b 	bl	18f20 <nrfx_qspi_write>
   12e6a:	4604      	mov	r4, r0
	struct qspi_nor_data *dev_data = dev->data;
   12e6c:	6928      	ldr	r0, [r5, #16]
	if (res == NRFX_SUCCESS) {
   12e6e:	4b13      	ldr	r3, [pc, #76]	; (12ebc <qspi_nor_write+0x200>)
   12e70:	429c      	cmp	r4, r3
   12e72:	d1a0      	bne.n	12db6 <qspi_nor_write+0xfa>
		k_sem_take(&dev_data->sync, K_FOREVER);
   12e74:	3020      	adds	r0, #32
   12e76:	f04f 32ff 	mov.w	r2, #4294967295
   12e7a:	f04f 33ff 	mov.w	r3, #4294967295
   12e7e:	f002 fd01 	bl	15884 <z_impl_k_sem_take>
}
   12e82:	e798      	b.n	12db6 <qspi_nor_write+0xfa>
		return -ECANCELED;
   12e84:	f06f 0b8b 	mvn.w	fp, #139	; 0x8b
   12e88:	e73e      	b.n	12d08 <qspi_nor_write+0x4c>
		return -EBUSY;
   12e8a:	f06f 0b0f 	mvn.w	fp, #15
   12e8e:	e73b      	b.n	12d08 <qspi_nor_write+0x4c>
		return -EINVAL;
   12e90:	f06f 0b15 	mvn.w	fp, #21
   12e94:	e738      	b.n	12d08 <qspi_nor_write+0x4c>
		return -EINVAL;
   12e96:	f06f 0b15 	mvn.w	fp, #21
   12e9a:	e738      	b.n	12d0e <qspi_nor_write+0x52>
		return -EINVAL;
   12e9c:	f06f 0b15 	mvn.w	fp, #21
   12ea0:	e735      	b.n	12d0e <qspi_nor_write+0x52>
   12ea2:	f06f 0b15 	mvn.w	fp, #21
   12ea6:	e732      	b.n	12d0e <qspi_nor_write+0x52>
		return -EINVAL;
   12ea8:	f06f 0b15 	mvn.w	fp, #21
   12eac:	e72f      	b.n	12d0e <qspi_nor_write+0x52>
		return -EINVAL;
   12eae:	f06f 0b15 	mvn.w	fp, #21
   12eb2:	e72c      	b.n	12d0e <qspi_nor_write+0x52>
   12eb4:	f06f 0b15 	mvn.w	fp, #21
   12eb8:	e729      	b.n	12d0e <qspi_nor_write+0x52>
   12eba:	bf00      	nop
   12ebc:	0bad0000 	.word	0x0bad0000

00012ec0 <nvmc_wait_ready>:

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrf_nvmc_ready_check(NRF_NVMC_Type const * p_reg)
{
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
   12ec0:	4b03      	ldr	r3, [pc, #12]	; (12ed0 <nvmc_wait_ready+0x10>)
   12ec2:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
#endif /* CONFIG_SOC_FLASH_NRF_UICR */
}

static void nvmc_wait_ready(void)
{
	while (!nrfx_nvmc_write_done_check()) {
   12ec6:	f013 0f01 	tst.w	r3, #1
   12eca:	d0f9      	beq.n	12ec0 <nvmc_wait_ready>
	}
}
   12ecc:	4770      	bx	lr
   12ece:	bf00      	nop
   12ed0:	4001e000 	.word	0x4001e000

00012ed4 <flash_nrf_pages_layout>:

static void flash_nrf_pages_layout(const struct device *dev,
				     const struct flash_pages_layout **layout,
				     size_t *layout_size)
{
	*layout = &dev_layout;
   12ed4:	4b02      	ldr	r3, [pc, #8]	; (12ee0 <flash_nrf_pages_layout+0xc>)
   12ed6:	600b      	str	r3, [r1, #0]
	*layout_size = 1;
   12ed8:	2301      	movs	r3, #1
   12eda:	6013      	str	r3, [r2, #0]
}
   12edc:	4770      	bx	lr
   12ede:	bf00      	nop
   12ee0:	20000990 	.word	0x20000990

00012ee4 <flash_nrf_get_parameters>:
flash_nrf_get_parameters(const struct device *dev)
{
	ARG_UNUSED(dev);

	return &flash_nrf_parameters;
}
   12ee4:	4800      	ldr	r0, [pc, #0]	; (12ee8 <flash_nrf_get_parameters+0x4>)
   12ee6:	4770      	bx	lr
   12ee8:	00019de0 	.word	0x00019de0

00012eec <suspend_pofwarn>:
 * Do not attempt to write or erase if EVENTS_POFWARN is already asserted.
 */
static bool pofcon_enabled;

static int suspend_pofwarn(void)
{
   12eec:	b508      	push	{r3, lr}
	if (!nrf52_errata_242()) {
   12eee:	f005 fa08 	bl	18302 <nrf52_errata_242>
   12ef2:	b348      	cbz	r0, 12f48 <suspend_pofwarn+0x5c>
    uint32_t pofcon = p_reg->POFCON;
   12ef4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   12ef8:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
            == POWER_POFCON_POF_Enabled;
   12efc:	f013 0201 	ands.w	r2, r3, #1
   12f00:	b2d2      	uxtb	r2, r2
    return (nrf_power_pof_thr_t)((pofcon & POWER_POFCON_THRESHOLD_Msk) >>
   12f02:	f3c3 0343 	ubfx	r3, r3, #1, #4
	bool enabled;
	nrf_power_pof_thr_t pof_thr;

	pof_thr = nrf_power_pofcon_get(NRF_POWER, &enabled);

	if (enabled) {
   12f06:	d021      	beq.n	12f4c <suspend_pofwarn+0x60>
    uint32_t pofcon = p_reg->POFCON;
   12f08:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
   12f0c:	f8d0 1510 	ldr.w	r1, [r0, #1296]	; 0x510
    pofcon &= ~(POWER_POFCON_THRESHOLD_Msk | POWER_POFCON_POF_Msk);
   12f10:	f021 011f 	bic.w	r1, r1, #31
        (((uint32_t)thr) << POWER_POFCON_THRESHOLD_Pos) |
   12f14:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    pofcon |=
   12f18:	ea41 0343 	orr.w	r3, r1, r3, lsl #1
    p_reg->POFCON = pofcon;
   12f1c:	f8c0 3510 	str.w	r3, [r0, #1296]	; 0x510
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   12f20:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
		nrf_power_pofcon_set(NRF_POWER, false, pof_thr);

		/* This check need to be reworked once POFWARN event will be
		 * served by zephyr.
		 */
		if (nrf_power_event_check(NRF_POWER, NRF_POWER_EVENT_POFWARN)) {
   12f24:	b91b      	cbnz	r3, 12f2e <suspend_pofwarn+0x42>
			nrf_power_pofcon_set(NRF_POWER, true, pof_thr);
			return -ECANCELED;
		}

		pofcon_enabled = enabled;
   12f26:	4b0a      	ldr	r3, [pc, #40]	; (12f50 <suspend_pofwarn+0x64>)
   12f28:	701a      	strb	r2, [r3, #0]
	}

	return 0;
   12f2a:	2000      	movs	r0, #0
   12f2c:	e00d      	b.n	12f4a <suspend_pofwarn+0x5e>
    uint32_t pofcon = p_reg->POFCON;
   12f2e:	f8d0 3510 	ldr.w	r3, [r0, #1296]	; 0x510
    pofcon &= ~(POWER_POFCON_THRESHOLD_Msk | POWER_POFCON_POF_Msk);
   12f32:	f023 031f 	bic.w	r3, r3, #31
        (((uint32_t)thr) << POWER_POFCON_THRESHOLD_Pos) |
   12f36:	f04c 0c01 	orr.w	ip, ip, #1
    pofcon |=
   12f3a:	ea43 030c 	orr.w	r3, r3, ip
    p_reg->POFCON = pofcon;
   12f3e:	f8c0 3510 	str.w	r3, [r0, #1296]	; 0x510
			return -ECANCELED;
   12f42:	f06f 008b 	mvn.w	r0, #139	; 0x8b
   12f46:	e000      	b.n	12f4a <suspend_pofwarn+0x5e>
		return 0;
   12f48:	2000      	movs	r0, #0
}
   12f4a:	bd08      	pop	{r3, pc}
	return 0;
   12f4c:	2000      	movs	r0, #0
   12f4e:	e7fc      	b.n	12f4a <suspend_pofwarn+0x5e>
   12f50:	200010be 	.word	0x200010be

00012f54 <restore_pofwarn>:

static void restore_pofwarn(void)
{
	nrf_power_pof_thr_t pof_thr;

	if (pofcon_enabled) {
   12f54:	4b0a      	ldr	r3, [pc, #40]	; (12f80 <restore_pofwarn+0x2c>)
   12f56:	781b      	ldrb	r3, [r3, #0]
   12f58:	b18b      	cbz	r3, 12f7e <restore_pofwarn+0x2a>
    uint32_t pofcon = p_reg->POFCON;
   12f5a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   12f5e:	f8d1 2510 	ldr.w	r2, [r1, #1296]	; 0x510
    uint32_t pofcon = p_reg->POFCON;
   12f62:	f8d1 3510 	ldr.w	r3, [r1, #1296]	; 0x510
    pofcon &= ~(POWER_POFCON_THRESHOLD_Msk | POWER_POFCON_POF_Msk);
   12f66:	f023 031f 	bic.w	r3, r3, #31
        (((uint32_t)thr) << POWER_POFCON_THRESHOLD_Pos) |
   12f6a:	f002 021e 	and.w	r2, r2, #30
   12f6e:	f042 0201 	orr.w	r2, r2, #1
    pofcon |=
   12f72:	4313      	orrs	r3, r2
    p_reg->POFCON = pofcon;
   12f74:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
		pof_thr = nrf_power_pofcon_get(NRF_POWER, NULL);

		nrf_power_pofcon_set(NRF_POWER, true, pof_thr);
		pofcon_enabled = false;
   12f78:	4b01      	ldr	r3, [pc, #4]	; (12f80 <restore_pofwarn+0x2c>)
   12f7a:	2200      	movs	r2, #0
   12f7c:	701a      	strb	r2, [r3, #0]
	}
}
   12f7e:	4770      	bx	lr
   12f80:	200010be 	.word	0x200010be

00012f84 <flash_nrf_erase>:
{
   12f84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   12f86:	460d      	mov	r5, r1
   12f88:	4616      	mov	r6, r2
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   12f8a:	f005 ffb7 	bl	18efc <nrfx_nvmc_flash_page_size_get>
   12f8e:	4604      	mov	r4, r0
	return is_within_bounds(addr, len, 0, nrfx_nvmc_flash_size_get());
   12f90:	f005 ffb0 	bl	18ef4 <nrfx_nvmc_flash_size_get>
			(addr < (boundary_start + boundary_size)) &&
   12f94:	2d00      	cmp	r5, #0
   12f96:	db06      	blt.n	12fa6 <flash_nrf_erase+0x22>
	return (addr >= boundary_start &&
   12f98:	42a8      	cmp	r0, r5
   12f9a:	d915      	bls.n	12fc8 <flash_nrf_erase+0x44>
			(len <= (boundary_start + boundary_size - addr)));
   12f9c:	1b40      	subs	r0, r0, r5
			(addr < (boundary_start + boundary_size)) &&
   12f9e:	4286      	cmp	r6, r0
   12fa0:	d914      	bls.n	12fcc <flash_nrf_erase+0x48>
   12fa2:	2300      	movs	r3, #0
   12fa4:	e000      	b.n	12fa8 <flash_nrf_erase+0x24>
   12fa6:	2300      	movs	r3, #0
	if (is_regular_addr_valid(addr, size)) {
   12fa8:	b31b      	cbz	r3, 12ff2 <flash_nrf_erase+0x6e>
		if (((addr % pg_size) != 0) || ((size % pg_size) != 0)) {
   12faa:	fbb5 f3f4 	udiv	r3, r5, r4
   12fae:	fb04 5313 	mls	r3, r4, r3, r5
   12fb2:	bb0b      	cbnz	r3, 12ff8 <flash_nrf_erase+0x74>
   12fb4:	fbb6 f3f4 	udiv	r3, r6, r4
   12fb8:	fb04 6313 	mls	r3, r4, r3, r6
   12fbc:	b9fb      	cbnz	r3, 12ffe <flash_nrf_erase+0x7a>
		if (!n_pages) {
   12fbe:	42b4      	cmp	r4, r6
   12fc0:	d906      	bls.n	12fd0 <flash_nrf_erase+0x4c>
			return 0;
   12fc2:	2400      	movs	r4, #0
}
   12fc4:	4620      	mov	r0, r4
   12fc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			(addr < (boundary_start + boundary_size)) &&
   12fc8:	2300      	movs	r3, #0
   12fca:	e7ed      	b.n	12fa8 <flash_nrf_erase+0x24>
   12fcc:	2301      	movs	r3, #1
   12fce:	e7eb      	b.n	12fa8 <flash_nrf_erase+0x24>
   12fd0:	4f0c      	ldr	r7, [pc, #48]	; (13004 <flash_nrf_erase+0x80>)
   12fd2:	f04f 32ff 	mov.w	r2, #4294967295
   12fd6:	f04f 33ff 	mov.w	r3, #4294967295
   12fda:	4638      	mov	r0, r7
   12fdc:	f002 fc52 	bl	15884 <z_impl_k_sem_take>
		ret = erase(addr, size);
   12fe0:	4631      	mov	r1, r6
   12fe2:	4628      	mov	r0, r5
   12fe4:	f005 f9bd 	bl	18362 <erase>
   12fe8:	4604      	mov	r4, r0
	z_impl_k_sem_give(sem);
   12fea:	4638      	mov	r0, r7
   12fec:	f002 fc26 	bl	1583c <z_impl_k_sem_give>
	return ret;
   12ff0:	e7e8      	b.n	12fc4 <flash_nrf_erase+0x40>
		return -EINVAL;
   12ff2:	f06f 0415 	mvn.w	r4, #21
   12ff6:	e7e5      	b.n	12fc4 <flash_nrf_erase+0x40>
			return -EINVAL;
   12ff8:	f06f 0415 	mvn.w	r4, #21
   12ffc:	e7e2      	b.n	12fc4 <flash_nrf_erase+0x40>
   12ffe:	f06f 0415 	mvn.w	r4, #21
   13002:	e7df      	b.n	12fc4 <flash_nrf_erase+0x40>
   13004:	20000998 	.word	0x20000998

00013008 <nrf_flash_init>:
{
   13008:	b510      	push	{r4, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
   1300a:	2201      	movs	r2, #1
   1300c:	4611      	mov	r1, r2
   1300e:	4806      	ldr	r0, [pc, #24]	; (13028 <nrf_flash_init+0x20>)
   13010:	f006 f869 	bl	190e6 <z_impl_k_sem_init>
	dev_layout.pages_count = nrfx_nvmc_flash_page_count_get();
   13014:	f005 ff76 	bl	18f04 <nrfx_nvmc_flash_page_count_get>
   13018:	4c04      	ldr	r4, [pc, #16]	; (1302c <nrf_flash_init+0x24>)
   1301a:	6020      	str	r0, [r4, #0]
	dev_layout.pages_size = nrfx_nvmc_flash_page_size_get();
   1301c:	f005 ff6e 	bl	18efc <nrfx_nvmc_flash_page_size_get>
   13020:	6060      	str	r0, [r4, #4]
}
   13022:	2000      	movs	r0, #0
   13024:	bd10      	pop	{r4, pc}
   13026:	bf00      	nop
   13028:	20000998 	.word	0x20000998
   1302c:	20000990 	.word	0x20000990

00013030 <flash_nrf_write>:
{
   13030:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   13032:	460c      	mov	r4, r1
   13034:	4616      	mov	r6, r2
   13036:	461d      	mov	r5, r3
	return is_within_bounds(addr, len, 0, nrfx_nvmc_flash_size_get());
   13038:	f005 ff5c 	bl	18ef4 <nrfx_nvmc_flash_size_get>
			(addr < (boundary_start + boundary_size)) &&
   1303c:	2c00      	cmp	r4, #0
   1303e:	db06      	blt.n	1304e <flash_nrf_write+0x1e>
	return (addr >= boundary_start &&
   13040:	42a0      	cmp	r0, r4
   13042:	d90a      	bls.n	1305a <flash_nrf_write+0x2a>
			(len <= (boundary_start + boundary_size - addr)));
   13044:	1b00      	subs	r0, r0, r4
			(addr < (boundary_start + boundary_size)) &&
   13046:	4285      	cmp	r5, r0
   13048:	d909      	bls.n	1305e <flash_nrf_write+0x2e>
   1304a:	2300      	movs	r3, #0
   1304c:	e000      	b.n	13050 <flash_nrf_write+0x20>
   1304e:	2300      	movs	r3, #0
	if (is_regular_addr_valid(addr, len)) {
   13050:	b1cb      	cbz	r3, 13086 <flash_nrf_write+0x56>
	if (!len) {
   13052:	b935      	cbnz	r5, 13062 <flash_nrf_write+0x32>
		return 0;
   13054:	2400      	movs	r4, #0
}
   13056:	4620      	mov	r0, r4
   13058:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			(addr < (boundary_start + boundary_size)) &&
   1305a:	2300      	movs	r3, #0
   1305c:	e7f8      	b.n	13050 <flash_nrf_write+0x20>
   1305e:	2301      	movs	r3, #1
   13060:	e7f6      	b.n	13050 <flash_nrf_write+0x20>
	return z_impl_k_sem_take(sem, timeout);
   13062:	4f0a      	ldr	r7, [pc, #40]	; (1308c <flash_nrf_write+0x5c>)
   13064:	f04f 32ff 	mov.w	r2, #4294967295
   13068:	f04f 33ff 	mov.w	r3, #4294967295
   1306c:	4638      	mov	r0, r7
   1306e:	f002 fc09 	bl	15884 <z_impl_k_sem_take>
		ret = write(addr, data, len);
   13072:	462a      	mov	r2, r5
   13074:	4631      	mov	r1, r6
   13076:	4620      	mov	r0, r4
   13078:	f005 f9c9 	bl	1840e <write>
   1307c:	4604      	mov	r4, r0
	z_impl_k_sem_give(sem);
   1307e:	4638      	mov	r0, r7
   13080:	f002 fbdc 	bl	1583c <z_impl_k_sem_give>
	return ret;
   13084:	e7e7      	b.n	13056 <flash_nrf_write+0x26>
		return -EINVAL;
   13086:	f06f 0415 	mvn.w	r4, #21
   1308a:	e7e4      	b.n	13056 <flash_nrf_write+0x26>
   1308c:	20000998 	.word	0x20000998

00013090 <baudrate_set>:
#endif
};

static inline NRF_UARTE_Type *get_uarte_instance(const struct device *dev)
{
	const struct uarte_nrfx_config *config = dev->config;
   13090:	6843      	ldr	r3, [r0, #4]

	return config->uarte_regs;
   13092:	681a      	ldr	r2, [r3, #0]
static int baudrate_set(const struct device *dev, uint32_t baudrate)
{
	nrf_uarte_baudrate_t nrf_baudrate; /* calculated baudrate divisor */
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);

	switch (baudrate) {
   13094:	f5b1 4f16 	cmp.w	r1, #38400	; 0x9600
   13098:	d06f      	beq.n	1317a <baudrate_set+0xea>
   1309a:	d83a      	bhi.n	13112 <baudrate_set+0x82>
   1309c:	f5b1 5f16 	cmp.w	r1, #9600	; 0x2580
   130a0:	d06e      	beq.n	13180 <baudrate_set+0xf0>
   130a2:	d90a      	bls.n	130ba <baudrate_set+0x2a>
   130a4:	f5b1 4fe1 	cmp.w	r1, #28800	; 0x7080
   130a8:	d075      	beq.n	13196 <baudrate_set+0x106>
   130aa:	d924      	bls.n	130f6 <baudrate_set+0x66>
   130ac:	f647 2312 	movw	r3, #31250	; 0x7a12
   130b0:	4299      	cmp	r1, r3
   130b2:	d12b      	bne.n	1310c <baudrate_set+0x7c>
		break;
	case 28800:
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
		break;
	case 31250:
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
   130b4:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
   130b8:	e013      	b.n	130e2 <baudrate_set+0x52>
	switch (baudrate) {
   130ba:	f5b1 6f96 	cmp.w	r1, #1200	; 0x4b0
   130be:	d061      	beq.n	13184 <baudrate_set+0xf4>
   130c0:	d907      	bls.n	130d2 <baudrate_set+0x42>
   130c2:	f5b1 6f16 	cmp.w	r1, #2400	; 0x960
   130c6:	d063      	beq.n	13190 <baudrate_set+0x100>
   130c8:	f5b1 5f96 	cmp.w	r1, #4800	; 0x12c0
   130cc:	d110      	bne.n	130f0 <baudrate_set+0x60>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
   130ce:	4b3c      	ldr	r3, [pc, #240]	; (131c0 <baudrate_set+0x130>)
   130d0:	e007      	b.n	130e2 <baudrate_set+0x52>
	switch (baudrate) {
   130d2:	f5b1 7f96 	cmp.w	r1, #300	; 0x12c
   130d6:	d058      	beq.n	1318a <baudrate_set+0xfa>
   130d8:	f5b1 7f16 	cmp.w	r1, #600	; 0x258
   130dc:	d105      	bne.n	130ea <baudrate_set+0x5a>
		nrf_baudrate = 0x00027000;
   130de:	f44f 331c 	mov.w	r3, #159744	; 0x27000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
   130e2:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
		return -EINVAL;
	}

	nrf_uarte_baudrate_set(uarte, nrf_baudrate);

	return 0;
   130e6:	2000      	movs	r0, #0
   130e8:	4770      	bx	lr
	switch (baudrate) {
   130ea:	f06f 0015 	mvn.w	r0, #21
   130ee:	4770      	bx	lr
   130f0:	f06f 0015 	mvn.w	r0, #21
   130f4:	4770      	bx	lr
   130f6:	f5b1 5f61 	cmp.w	r1, #14400	; 0x3840
   130fa:	d04e      	beq.n	1319a <baudrate_set+0x10a>
   130fc:	f5b1 4f96 	cmp.w	r1, #19200	; 0x4b00
   13100:	d101      	bne.n	13106 <baudrate_set+0x76>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
   13102:	4b30      	ldr	r3, [pc, #192]	; (131c4 <baudrate_set+0x134>)
   13104:	e7ed      	b.n	130e2 <baudrate_set+0x52>
	switch (baudrate) {
   13106:	f06f 0015 	mvn.w	r0, #21
   1310a:	4770      	bx	lr
   1310c:	f06f 0015 	mvn.w	r0, #21
   13110:	4770      	bx	lr
   13112:	f5b1 3f61 	cmp.w	r1, #230400	; 0x38400
   13116:	d042      	beq.n	1319e <baudrate_set+0x10e>
   13118:	d909      	bls.n	1312e <baudrate_set+0x9e>
   1311a:	f5b1 2f61 	cmp.w	r1, #921600	; 0xe1000
   1311e:	d046      	beq.n	131ae <baudrate_set+0x11e>
   13120:	d91f      	bls.n	13162 <baudrate_set+0xd2>
   13122:	4b29      	ldr	r3, [pc, #164]	; (131c8 <baudrate_set+0x138>)
   13124:	4299      	cmp	r1, r3
   13126:	d148      	bne.n	131ba <baudrate_set+0x12a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
   13128:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1312c:	e7d9      	b.n	130e2 <baudrate_set+0x52>
	switch (baudrate) {
   1312e:	f5b1 3f96 	cmp.w	r1, #76800	; 0x12c00
   13132:	d037      	beq.n	131a4 <baudrate_set+0x114>
   13134:	d905      	bls.n	13142 <baudrate_set+0xb2>
   13136:	f5b1 3fe1 	cmp.w	r1, #115200	; 0x1c200
   1313a:	d10f      	bne.n	1315c <baudrate_set+0xcc>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
   1313c:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
   13140:	e7cf      	b.n	130e2 <baudrate_set+0x52>
	switch (baudrate) {
   13142:	f64d 23c0 	movw	r3, #56000	; 0xdac0
   13146:	4299      	cmp	r1, r3
   13148:	d02e      	beq.n	131a8 <baudrate_set+0x118>
   1314a:	f5b1 4f61 	cmp.w	r1, #57600	; 0xe100
   1314e:	d102      	bne.n	13156 <baudrate_set+0xc6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
   13150:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
   13154:	e7c5      	b.n	130e2 <baudrate_set+0x52>
	switch (baudrate) {
   13156:	f06f 0015 	mvn.w	r0, #21
   1315a:	4770      	bx	lr
   1315c:	f06f 0015 	mvn.w	r0, #21
   13160:	4770      	bx	lr
   13162:	4b1a      	ldr	r3, [pc, #104]	; (131cc <baudrate_set+0x13c>)
   13164:	4299      	cmp	r1, r3
   13166:	d025      	beq.n	131b4 <baudrate_set+0x124>
   13168:	f5b1 2fe1 	cmp.w	r1, #460800	; 0x70800
   1316c:	d102      	bne.n	13174 <baudrate_set+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
   1316e:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
   13172:	e7b6      	b.n	130e2 <baudrate_set+0x52>
	switch (baudrate) {
   13174:	f06f 0015 	mvn.w	r0, #21
   13178:	4770      	bx	lr
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
   1317a:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
   1317e:	e7b0      	b.n	130e2 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
   13180:	4b13      	ldr	r3, [pc, #76]	; (131d0 <baudrate_set+0x140>)
   13182:	e7ae      	b.n	130e2 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
   13184:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
   13188:	e7ab      	b.n	130e2 <baudrate_set+0x52>
	switch (baudrate) {
   1318a:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
   1318e:	e7a8      	b.n	130e2 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
   13190:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
   13194:	e7a5      	b.n	130e2 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
   13196:	4b0f      	ldr	r3, [pc, #60]	; (131d4 <baudrate_set+0x144>)
   13198:	e7a3      	b.n	130e2 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
   1319a:	4b0f      	ldr	r3, [pc, #60]	; (131d8 <baudrate_set+0x148>)
   1319c:	e7a1      	b.n	130e2 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
   1319e:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
   131a2:	e79e      	b.n	130e2 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
   131a4:	4b0d      	ldr	r3, [pc, #52]	; (131dc <baudrate_set+0x14c>)
   131a6:	e79c      	b.n	130e2 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
   131a8:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
   131ac:	e799      	b.n	130e2 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
   131ae:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   131b2:	e796      	b.n	130e2 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
   131b4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   131b8:	e793      	b.n	130e2 <baudrate_set+0x52>
	switch (baudrate) {
   131ba:	f06f 0015 	mvn.w	r0, #21
}
   131be:	4770      	bx	lr
   131c0:	0013b000 	.word	0x0013b000
   131c4:	004ea000 	.word	0x004ea000
   131c8:	000f4240 	.word	0x000f4240
   131cc:	0003d090 	.word	0x0003d090
   131d0:	00275000 	.word	0x00275000
   131d4:	0075c000 	.word	0x0075c000
   131d8:	003af000 	.word	0x003af000
   131dc:	013a9000 	.word	0x013a9000

000131e0 <uarte_nrfx_poll_out>:
 *
 * @param dev UARTE device struct
 * @param c Character to send
 */
static void uarte_nrfx_poll_out(const struct device *dev, unsigned char c)
{
   131e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   131e4:	4605      	mov	r5, r0
   131e6:	460f      	mov	r7, r1
	struct uarte_nrfx_data *data = dev->data;
   131e8:	f8d0 8010 	ldr.w	r8, [r0, #16]
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   131ec:	f005 ff43 	bl	19076 <k_is_in_isr>
   131f0:	b920      	cbnz	r0, 131fc <uarte_nrfx_poll_out+0x1c>
	return !z_sys_post_kernel;
   131f2:	4b17      	ldr	r3, [pc, #92]	; (13250 <uarte_nrfx_poll_out+0x70>)
   131f4:	781b      	ldrb	r3, [r3, #0]
   131f6:	b143      	cbz	r3, 1320a <uarte_nrfx_poll_out+0x2a>
   131f8:	2300      	movs	r3, #0
   131fa:	e000      	b.n	131fe <uarte_nrfx_poll_out+0x1e>
   131fc:	2301      	movs	r3, #1

		t = now;
	}
#endif

	if (isr_mode) {
   131fe:	b953      	cbnz	r3, 13216 <uarte_nrfx_poll_out+0x36>
			}

			irq_unlock(key);
		}
	} else {
		key = wait_tx_ready(dev);
   13200:	4628      	mov	r0, r5
   13202:	f005 fa60 	bl	186c6 <wait_tx_ready>
   13206:	4606      	mov	r6, r0
   13208:	e013      	b.n	13232 <uarte_nrfx_poll_out+0x52>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   1320a:	2301      	movs	r3, #1
   1320c:	e7f7      	b.n	131fe <uarte_nrfx_poll_out+0x1e>
   1320e:	f384 8811 	msr	BASEPRI, r4
   13212:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   13216:	f04f 0320 	mov.w	r3, #32
   1321a:	f3ef 8411 	mrs	r4, BASEPRI
   1321e:	f383 8812 	msr	BASEPRI_MAX, r3
   13222:	f3bf 8f6f 	isb	sy
   13226:	4626      	mov	r6, r4
			if (is_tx_ready(dev)) {
   13228:	4628      	mov	r0, r5
   1322a:	f005 f9fd 	bl	18628 <is_tx_ready>
   1322e:	2800      	cmp	r0, #0
   13230:	d0ed      	beq.n	1320e <uarte_nrfx_poll_out+0x2e>
	}

	*data->char_out = c;
   13232:	f8d8 3010 	ldr.w	r3, [r8, #16]
   13236:	701f      	strb	r7, [r3, #0]
	tx_start(dev, data->char_out, 1);
   13238:	2201      	movs	r2, #1
   1323a:	f8d8 1010 	ldr.w	r1, [r8, #16]
   1323e:	4628      	mov	r0, r5
   13240:	f005 fa0c 	bl	1865c <tx_start>
	__asm__ volatile(
   13244:	f386 8811 	msr	BASEPRI, r6
   13248:	f3bf 8f6f 	isb	sy

	irq_unlock(key);
}
   1324c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   13250:	200010c3 	.word	0x200010c3

00013254 <endtx_stoptx_ppi_init>:
#endif /* UARTE_INTERRUPT_DRIVEN */
};

static int endtx_stoptx_ppi_init(NRF_UARTE_Type *uarte,
				 struct uarte_nrfx_data *data)
{
   13254:	b538      	push	{r3, r4, r5, lr}
   13256:	4604      	mov	r4, r0
   13258:	460d      	mov	r5, r1
	nrfx_err_t ret;

	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
   1325a:	f101 0018 	add.w	r0, r1, #24
   1325e:	f001 fbbd 	bl	149dc <nrfx_ppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
   13262:	4b0c      	ldr	r3, [pc, #48]	; (13294 <endtx_stoptx_ppi_init+0x40>)
   13264:	4298      	cmp	r0, r3
   13266:	d111      	bne.n	1328c <endtx_stoptx_ppi_init+0x38>
		LOG_ERR("Failed to allocate PPI Channel");
		return -EIO;
	}

	nrfx_gppi_channel_endpoints_setup(data->ppi_ch_endtx,
   13268:	7e2b      	ldrb	r3, [r5, #24]
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
   1326a:	f504 7190 	add.w	r1, r4, #288	; 0x120
    return (uint32_t)p_reg + (uint32_t)task;
   1326e:	340c      	adds	r4, #12
NRF_STATIC_INLINE void nrf_ppi_channel_endpoint_setup(NRF_PPI_Type *    p_reg,
                                                      nrf_ppi_channel_t channel,
                                                      uint32_t          eep,
                                                      uint32_t          tep)
{
    p_reg->CH[(uint32_t) channel].EEP = eep;
   13270:	4a09      	ldr	r2, [pc, #36]	; (13298 <endtx_stoptx_ppi_init+0x44>)
   13272:	33a2      	adds	r3, #162	; 0xa2
   13274:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
    p_reg->CH[(uint32_t) channel].TEP = tep;
   13278:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   1327c:	605c      	str	r4, [r3, #4]
		nrf_uarte_event_address_get(uarte, NRF_UARTE_EVENT_ENDTX),
		nrf_uarte_task_address_get(uarte, NRF_UARTE_TASK_STOPTX));
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
   1327e:	7e29      	ldrb	r1, [r5, #24]
   13280:	2301      	movs	r3, #1
   13282:	408b      	lsls	r3, r1
    p_reg->CHENSET = mask;
   13284:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504

	return 0;
   13288:	2000      	movs	r0, #0
}
   1328a:	bd38      	pop	{r3, r4, r5, pc}
		return -EIO;
   1328c:	f06f 0004 	mvn.w	r0, #4
   13290:	e7fb      	b.n	1328a <endtx_stoptx_ppi_init+0x36>
   13292:	bf00      	nop
   13294:	0bad0000 	.word	0x0bad0000
   13298:	4001f000 	.word	0x4001f000

0001329c <set_comparator>:
	return (a - b) & COUNTER_MAX;
}

static void set_comparator(int32_t chan, uint32_t cyc)
{
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
   1329c:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE  void nrf_rtc_cc_set(NRF_RTC_Type * p_reg, uint32_t ch, uint32_t cc_val)
{
    p_reg->CC[ch] = cc_val;
   132a0:	f500 70a8 	add.w	r0, r0, #336	; 0x150
   132a4:	4b01      	ldr	r3, [pc, #4]	; (132ac <set_comparator+0x10>)
   132a6:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
}
   132aa:	4770      	bx	lr
   132ac:	40011000 	.word	0x40011000

000132b0 <get_comparator>:
}

NRF_STATIC_INLINE  uint32_t nrf_rtc_cc_get(NRF_RTC_Type const * p_reg, uint32_t ch)
{
    return p_reg->CC[ch];
   132b0:	f500 70a8 	add.w	r0, r0, #336	; 0x150
   132b4:	4b01      	ldr	r3, [pc, #4]	; (132bc <get_comparator+0xc>)
   132b6:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]

static uint32_t get_comparator(int32_t chan)
{
	return nrf_rtc_cc_get(RTC, chan);
}
   132ba:	4770      	bx	lr
   132bc:	40011000 	.word	0x40011000

000132c0 <event_enable>:
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
}

static void event_enable(int32_t chan)
{
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   132c0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   132c4:	4083      	lsls	r3, r0
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
   132c6:	4a02      	ldr	r2, [pc, #8]	; (132d0 <event_enable+0x10>)
   132c8:	f8c2 3344 	str.w	r3, [r2, #836]	; 0x344
}
   132cc:	4770      	bx	lr
   132ce:	bf00      	nop
   132d0:	40011000 	.word	0x40011000

000132d4 <event_disable>:

static void event_disable(int32_t chan)
{
	nrf_rtc_event_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
   132d4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   132d8:	4083      	lsls	r3, r0
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
   132da:	4a02      	ldr	r2, [pc, #8]	; (132e4 <event_disable+0x10>)
   132dc:	f8c2 3348 	str.w	r3, [r2, #840]	; 0x348
}
   132e0:	4770      	bx	lr
   132e2:	bf00      	nop
   132e4:	40011000 	.word	0x40011000

000132e8 <counter>:
     return p_reg->COUNTER;
   132e8:	4b01      	ldr	r3, [pc, #4]	; (132f0 <counter+0x8>)
   132ea:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504

static uint32_t counter(void)
{
	return nrf_rtc_counter_get(RTC);
}
   132ee:	4770      	bx	lr
   132f0:	40011000 	.word	0x40011000

000132f4 <compare_int_lock>:
	return 0;
#endif
}

static bool compare_int_lock(int32_t chan)
{
   132f4:	b510      	push	{r4, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
   132f6:	2301      	movs	r3, #1
   132f8:	4083      	lsls	r3, r0
   132fa:	ea6f 0c03 	mvn.w	ip, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   132fe:	4a10      	ldr	r2, [pc, #64]	; (13340 <compare_int_lock+0x4c>)
   13300:	f3bf 8f5b 	dmb	ish
   13304:	e852 1f00 	ldrex	r1, [r2]
   13308:	ea01 0e0c 	and.w	lr, r1, ip
   1330c:	e842 e400 	strex	r4, lr, [r2]
   13310:	2c00      	cmp	r4, #0
   13312:	d1f7      	bne.n	13304 <compare_int_lock+0x10>
   13314:	f3bf 8f5b 	dmb	ish

	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
   13318:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   1331c:	fa02 f000 	lsl.w	r0, r2, r0
    p_reg->INTENCLR = mask;
   13320:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   13324:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
   13328:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
  __ASM volatile ("dmb 0xF":::"memory");
   1332c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
   13330:	f3bf 8f6f 	isb	sy

	__DMB();
	__ISB();

	return prev & BIT(chan);
   13334:	420b      	tst	r3, r1
}
   13336:	bf14      	ite	ne
   13338:	2001      	movne	r0, #1
   1333a:	2000      	moveq	r0, #0
   1333c:	bd10      	pop	{r4, pc}
   1333e:	bf00      	nop
   13340:	200009ac 	.word	0x200009ac

00013344 <channel_processing_check_and_clear>:
		event_enable(chan);
	}
}

static bool channel_processing_check_and_clear(int32_t chan)
{
   13344:	b570      	push	{r4, r5, r6, lr}
   13346:	4604      	mov	r4, r0
	bool result = false;

	uint32_t mcu_critical_state = full_int_lock();
   13348:	f005 fa77 	bl	1883a <full_int_lock>
   1334c:	4605      	mov	r5, r0

	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
   1334e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   13352:	40a3      	lsls	r3, r4
    return p_reg->INTENSET & mask;
   13354:	4a17      	ldr	r2, [pc, #92]	; (133b4 <channel_processing_check_and_clear+0x70>)
   13356:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
   1335a:	4213      	tst	r3, r2
   1335c:	d105      	bne.n	1336a <channel_processing_check_and_clear+0x26>
	bool result = false;
   1335e:	2600      	movs	r6, #0
		if (result) {
			event_clear(chan);
		}
	}

	full_int_unlock(mcu_critical_state);
   13360:	4628      	mov	r0, r5
   13362:	f005 fa73 	bl	1884c <full_int_unlock>

	return result;
}
   13366:	4630      	mov	r0, r6
   13368:	bd70      	pop	{r4, r5, r6, pc}
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
   1336a:	2301      	movs	r3, #1
   1336c:	40a3      	lsls	r3, r4
   1336e:	43db      	mvns	r3, r3
   13370:	4a11      	ldr	r2, [pc, #68]	; (133b8 <channel_processing_check_and_clear+0x74>)
   13372:	f3bf 8f5b 	dmb	ish
   13376:	e852 1f00 	ldrex	r1, [r2]
   1337a:	ea01 0003 	and.w	r0, r1, r3
   1337e:	e842 0600 	strex	r6, r0, [r2]
   13382:	2e00      	cmp	r6, #0
   13384:	d1f7      	bne.n	13376 <channel_processing_check_and_clear+0x32>
   13386:	f3bf 8f5b 	dmb	ish
   1338a:	b959      	cbnz	r1, 133a4 <channel_processing_check_and_clear+0x60>
			 nrf_rtc_event_check(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
   1338c:	f104 0350 	add.w	r3, r4, #80	; 0x50
   13390:	009b      	lsls	r3, r3, #2
   13392:	b29b      	uxth	r3, r3
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   13394:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   13398:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
   1339c:	681b      	ldr	r3, [r3, #0]
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
   1339e:	b113      	cbz	r3, 133a6 <channel_processing_check_and_clear+0x62>
   133a0:	2301      	movs	r3, #1
   133a2:	e000      	b.n	133a6 <channel_processing_check_and_clear+0x62>
   133a4:	2301      	movs	r3, #1
		if (result) {
   133a6:	461e      	mov	r6, r3
   133a8:	2b00      	cmp	r3, #0
   133aa:	d0d9      	beq.n	13360 <channel_processing_check_and_clear+0x1c>
			event_clear(chan);
   133ac:	4620      	mov	r0, r4
   133ae:	f005 fa35 	bl	1881c <event_clear>
   133b2:	e7d5      	b.n	13360 <channel_processing_check_and_clear+0x1c>
   133b4:	40011000 	.word	0x40011000
   133b8:	200009a8 	.word	0x200009a8

000133bc <compare_int_unlock>:
	if (key) {
   133bc:	b901      	cbnz	r1, 133c0 <compare_int_unlock+0x4>
}
   133be:	4770      	bx	lr
		atomic_or(&int_mask, BIT(chan));
   133c0:	2301      	movs	r3, #1
   133c2:	4083      	lsls	r3, r0
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   133c4:	4a11      	ldr	r2, [pc, #68]	; (1340c <compare_int_unlock+0x50>)
   133c6:	f3bf 8f5b 	dmb	ish
   133ca:	e852 1f00 	ldrex	r1, [r2]
   133ce:	4319      	orrs	r1, r3
   133d0:	e842 1c00 	strex	ip, r1, [r2]
   133d4:	f1bc 0f00 	cmp.w	ip, #0
   133d8:	d1f7      	bne.n	133ca <compare_int_unlock+0xe>
   133da:	f3bf 8f5b 	dmb	ish
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   133de:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   133e2:	4083      	lsls	r3, r0
    p_reg->INTENSET = mask;
   133e4:	4a0a      	ldr	r2, [pc, #40]	; (13410 <compare_int_unlock+0x54>)
   133e6:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   133ea:	f3bf 8f5b 	dmb	ish
   133ee:	4b09      	ldr	r3, [pc, #36]	; (13414 <compare_int_unlock+0x58>)
   133f0:	681b      	ldr	r3, [r3, #0]
   133f2:	f3bf 8f5b 	dmb	ish
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
   133f6:	fa23 f000 	lsr.w	r0, r3, r0
   133fa:	f010 0f01 	tst.w	r0, #1
   133fe:	d0de      	beq.n	133be <compare_int_unlock+0x2>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   13400:	4b05      	ldr	r3, [pc, #20]	; (13418 <compare_int_unlock+0x5c>)
   13402:	f44f 3200 	mov.w	r2, #131072	; 0x20000
   13406:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
   1340a:	e7d8      	b.n	133be <compare_int_unlock+0x2>
   1340c:	200009ac 	.word	0x200009ac
   13410:	40011000 	.word	0x40011000
   13414:	200009a8 	.word	0x200009a8
   13418:	e000e100 	.word	0xe000e100

0001341c <sys_clock_timeout_handler>:
{
   1341c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   13420:	4607      	mov	r7, r0
   13422:	4614      	mov	r4, r2
   13424:	461e      	mov	r6, r3
	uint32_t cc_value = absolute_time_to_cc(expire_time);
   13426:	4610      	mov	r0, r2
   13428:	4619      	mov	r1, r3
   1342a:	f005 fa03 	bl	18834 <absolute_time_to_cc>
   1342e:	4605      	mov	r5, r0
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
   13430:	4b15      	ldr	r3, [pc, #84]	; (13488 <sys_clock_timeout_handler+0x6c>)
   13432:	681a      	ldr	r2, [r3, #0]
   13434:	1aa0      	subs	r0, r4, r2
	last_count += dticks * CYC_PER_TICK;
   13436:	601c      	str	r4, [r3, #0]
   13438:	605e      	str	r6, [r3, #4]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
   1343a:	f5a5 1300 	sub.w	r3, r5, #2097152	; 0x200000
	if (in_anchor_range(cc_value)) {
   1343e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
   13442:	d309      	bcc.n	13458 <sys_clock_timeout_handler+0x3c>
	return false;
   13444:	2400      	movs	r4, #0
	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
   13446:	f002 ff4b 	bl	162e0 <sys_clock_announce>
	if (cc_value == get_comparator(chan)) {
   1344a:	4638      	mov	r0, r7
   1344c:	f7ff ff30 	bl	132b0 <get_comparator>
   13450:	42a8      	cmp	r0, r5
   13452:	d00e      	beq.n	13472 <sys_clock_timeout_handler+0x56>
}
   13454:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
   13458:	4b0c      	ldr	r3, [pc, #48]	; (1348c <sys_clock_timeout_handler+0x70>)
   1345a:	681b      	ldr	r3, [r3, #0]
   1345c:	0a1a      	lsrs	r2, r3, #8
   1345e:	061b      	lsls	r3, r3, #24
   13460:	eb15 0803 	adds.w	r8, r5, r3
   13464:	f142 0900 	adc.w	r9, r2, #0
   13468:	4b09      	ldr	r3, [pc, #36]	; (13490 <sys_clock_timeout_handler+0x74>)
   1346a:	e9c3 8900 	strd	r8, r9, [r3]
		return true;
   1346e:	2401      	movs	r4, #1
   13470:	e7e9      	b.n	13446 <sys_clock_timeout_handler+0x2a>
		if (!anchor_updated) {
   13472:	b11c      	cbz	r4, 1347c <sys_clock_timeout_handler+0x60>
		event_enable(chan);
   13474:	4638      	mov	r0, r7
   13476:	f7ff ff23 	bl	132c0 <event_enable>
}
   1347a:	e7eb      	b.n	13454 <sys_clock_timeout_handler+0x38>
			set_comparator(chan, COUNTER_HALF_SPAN);
   1347c:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
   13480:	4638      	mov	r0, r7
   13482:	f7ff ff0b 	bl	1329c <set_comparator>
   13486:	e7f5      	b.n	13474 <sys_clock_timeout_handler+0x58>
   13488:	20000238 	.word	0x20000238
   1348c:	200009b0 	.word	0x200009b0
   13490:	20000220 	.word	0x20000220

00013494 <z_nrf_rtc_timer_read>:
{
   13494:	b538      	push	{r3, r4, r5, lr}
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
   13496:	4b0d      	ldr	r3, [pc, #52]	; (134cc <z_nrf_rtc_timer_read+0x38>)
   13498:	681c      	ldr	r4, [r3, #0]
   1349a:	0a25      	lsrs	r5, r4, #8
   1349c:	0624      	lsls	r4, r4, #24
  __ASM volatile ("dmb 0xF":::"memory");
   1349e:	f3bf 8f5f 	dmb	sy
	uint32_t cntr = counter();
   134a2:	f7ff ff21 	bl	132e8 <counter>
   134a6:	4603      	mov	r3, r0
	val += cntr;
   134a8:	1900      	adds	r0, r0, r4
   134aa:	f145 0100 	adc.w	r1, r5, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
   134ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   134b2:	d20a      	bcs.n	134ca <z_nrf_rtc_timer_read+0x36>
		if (val < anchor) {
   134b4:	4b06      	ldr	r3, [pc, #24]	; (134d0 <z_nrf_rtc_timer_read+0x3c>)
   134b6:	e9d3 2300 	ldrd	r2, r3, [r3]
   134ba:	4290      	cmp	r0, r2
   134bc:	eb71 0303 	sbcs.w	r3, r1, r3
   134c0:	d203      	bcs.n	134ca <z_nrf_rtc_timer_read+0x36>
			val += COUNTER_SPAN;
   134c2:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
   134c6:	f141 0100 	adc.w	r1, r1, #0
}
   134ca:	bd38      	pop	{r3, r4, r5, pc}
   134cc:	200009b0 	.word	0x200009b0
   134d0:	20000220 	.word	0x20000220

000134d4 <compare_set_nolocks>:
{
   134d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   134d6:	4606      	mov	r6, r0
   134d8:	4614      	mov	r4, r2
   134da:	461d      	mov	r5, r3
	uint32_t cc_value = absolute_time_to_cc(target_time);
   134dc:	4610      	mov	r0, r2
   134de:	4619      	mov	r1, r3
   134e0:	f005 f9a8 	bl	18834 <absolute_time_to_cc>
   134e4:	4607      	mov	r7, r0
	uint64_t curr_time = z_nrf_rtc_timer_read();
   134e6:	f7ff ffd5 	bl	13494 <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
   134ea:	42a0      	cmp	r0, r4
   134ec:	eb71 0305 	sbcs.w	r3, r1, r5
   134f0:	d21d      	bcs.n	1352e <compare_set_nolocks+0x5a>
		if (target_time - curr_time > COUNTER_SPAN) {
   134f2:	1a23      	subs	r3, r4, r0
   134f4:	eb65 0101 	sbc.w	r1, r5, r1
   134f8:	4a1b      	ldr	r2, [pc, #108]	; (13568 <compare_set_nolocks+0x94>)
   134fa:	4293      	cmp	r3, r2
   134fc:	f171 0300 	sbcs.w	r3, r1, #0
   13500:	d22f      	bcs.n	13562 <compare_set_nolocks+0x8e>
		if (target_time != cc_data[chan].target_time) {
   13502:	4b1a      	ldr	r3, [pc, #104]	; (1356c <compare_set_nolocks+0x98>)
   13504:	eb03 1306 	add.w	r3, r3, r6, lsl #4
   13508:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
   1350c:	42ab      	cmp	r3, r5
   1350e:	bf08      	it	eq
   13510:	42a2      	cmpeq	r2, r4
   13512:	d01a      	beq.n	1354a <compare_set_nolocks+0x76>
			uint32_t cc_set = set_absolute_alarm(chan, cc_value);
   13514:	4639      	mov	r1, r7
   13516:	4630      	mov	r0, r6
   13518:	f005 f99d 	bl	18856 <set_absolute_alarm>
			target_time += counter_sub(cc_set, cc_value);
   1351c:	4639      	mov	r1, r7
   1351e:	f005 f979 	bl	18814 <counter_sub>
   13522:	1900      	adds	r0, r0, r4
   13524:	f145 0300 	adc.w	r3, r5, #0
   13528:	4604      	mov	r4, r0
   1352a:	461d      	mov	r5, r3
   1352c:	e00d      	b.n	1354a <compare_set_nolocks+0x76>
		atomic_or(&force_isr_mask, BIT(chan));
   1352e:	2301      	movs	r3, #1
   13530:	40b3      	lsls	r3, r6
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   13532:	4a0f      	ldr	r2, [pc, #60]	; (13570 <compare_set_nolocks+0x9c>)
   13534:	f3bf 8f5b 	dmb	ish
   13538:	e852 1f00 	ldrex	r1, [r2]
   1353c:	4319      	orrs	r1, r3
   1353e:	e842 1000 	strex	r0, r1, [r2]
   13542:	2800      	cmp	r0, #0
   13544:	d1f8      	bne.n	13538 <compare_set_nolocks+0x64>
   13546:	f3bf 8f5b 	dmb	ish
	cc_data[chan].target_time = target_time;
   1354a:	4b08      	ldr	r3, [pc, #32]	; (1356c <compare_set_nolocks+0x98>)
   1354c:	0132      	lsls	r2, r6, #4
   1354e:	eb03 1606 	add.w	r6, r3, r6, lsl #4
   13552:	e9c6 4502 	strd	r4, r5, [r6, #8]
	cc_data[chan].callback = handler;
   13556:	9906      	ldr	r1, [sp, #24]
   13558:	5099      	str	r1, [r3, r2]
	cc_data[chan].user_context = user_data;
   1355a:	9b07      	ldr	r3, [sp, #28]
   1355c:	6073      	str	r3, [r6, #4]
	return ret;
   1355e:	2000      	movs	r0, #0
}
   13560:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return -EINVAL;
   13562:	f06f 0015 	mvn.w	r0, #21
   13566:	e7fb      	b.n	13560 <compare_set_nolocks+0x8c>
   13568:	01000001 	.word	0x01000001
   1356c:	20000228 	.word	0x20000228
   13570:	200009a8 	.word	0x200009a8

00013574 <sys_clock_driver_init>:
{
	return (uint32_t)z_nrf_rtc_timer_read();
}

static int sys_clock_driver_init(const struct device *dev)
{
   13574:	b530      	push	{r4, r5, lr}
   13576:	b083      	sub	sp, #12
    p_reg->PRESCALER = val;
   13578:	2300      	movs	r3, #0
   1357a:	4a1d      	ldr	r2, [pc, #116]	; (135f0 <sys_clock_driver_init+0x7c>)
   1357c:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			CLOCK_CONTROL_NRF_LF_START_AVAILABLE :
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
   13580:	2b00      	cmp	r3, #0
   13582:	dd24      	ble.n	135ce <sys_clock_driver_init+0x5a>
    p_reg->INTENSET = mask;
   13584:	4c1a      	ldr	r4, [pc, #104]	; (135f0 <sys_clock_driver_init+0x7c>)
   13586:	2502      	movs	r5, #2
   13588:	f8c4 5304 	str.w	r5, [r4, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1358c:	4b19      	ldr	r3, [pc, #100]	; (135f4 <sys_clock_driver_init+0x80>)
   1358e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
   13592:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
   13596:	2200      	movs	r2, #0
   13598:	2101      	movs	r1, #1
   1359a:	2011      	movs	r0, #17
   1359c:	f7fe fa58 	bl	11a50 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
   135a0:	2011      	movs	r0, #17
   135a2:	f7fe fa25 	bl	119f0 <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   135a6:	2301      	movs	r3, #1
   135a8:	60a3      	str	r3, [r4, #8]
   135aa:	6023      	str	r3, [r4, #0]

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
   135ac:	4a12      	ldr	r2, [pc, #72]	; (135f8 <sys_clock_driver_init+0x84>)
   135ae:	6013      	str	r3, [r2, #0]

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		(COUNTER_HALF_SPAN - 1) :
		(counter() + CYC_PER_TICK);

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
   135b0:	2400      	movs	r4, #0
   135b2:	9401      	str	r4, [sp, #4]
   135b4:	4b11      	ldr	r3, [pc, #68]	; (135fc <sys_clock_driver_init+0x88>)
   135b6:	9300      	str	r3, [sp, #0]
   135b8:	4a11      	ldr	r2, [pc, #68]	; (13600 <sys_clock_driver_init+0x8c>)
   135ba:	2300      	movs	r3, #0
   135bc:	4620      	mov	r0, r4
   135be:	f005 f985 	bl	188cc <compare_set>

	z_nrf_clock_control_lf_on(mode);
   135c2:	4628      	mov	r0, r5
   135c4:	f7fe ff88 	bl	124d8 <z_nrf_clock_control_lf_on>

	return 0;
}
   135c8:	4620      	mov	r0, r4
   135ca:	b003      	add	sp, #12
   135cc:	bd30      	pop	{r4, r5, pc}
		cc_data[chan].target_time = TARGET_TIME_INVALID;
   135ce:	4a0d      	ldr	r2, [pc, #52]	; (13604 <sys_clock_driver_init+0x90>)
   135d0:	eb02 1203 	add.w	r2, r2, r3, lsl #4
   135d4:	f04f 30ff 	mov.w	r0, #4294967295
   135d8:	f04f 31ff 	mov.w	r1, #4294967295
   135dc:	e9c2 0102 	strd	r0, r1, [r2, #8]
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   135e0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   135e4:	409a      	lsls	r2, r3
    p_reg->INTENSET = mask;
   135e6:	4902      	ldr	r1, [pc, #8]	; (135f0 <sys_clock_driver_init+0x7c>)
   135e8:	f8c1 2304 	str.w	r2, [r1, #772]	; 0x304
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
   135ec:	3301      	adds	r3, #1
   135ee:	e7c7      	b.n	13580 <sys_clock_driver_init+0xc>
   135f0:	40011000 	.word	0x40011000
   135f4:	e000e100 	.word	0xe000e100
   135f8:	200009ac 	.word	0x200009ac
   135fc:	0001341d 	.word	0x0001341d
   13600:	007fffff 	.word	0x007fffff
   13604:	20000228 	.word	0x20000228

00013608 <process_channel>:
{
   13608:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1360c:	b082      	sub	sp, #8
   1360e:	4604      	mov	r4, r0
	if (channel_processing_check_and_clear(chan)) {
   13610:	f7ff fe98 	bl	13344 <channel_processing_check_and_clear>
   13614:	b910      	cbnz	r0, 1361c <process_channel+0x14>
}
   13616:	b002      	add	sp, #8
   13618:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		curr_time = z_nrf_rtc_timer_read();
   1361c:	f7ff ff3a 	bl	13494 <z_nrf_rtc_timer_read>
   13620:	4682      	mov	sl, r0
   13622:	460e      	mov	r6, r1
		mcu_critical_state = full_int_lock();
   13624:	f005 f909 	bl	1883a <full_int_lock>
   13628:	4605      	mov	r5, r0
		expire_time = cc_data[chan].target_time;
   1362a:	4b13      	ldr	r3, [pc, #76]	; (13678 <process_channel+0x70>)
   1362c:	eb03 1304 	add.w	r3, r3, r4, lsl #4
   13630:	e9d3 8902 	ldrd	r8, r9, [r3, #8]
		if (curr_time >= expire_time) {
   13634:	45c2      	cmp	sl, r8
   13636:	eb76 0309 	sbcs.w	r3, r6, r9
   1363a:	d20b      	bcs.n	13654 <process_channel+0x4c>
		z_nrf_rtc_timer_compare_handler_t handler = NULL;
   1363c:	2600      	movs	r6, #0
		full_int_unlock(mcu_critical_state);
   1363e:	4628      	mov	r0, r5
   13640:	f005 f904 	bl	1884c <full_int_unlock>
		if (handler) {
   13644:	2e00      	cmp	r6, #0
   13646:	d0e6      	beq.n	13616 <process_channel+0xe>
			handler(chan, expire_time, user_context);
   13648:	9700      	str	r7, [sp, #0]
   1364a:	4642      	mov	r2, r8
   1364c:	464b      	mov	r3, r9
   1364e:	4620      	mov	r0, r4
   13650:	47b0      	blx	r6
}
   13652:	e7e0      	b.n	13616 <process_channel+0xe>
			handler = cc_data[chan].callback;
   13654:	4a08      	ldr	r2, [pc, #32]	; (13678 <process_channel+0x70>)
   13656:	0123      	lsls	r3, r4, #4
   13658:	eb02 1104 	add.w	r1, r2, r4, lsl #4
   1365c:	58d6      	ldr	r6, [r2, r3]
			user_context = cc_data[chan].user_context;
   1365e:	684f      	ldr	r7, [r1, #4]
			cc_data[chan].callback = NULL;
   13660:	2000      	movs	r0, #0
   13662:	50d0      	str	r0, [r2, r3]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
   13664:	f04f 32ff 	mov.w	r2, #4294967295
   13668:	f04f 33ff 	mov.w	r3, #4294967295
   1366c:	e9c1 2302 	strd	r2, r3, [r1, #8]
			event_disable(chan);
   13670:	4620      	mov	r0, r4
   13672:	f7ff fe2f 	bl	132d4 <event_disable>
   13676:	e7e2      	b.n	1363e <process_channel+0x36>
   13678:	20000228 	.word	0x20000228

0001367c <rtc_nrf_isr>:
{
   1367c:	b510      	push	{r4, lr}
    return p_reg->INTENSET & mask;
   1367e:	4b0e      	ldr	r3, [pc, #56]	; (136b8 <rtc_nrf_isr+0x3c>)
   13680:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
   13684:	f013 0f02 	tst.w	r3, #2
   13688:	d00d      	beq.n	136a6 <rtc_nrf_isr+0x2a>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1368a:	4b0b      	ldr	r3, [pc, #44]	; (136b8 <rtc_nrf_isr+0x3c>)
   1368c:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
   13690:	b14b      	cbz	r3, 136a6 <rtc_nrf_isr+0x2a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   13692:	4b09      	ldr	r3, [pc, #36]	; (136b8 <rtc_nrf_isr+0x3c>)
   13694:	2200      	movs	r2, #0
   13696:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
   1369a:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
		overflow_cnt++;
   1369e:	4a07      	ldr	r2, [pc, #28]	; (136bc <rtc_nrf_isr+0x40>)
   136a0:	6813      	ldr	r3, [r2, #0]
   136a2:	3301      	adds	r3, #1
   136a4:	6013      	str	r3, [r2, #0]
{
   136a6:	2400      	movs	r4, #0
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
   136a8:	2c00      	cmp	r4, #0
   136aa:	dd00      	ble.n	136ae <rtc_nrf_isr+0x32>
}
   136ac:	bd10      	pop	{r4, pc}
		process_channel(chan);
   136ae:	4620      	mov	r0, r4
   136b0:	f7ff ffaa 	bl	13608 <process_channel>
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
   136b4:	3401      	adds	r4, #1
   136b6:	e7f7      	b.n	136a8 <rtc_nrf_isr+0x2c>
   136b8:	40011000 	.word	0x40011000
   136bc:	200009b0 	.word	0x200009b0

000136c0 <sys_clock_set_timeout>:
{
   136c0:	b510      	push	{r4, lr}
   136c2:	b082      	sub	sp, #8
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   136c4:	f1b0 3fff 	cmp.w	r0, #4294967295
   136c8:	d006      	beq.n	136d8 <sys_clock_set_timeout+0x18>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
   136ca:	2801      	cmp	r0, #1
   136cc:	dd06      	ble.n	136dc <sys_clock_set_timeout+0x1c>
   136ce:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   136d2:	da05      	bge.n	136e0 <sys_clock_set_timeout+0x20>
   136d4:	1e44      	subs	r4, r0, #1
   136d6:	e004      	b.n	136e2 <sys_clock_set_timeout+0x22>
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   136d8:	480f      	ldr	r0, [pc, #60]	; (13718 <sys_clock_set_timeout+0x58>)
   136da:	e7f8      	b.n	136ce <sys_clock_set_timeout+0xe>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
   136dc:	2400      	movs	r4, #0
   136de:	e000      	b.n	136e2 <sys_clock_set_timeout+0x22>
   136e0:	4c0d      	ldr	r4, [pc, #52]	; (13718 <sys_clock_set_timeout+0x58>)
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
   136e2:	f7ff fed7 	bl	13494 <z_nrf_rtc_timer_read>
   136e6:	4b0d      	ldr	r3, [pc, #52]	; (1371c <sys_clock_set_timeout+0x5c>)
   136e8:	6819      	ldr	r1, [r3, #0]
   136ea:	685b      	ldr	r3, [r3, #4]
   136ec:	1a40      	subs	r0, r0, r1
	if (unannounced >= COUNTER_HALF_SPAN) {
   136ee:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   136f2:	d300      	bcc.n	136f6 <sys_clock_set_timeout+0x36>
		ticks = 0;
   136f4:	2400      	movs	r4, #0
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
   136f6:	4420      	add	r0, r4
   136f8:	1c42      	adds	r2, r0, #1
	if (cyc > MAX_CYCLES) {
   136fa:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
   136fe:	d300      	bcc.n	13702 <sys_clock_set_timeout+0x42>
		cyc = MAX_CYCLES;
   13700:	4a05      	ldr	r2, [pc, #20]	; (13718 <sys_clock_set_timeout+0x58>)
	uint64_t target_time = cyc + last_count;
   13702:	2000      	movs	r0, #0
   13704:	188a      	adds	r2, r1, r2
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
   13706:	9001      	str	r0, [sp, #4]
   13708:	4905      	ldr	r1, [pc, #20]	; (13720 <sys_clock_set_timeout+0x60>)
   1370a:	9100      	str	r1, [sp, #0]
   1370c:	f143 0300 	adc.w	r3, r3, #0
   13710:	f005 f8dc 	bl	188cc <compare_set>
}
   13714:	b002      	add	sp, #8
   13716:	bd10      	pop	{r4, pc}
   13718:	007fffff 	.word	0x007fffff
   1371c:	20000238 	.word	0x20000238
   13720:	0001341d 	.word	0x0001341d

00013724 <sys_clock_elapsed>:
{
   13724:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
   13726:	f7ff feb5 	bl	13494 <z_nrf_rtc_timer_read>
   1372a:	4b02      	ldr	r3, [pc, #8]	; (13734 <sys_clock_elapsed+0x10>)
   1372c:	681b      	ldr	r3, [r3, #0]
}
   1372e:	1ac0      	subs	r0, r0, r3
   13730:	bd08      	pop	{r3, pc}
   13732:	bf00      	nop
   13734:	20000238 	.word	0x20000238

00013738 <nrf_pin_configure>:
 */
__unused static void nrf_pin_configure(pinctrl_soc_pin_t pin,
				       nrf_gpio_pin_dir_t dir,
				       nrf_gpio_pin_input_t input,
				       nrf_gpio_pin_drive_t drive)
{
   13738:	b500      	push	{lr}
	/* force input direction and disconnected buffer for low power */
	if (NRF_GET_LP(pin) == NRF_LP_ENABLE) {
   1373a:	f410 5f80 	tst.w	r0, #4096	; 0x1000
   1373e:	d001      	beq.n	13744 <nrf_pin_configure+0xc>
		dir = NRF_GPIO_PIN_DIR_INPUT;
		input = NRF_GPIO_PIN_INPUT_DISCONNECT;
   13740:	2201      	movs	r2, #1
		dir = NRF_GPIO_PIN_DIR_INPUT;
   13742:	2100      	movs	r1, #0
	}

	nrf_gpio_cfg(NRF_GET_PIN(pin), dir, input, NRF_GET_PULL(pin), drive,
   13744:	f3c0 1e81 	ubfx	lr, r0, #6, #2
    *p_pin = pin_number & 0x1F;
   13748:	f000 0c1f 	and.w	ip, r0, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1374c:	f010 0f20 	tst.w	r0, #32
   13750:	d10d      	bne.n	1376e <nrf_pin_configure+0x36>
        case 0: return NRF_P0;
   13752:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
   13756:	ea41 0142 	orr.w	r1, r1, r2, lsl #1
           ((uint32_t)input << GPIO_PIN_CNF_INPUT_Pos) |
   1375a:	ea41 018e 	orr.w	r1, r1, lr, lsl #2
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   1375e:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
    reg->PIN_CNF[pin_number] = cnf;
   13762:	f50c 73e0 	add.w	r3, ip, #448	; 0x1c0
   13766:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
		     NRF_GPIO_PIN_NOSENSE);
}
   1376a:	f85d fb04 	ldr.w	pc, [sp], #4
        case 1: return NRF_P1;
   1376e:	4801      	ldr	r0, [pc, #4]	; (13774 <nrf_pin_configure+0x3c>)
   13770:	e7f1      	b.n	13756 <nrf_pin_configure+0x1e>
   13772:	bf00      	nop
   13774:	50000300 	.word	0x50000300

00013778 <pinctrl_configure_pins>:

int pinctrl_configure_pins(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt,
			   uintptr_t reg)
{
   13778:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1377c:	4606      	mov	r6, r0
   1377e:	460f      	mov	r7, r1
   13780:	4690      	mov	r8, r2
	for (uint8_t i = 0U; i < pin_cnt; i++) {
   13782:	2400      	movs	r4, #0
   13784:	e017      	b.n	137b6 <pinctrl_configure_pins+0x3e>
		__unused nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);

		switch (NRF_GET_FUN(pins[i])) {
#if defined(NRF_PSEL_UART)
		case NRF_FUN_UART_TX:
			NRF_PSEL_UART(reg, TXD) = NRF_GET_PIN(pins[i]);
   13786:	f005 053f 	and.w	r5, r5, #63	; 0x3f
   1378a:	f8c8 550c 	str.w	r5, [r8, #1292]	; 0x50c
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]), 1);
   1378e:	f856 1024 	ldr.w	r1, [r6, r4, lsl #2]
    *p_pin = pin_number & 0x1F;
   13792:	f001 021f 	and.w	r2, r1, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   13796:	f011 0f20 	tst.w	r1, #32
   1379a:	d161      	bne.n	13860 <pinctrl_configure_pins+0xe8>
        case 0: return NRF_P0;
   1379c:	f04f 45a0 	mov.w	r5, #1342177280	; 0x50000000
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   137a0:	2101      	movs	r1, #1
   137a2:	fa01 f202 	lsl.w	r2, r1, r2
    p_reg->OUTSET = set_mask;
   137a6:	f8c5 2508 	str.w	r2, [r5, #1288]	; 0x508
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
   137aa:	460a      	mov	r2, r1
   137ac:	5830      	ldr	r0, [r6, r0]
   137ae:	f7ff ffc3 	bl	13738 <nrf_pin_configure>
	for (uint8_t i = 0U; i < pin_cnt; i++) {
   137b2:	3401      	adds	r4, #1
   137b4:	b2e4      	uxtb	r4, r4
   137b6:	42bc      	cmp	r4, r7
   137b8:	f080 81c2 	bcs.w	13b40 <pinctrl_configure_pins+0x3c8>
		__unused nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
   137bc:	00a0      	lsls	r0, r4, #2
   137be:	f856 5024 	ldr.w	r5, [r6, r4, lsl #2]
   137c2:	f3c5 2303 	ubfx	r3, r5, #8, #4
		switch (NRF_GET_FUN(pins[i])) {
   137c6:	0c2a      	lsrs	r2, r5, #16
   137c8:	2a22      	cmp	r2, #34	; 0x22
   137ca:	f200 81bb 	bhi.w	13b44 <pinctrl_configure_pins+0x3cc>
   137ce:	a101      	add	r1, pc, #4	; (adr r1, 137d4 <pinctrl_configure_pins+0x5c>)
   137d0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
   137d4:	00013787 	.word	0x00013787
   137d8:	00013865 	.word	0x00013865
   137dc:	0001387b 	.word	0x0001387b
   137e0:	000138ad 	.word	0x000138ad
   137e4:	000138c3 	.word	0x000138c3
   137e8:	000138f5 	.word	0x000138f5
   137ec:	00013927 	.word	0x00013927
   137f0:	00013b45 	.word	0x00013b45
   137f4:	00013b45 	.word	0x00013b45
   137f8:	00013b45 	.word	0x00013b45
   137fc:	00013b45 	.word	0x00013b45
   13800:	0001393d 	.word	0x0001393d
   13804:	00013955 	.word	0x00013955
   13808:	00013b45 	.word	0x00013b45
   1380c:	00013b45 	.word	0x00013b45
   13810:	00013b45 	.word	0x00013b45
   13814:	00013b45 	.word	0x00013b45
   13818:	00013b45 	.word	0x00013b45
   1381c:	00013b45 	.word	0x00013b45
   13820:	00013b45 	.word	0x00013b45
   13824:	00013b45 	.word	0x00013b45
   13828:	00013b45 	.word	0x00013b45
   1382c:	0001396d 	.word	0x0001396d
   13830:	000139c1 	.word	0x000139c1
   13834:	00013a15 	.word	0x00013a15
   13838:	00013a69 	.word	0x00013a69
   1383c:	00013b45 	.word	0x00013b45
   13840:	00013b45 	.word	0x00013b45
   13844:	00013b45 	.word	0x00013b45
   13848:	00013abd 	.word	0x00013abd
   1384c:	00013ad3 	.word	0x00013ad3
   13850:	00013ae9 	.word	0x00013ae9
   13854:	00013aff 	.word	0x00013aff
   13858:	00013b15 	.word	0x00013b15
   1385c:	00013b2b 	.word	0x00013b2b
        case 1: return NRF_P1;
   13860:	4dba      	ldr	r5, [pc, #744]	; (13b4c <pinctrl_configure_pins+0x3d4>)
   13862:	e79d      	b.n	137a0 <pinctrl_configure_pins+0x28>
					  NRF_GPIO_PIN_INPUT_DISCONNECT, drive);
			break;
		case NRF_FUN_UART_RX:
			NRF_PSEL_UART(reg, RXD) = NRF_GET_PIN(pins[i]);
   13864:	f005 053f 	and.w	r5, r5, #63	; 0x3f
   13868:	f8c8 5514 	str.w	r5, [r8, #1300]	; 0x514
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
   1386c:	2200      	movs	r2, #0
   1386e:	4611      	mov	r1, r2
   13870:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
   13874:	f7ff ff60 	bl	13738 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_CONNECT, drive);
			break;
   13878:	e79b      	b.n	137b2 <pinctrl_configure_pins+0x3a>
		case NRF_FUN_UART_RTS:
			NRF_PSEL_UART(reg, RTS) = NRF_GET_PIN(pins[i]);
   1387a:	f005 053f 	and.w	r5, r5, #63	; 0x3f
   1387e:	f8c8 5508 	str.w	r5, [r8, #1288]	; 0x508
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]), 1);
   13882:	f856 1024 	ldr.w	r1, [r6, r4, lsl #2]
    *p_pin = pin_number & 0x1F;
   13886:	f001 021f 	and.w	r2, r1, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1388a:	f011 0f20 	tst.w	r1, #32
   1388e:	d10b      	bne.n	138a8 <pinctrl_configure_pins+0x130>
        case 0: return NRF_P0;
   13890:	f04f 45a0 	mov.w	r5, #1342177280	; 0x50000000
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   13894:	2101      	movs	r1, #1
   13896:	fa01 f202 	lsl.w	r2, r1, r2
    p_reg->OUTSET = set_mask;
   1389a:	f8c5 2508 	str.w	r2, [r5, #1288]	; 0x508
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
   1389e:	460a      	mov	r2, r1
   138a0:	5830      	ldr	r0, [r6, r0]
   138a2:	f7ff ff49 	bl	13738 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT, drive);
			break;
   138a6:	e784      	b.n	137b2 <pinctrl_configure_pins+0x3a>
        case 1: return NRF_P1;
   138a8:	4da8      	ldr	r5, [pc, #672]	; (13b4c <pinctrl_configure_pins+0x3d4>)
   138aa:	e7f3      	b.n	13894 <pinctrl_configure_pins+0x11c>
		case NRF_FUN_UART_CTS:
			NRF_PSEL_UART(reg, CTS) = NRF_GET_PIN(pins[i]);
   138ac:	f005 053f 	and.w	r5, r5, #63	; 0x3f
   138b0:	f8c8 5510 	str.w	r5, [r8, #1296]	; 0x510
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
   138b4:	2200      	movs	r2, #0
   138b6:	4611      	mov	r1, r2
   138b8:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
   138bc:	f7ff ff3c 	bl	13738 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_CONNECT, drive);
			break;
   138c0:	e777      	b.n	137b2 <pinctrl_configure_pins+0x3a>
#endif /* defined(NRF_PSEL_UART) */
#if defined(NRF_PSEL_SPIM)
		case NRF_FUN_SPIM_SCK:
			NRF_PSEL_SPIM(reg, SCK) = NRF_GET_PIN(pins[i]);
   138c2:	f005 053f 	and.w	r5, r5, #63	; 0x3f
   138c6:	f8c8 5508 	str.w	r5, [r8, #1288]	; 0x508
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]), 0);
   138ca:	f856 1024 	ldr.w	r1, [r6, r4, lsl #2]
    *p_pin = pin_number & 0x1F;
   138ce:	f001 021f 	and.w	r2, r1, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   138d2:	f011 0f20 	tst.w	r1, #32
   138d6:	d10b      	bne.n	138f0 <pinctrl_configure_pins+0x178>
        case 0: return NRF_P0;
   138d8:	f04f 45a0 	mov.w	r5, #1342177280	; 0x50000000
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   138dc:	2101      	movs	r1, #1
   138de:	fa01 f202 	lsl.w	r2, r1, r2
    p_reg->OUTCLR = clr_mask;
   138e2:	f8c5 250c 	str.w	r2, [r5, #1292]	; 0x50c
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
   138e6:	2200      	movs	r2, #0
   138e8:	5830      	ldr	r0, [r6, r0]
   138ea:	f7ff ff25 	bl	13738 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_CONNECT, drive);
			break;
   138ee:	e760      	b.n	137b2 <pinctrl_configure_pins+0x3a>
        case 1: return NRF_P1;
   138f0:	4d96      	ldr	r5, [pc, #600]	; (13b4c <pinctrl_configure_pins+0x3d4>)
   138f2:	e7f3      	b.n	138dc <pinctrl_configure_pins+0x164>
		case NRF_FUN_SPIM_MOSI:
			NRF_PSEL_SPIM(reg, MOSI) = NRF_GET_PIN(pins[i]);
   138f4:	f005 053f 	and.w	r5, r5, #63	; 0x3f
   138f8:	f8c8 550c 	str.w	r5, [r8, #1292]	; 0x50c
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]), 0);
   138fc:	f856 1024 	ldr.w	r1, [r6, r4, lsl #2]
    *p_pin = pin_number & 0x1F;
   13900:	f001 021f 	and.w	r2, r1, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   13904:	f011 0f20 	tst.w	r1, #32
   13908:	d10b      	bne.n	13922 <pinctrl_configure_pins+0x1aa>
        case 0: return NRF_P0;
   1390a:	f04f 45a0 	mov.w	r5, #1342177280	; 0x50000000
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   1390e:	2101      	movs	r1, #1
   13910:	fa01 f202 	lsl.w	r2, r1, r2
    p_reg->OUTCLR = clr_mask;
   13914:	f8c5 250c 	str.w	r2, [r5, #1292]	; 0x50c
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
   13918:	460a      	mov	r2, r1
   1391a:	5830      	ldr	r0, [r6, r0]
   1391c:	f7ff ff0c 	bl	13738 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT, drive);
			break;
   13920:	e747      	b.n	137b2 <pinctrl_configure_pins+0x3a>
        case 1: return NRF_P1;
   13922:	4d8a      	ldr	r5, [pc, #552]	; (13b4c <pinctrl_configure_pins+0x3d4>)
   13924:	e7f3      	b.n	1390e <pinctrl_configure_pins+0x196>
		case NRF_FUN_SPIM_MISO:
			NRF_PSEL_SPIM(reg, MISO) = NRF_GET_PIN(pins[i]);
   13926:	f005 053f 	and.w	r5, r5, #63	; 0x3f
   1392a:	f8c8 5510 	str.w	r5, [r8, #1296]	; 0x510
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
   1392e:	2200      	movs	r2, #0
   13930:	4611      	mov	r1, r2
   13932:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
   13936:	f7ff feff 	bl	13738 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_CONNECT, drive);
			break;
   1393a:	e73a      	b.n	137b2 <pinctrl_configure_pins+0x3a>
					  NRF_GPIO_PIN_INPUT_CONNECT, drive);
			break;
#endif /* defined(NRF_PSEL_SPIS) */
#if defined(NRF_PSEL_TWIM)
		case NRF_FUN_TWIM_SCL:
			NRF_PSEL_TWIM(reg, SCL) = NRF_GET_PIN(pins[i]);
   1393c:	f005 053f 	and.w	r5, r5, #63	; 0x3f
   13940:	f8c8 5508 	str.w	r5, [r8, #1288]	; 0x508
			if (drive == NRF_DRIVE_S0S1) {
   13944:	b903      	cbnz	r3, 13948 <pinctrl_configure_pins+0x1d0>
				 * suitable for TWI/TWIM peripherals (S0D1).
				 * This drive cannot be used always so that
				 * users are able to select e.g. H0D1 or E0E1
				 * in devicetree.
				 */
				drive = NRF_DRIVE_S0D1;
   13946:	2306      	movs	r3, #6
			}
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
   13948:	2200      	movs	r2, #0
   1394a:	4611      	mov	r1, r2
   1394c:	5830      	ldr	r0, [r6, r0]
   1394e:	f7ff fef3 	bl	13738 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_CONNECT, drive);
			break;
   13952:	e72e      	b.n	137b2 <pinctrl_configure_pins+0x3a>
		case NRF_FUN_TWIM_SDA:
			NRF_PSEL_TWIM(reg, SDA) = NRF_GET_PIN(pins[i]);
   13954:	f005 053f 	and.w	r5, r5, #63	; 0x3f
   13958:	f8c8 550c 	str.w	r5, [r8, #1292]	; 0x50c
			if (drive == NRF_DRIVE_S0S1) {
   1395c:	b903      	cbnz	r3, 13960 <pinctrl_configure_pins+0x1e8>
				drive = NRF_DRIVE_S0D1;
   1395e:	2306      	movs	r3, #6
			}
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
   13960:	2200      	movs	r2, #0
   13962:	4611      	mov	r1, r2
   13964:	5830      	ldr	r0, [r6, r0]
   13966:	f7ff fee7 	bl	13738 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_CONNECT, drive);
			break;
   1396a:	e722      	b.n	137b2 <pinctrl_configure_pins+0x3a>
					  NRF_GPIO_PIN_INPUT_CONNECT, drive);
			break;
#endif /* defined(NRF_PSEL_PDM) */
#if defined(NRF_PSEL_PWM)
		case NRF_FUN_PWM_OUT0:
			NRF_PSEL_PWM(reg, OUT[0]) = NRF_GET_PIN(pins[i]);
   1396c:	f005 053f 	and.w	r5, r5, #63	; 0x3f
   13970:	f8c8 5560 	str.w	r5, [r8, #1376]	; 0x560
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]),
   13974:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
   13978:	f002 013f 	and.w	r1, r2, #63	; 0x3f
    if (value == 0)
   1397c:	f412 5f00 	tst.w	r2, #8192	; 0x2000
   13980:	d111      	bne.n	139a6 <pinctrl_configure_pins+0x22e>
    *p_pin = pin_number & 0x1F;
   13982:	f001 051f 	and.w	r5, r1, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   13986:	094a      	lsrs	r2, r1, #5
   13988:	d10b      	bne.n	139a2 <pinctrl_configure_pins+0x22a>
        case 0: return NRF_P0;
   1398a:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   1398e:	2201      	movs	r2, #1
   13990:	40aa      	lsls	r2, r5
    p_reg->OUTCLR = clr_mask;
   13992:	f8c1 250c 	str.w	r2, [r1, #1292]	; 0x50c
					   NRF_GET_INVERT(pins[i]));
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
   13996:	2201      	movs	r2, #1
   13998:	4611      	mov	r1, r2
   1399a:	5830      	ldr	r0, [r6, r0]
   1399c:	f7ff fecc 	bl	13738 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT, drive);
			break;
   139a0:	e707      	b.n	137b2 <pinctrl_configure_pins+0x3a>
        case 1: return NRF_P1;
   139a2:	496a      	ldr	r1, [pc, #424]	; (13b4c <pinctrl_configure_pins+0x3d4>)
   139a4:	e7f3      	b.n	1398e <pinctrl_configure_pins+0x216>
    *p_pin = pin_number & 0x1F;
   139a6:	f001 051f 	and.w	r5, r1, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   139aa:	094a      	lsrs	r2, r1, #5
   139ac:	d106      	bne.n	139bc <pinctrl_configure_pins+0x244>
        case 0: return NRF_P0;
   139ae:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   139b2:	2201      	movs	r2, #1
   139b4:	40aa      	lsls	r2, r5
    p_reg->OUTSET = set_mask;
   139b6:	f8c1 2508 	str.w	r2, [r1, #1288]	; 0x508
}
   139ba:	e7ec      	b.n	13996 <pinctrl_configure_pins+0x21e>
        case 1: return NRF_P1;
   139bc:	4963      	ldr	r1, [pc, #396]	; (13b4c <pinctrl_configure_pins+0x3d4>)
   139be:	e7f8      	b.n	139b2 <pinctrl_configure_pins+0x23a>
		case NRF_FUN_PWM_OUT1:
			NRF_PSEL_PWM(reg, OUT[1]) = NRF_GET_PIN(pins[i]);
   139c0:	f005 053f 	and.w	r5, r5, #63	; 0x3f
   139c4:	f8c8 5564 	str.w	r5, [r8, #1380]	; 0x564
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]),
   139c8:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
   139cc:	f002 013f 	and.w	r1, r2, #63	; 0x3f
    if (value == 0)
   139d0:	f412 5f00 	tst.w	r2, #8192	; 0x2000
   139d4:	d111      	bne.n	139fa <pinctrl_configure_pins+0x282>
    *p_pin = pin_number & 0x1F;
   139d6:	f001 051f 	and.w	r5, r1, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   139da:	094a      	lsrs	r2, r1, #5
   139dc:	d10b      	bne.n	139f6 <pinctrl_configure_pins+0x27e>
        case 0: return NRF_P0;
   139de:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   139e2:	2201      	movs	r2, #1
   139e4:	40aa      	lsls	r2, r5
    p_reg->OUTCLR = clr_mask;
   139e6:	f8c1 250c 	str.w	r2, [r1, #1292]	; 0x50c
					   NRF_GET_INVERT(pins[i]));
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
   139ea:	2201      	movs	r2, #1
   139ec:	4611      	mov	r1, r2
   139ee:	5830      	ldr	r0, [r6, r0]
   139f0:	f7ff fea2 	bl	13738 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT, drive);
			break;
   139f4:	e6dd      	b.n	137b2 <pinctrl_configure_pins+0x3a>
        case 1: return NRF_P1;
   139f6:	4955      	ldr	r1, [pc, #340]	; (13b4c <pinctrl_configure_pins+0x3d4>)
   139f8:	e7f3      	b.n	139e2 <pinctrl_configure_pins+0x26a>
    *p_pin = pin_number & 0x1F;
   139fa:	f001 051f 	and.w	r5, r1, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   139fe:	094a      	lsrs	r2, r1, #5
   13a00:	d106      	bne.n	13a10 <pinctrl_configure_pins+0x298>
        case 0: return NRF_P0;
   13a02:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   13a06:	2201      	movs	r2, #1
   13a08:	40aa      	lsls	r2, r5
    p_reg->OUTSET = set_mask;
   13a0a:	f8c1 2508 	str.w	r2, [r1, #1288]	; 0x508
}
   13a0e:	e7ec      	b.n	139ea <pinctrl_configure_pins+0x272>
        case 1: return NRF_P1;
   13a10:	494e      	ldr	r1, [pc, #312]	; (13b4c <pinctrl_configure_pins+0x3d4>)
   13a12:	e7f8      	b.n	13a06 <pinctrl_configure_pins+0x28e>
		case NRF_FUN_PWM_OUT2:
			NRF_PSEL_PWM(reg, OUT[2]) = NRF_GET_PIN(pins[i]);
   13a14:	f005 053f 	and.w	r5, r5, #63	; 0x3f
   13a18:	f8c8 5568 	str.w	r5, [r8, #1384]	; 0x568
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]),
   13a1c:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
   13a20:	f002 013f 	and.w	r1, r2, #63	; 0x3f
    if (value == 0)
   13a24:	f412 5f00 	tst.w	r2, #8192	; 0x2000
   13a28:	d111      	bne.n	13a4e <pinctrl_configure_pins+0x2d6>
    *p_pin = pin_number & 0x1F;
   13a2a:	f001 051f 	and.w	r5, r1, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   13a2e:	094a      	lsrs	r2, r1, #5
   13a30:	d10b      	bne.n	13a4a <pinctrl_configure_pins+0x2d2>
        case 0: return NRF_P0;
   13a32:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   13a36:	2201      	movs	r2, #1
   13a38:	40aa      	lsls	r2, r5
    p_reg->OUTCLR = clr_mask;
   13a3a:	f8c1 250c 	str.w	r2, [r1, #1292]	; 0x50c
					   NRF_GET_INVERT(pins[i]));
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
   13a3e:	2201      	movs	r2, #1
   13a40:	4611      	mov	r1, r2
   13a42:	5830      	ldr	r0, [r6, r0]
   13a44:	f7ff fe78 	bl	13738 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT, drive);
			break;
   13a48:	e6b3      	b.n	137b2 <pinctrl_configure_pins+0x3a>
        case 1: return NRF_P1;
   13a4a:	4940      	ldr	r1, [pc, #256]	; (13b4c <pinctrl_configure_pins+0x3d4>)
   13a4c:	e7f3      	b.n	13a36 <pinctrl_configure_pins+0x2be>
    *p_pin = pin_number & 0x1F;
   13a4e:	f001 051f 	and.w	r5, r1, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   13a52:	094a      	lsrs	r2, r1, #5
   13a54:	d106      	bne.n	13a64 <pinctrl_configure_pins+0x2ec>
        case 0: return NRF_P0;
   13a56:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   13a5a:	2201      	movs	r2, #1
   13a5c:	40aa      	lsls	r2, r5
    p_reg->OUTSET = set_mask;
   13a5e:	f8c1 2508 	str.w	r2, [r1, #1288]	; 0x508
}
   13a62:	e7ec      	b.n	13a3e <pinctrl_configure_pins+0x2c6>
        case 1: return NRF_P1;
   13a64:	4939      	ldr	r1, [pc, #228]	; (13b4c <pinctrl_configure_pins+0x3d4>)
   13a66:	e7f8      	b.n	13a5a <pinctrl_configure_pins+0x2e2>
		case NRF_FUN_PWM_OUT3:
			NRF_PSEL_PWM(reg, OUT[3]) = NRF_GET_PIN(pins[i]);
   13a68:	f005 053f 	and.w	r5, r5, #63	; 0x3f
   13a6c:	f8c8 556c 	str.w	r5, [r8, #1388]	; 0x56c
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]),
   13a70:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
   13a74:	f002 013f 	and.w	r1, r2, #63	; 0x3f
    if (value == 0)
   13a78:	f412 5f00 	tst.w	r2, #8192	; 0x2000
   13a7c:	d111      	bne.n	13aa2 <pinctrl_configure_pins+0x32a>
    *p_pin = pin_number & 0x1F;
   13a7e:	f001 051f 	and.w	r5, r1, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   13a82:	094a      	lsrs	r2, r1, #5
   13a84:	d10b      	bne.n	13a9e <pinctrl_configure_pins+0x326>
        case 0: return NRF_P0;
   13a86:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   13a8a:	2201      	movs	r2, #1
   13a8c:	40aa      	lsls	r2, r5
    p_reg->OUTCLR = clr_mask;
   13a8e:	f8c1 250c 	str.w	r2, [r1, #1292]	; 0x50c
					   NRF_GET_INVERT(pins[i]));
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
   13a92:	2201      	movs	r2, #1
   13a94:	4611      	mov	r1, r2
   13a96:	5830      	ldr	r0, [r6, r0]
   13a98:	f7ff fe4e 	bl	13738 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT, drive);
			break;
   13a9c:	e689      	b.n	137b2 <pinctrl_configure_pins+0x3a>
        case 1: return NRF_P1;
   13a9e:	492b      	ldr	r1, [pc, #172]	; (13b4c <pinctrl_configure_pins+0x3d4>)
   13aa0:	e7f3      	b.n	13a8a <pinctrl_configure_pins+0x312>
    *p_pin = pin_number & 0x1F;
   13aa2:	f001 051f 	and.w	r5, r1, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   13aa6:	094a      	lsrs	r2, r1, #5
   13aa8:	d106      	bne.n	13ab8 <pinctrl_configure_pins+0x340>
        case 0: return NRF_P0;
   13aaa:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   13aae:	2201      	movs	r2, #1
   13ab0:	40aa      	lsls	r2, r5
    p_reg->OUTSET = set_mask;
   13ab2:	f8c1 2508 	str.w	r2, [r1, #1288]	; 0x508
}
   13ab6:	e7ec      	b.n	13a92 <pinctrl_configure_pins+0x31a>
        case 1: return NRF_P1;
   13ab8:	4924      	ldr	r1, [pc, #144]	; (13b4c <pinctrl_configure_pins+0x3d4>)
   13aba:	e7f8      	b.n	13aae <pinctrl_configure_pins+0x336>
					  NRF_GPIO_PIN_INPUT_CONNECT, drive);
			break;
#endif /* defined(NRF_PSEL_QDEC) */
#if defined(NRF_PSEL_QSPI)
		case NRF_FUN_QSPI_SCK:
			NRF_PSEL_QSPI(reg, SCK) = NRF_GET_PIN(pins[i]);
   13abc:	f005 053f 	and.w	r5, r5, #63	; 0x3f
   13ac0:	f8c8 5524 	str.w	r5, [r8, #1316]	; 0x524
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
   13ac4:	2201      	movs	r2, #1
   13ac6:	2100      	movs	r1, #0
   13ac8:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
   13acc:	f7ff fe34 	bl	13738 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT, drive);
			break;
   13ad0:	e66f      	b.n	137b2 <pinctrl_configure_pins+0x3a>
		case NRF_FUN_QSPI_CSN:
			NRF_PSEL_QSPI(reg, CSN) = NRF_GET_PIN(pins[i]);
   13ad2:	f005 053f 	and.w	r5, r5, #63	; 0x3f
   13ad6:	f8c8 5528 	str.w	r5, [r8, #1320]	; 0x528
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
   13ada:	2201      	movs	r2, #1
   13adc:	2100      	movs	r1, #0
   13ade:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
   13ae2:	f7ff fe29 	bl	13738 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT, drive);
			break;
   13ae6:	e664      	b.n	137b2 <pinctrl_configure_pins+0x3a>
		case NRF_FUN_QSPI_IO0:
			NRF_PSEL_QSPI(reg, IO0) = NRF_GET_PIN(pins[i]);
   13ae8:	f005 053f 	and.w	r5, r5, #63	; 0x3f
   13aec:	f8c8 5530 	str.w	r5, [r8, #1328]	; 0x530
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
   13af0:	2201      	movs	r2, #1
   13af2:	2100      	movs	r1, #0
   13af4:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
   13af8:	f7ff fe1e 	bl	13738 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT, drive);
			break;
   13afc:	e659      	b.n	137b2 <pinctrl_configure_pins+0x3a>
		case NRF_FUN_QSPI_IO1:
			NRF_PSEL_QSPI(reg, IO1) = NRF_GET_PIN(pins[i]);
   13afe:	f005 053f 	and.w	r5, r5, #63	; 0x3f
   13b02:	f8c8 5534 	str.w	r5, [r8, #1332]	; 0x534
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
   13b06:	2201      	movs	r2, #1
   13b08:	2100      	movs	r1, #0
   13b0a:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
   13b0e:	f7ff fe13 	bl	13738 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT, drive);
			break;
   13b12:	e64e      	b.n	137b2 <pinctrl_configure_pins+0x3a>
		case NRF_FUN_QSPI_IO2:
			NRF_PSEL_QSPI(reg, IO2) = NRF_GET_PIN(pins[i]);
   13b14:	f005 053f 	and.w	r5, r5, #63	; 0x3f
   13b18:	f8c8 5538 	str.w	r5, [r8, #1336]	; 0x538
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
   13b1c:	2201      	movs	r2, #1
   13b1e:	2100      	movs	r1, #0
   13b20:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
   13b24:	f7ff fe08 	bl	13738 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT, drive);
			break;
   13b28:	e643      	b.n	137b2 <pinctrl_configure_pins+0x3a>
		case NRF_FUN_QSPI_IO3:
			NRF_PSEL_QSPI(reg, IO3) = NRF_GET_PIN(pins[i]);
   13b2a:	f005 053f 	and.w	r5, r5, #63	; 0x3f
   13b2e:	f8c8 553c 	str.w	r5, [r8, #1340]	; 0x53c
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
   13b32:	2201      	movs	r2, #1
   13b34:	2100      	movs	r1, #0
   13b36:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
   13b3a:	f7ff fdfd 	bl	13738 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT, drive);
			break;
   13b3e:	e638      	b.n	137b2 <pinctrl_configure_pins+0x3a>
		default:
			return -ENOTSUP;
		}
	}

	return 0;
   13b40:	2000      	movs	r0, #0
   13b42:	e001      	b.n	13b48 <pinctrl_configure_pins+0x3d0>
		switch (NRF_GET_FUN(pins[i])) {
   13b44:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
   13b48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   13b4c:	50000300 	.word	0x50000300

00013b50 <boot_magic_decode>:
#define BOOT_SWAP_TABLES_COUNT \
    (sizeof boot_swap_tables / sizeof boot_swap_tables[0])

static int
boot_magic_decode(const uint8_t *magic)
{
   13b50:	b508      	push	{r3, lr}
    if (memcmp(magic, BOOT_IMG_MAGIC, BOOT_MAGIC_SZ) == 0) {
   13b52:	2210      	movs	r2, #16
   13b54:	4903      	ldr	r1, [pc, #12]	; (13b64 <boot_magic_decode+0x14>)
   13b56:	f004 f81f 	bl	17b98 <memcmp>
   13b5a:	b108      	cbz	r0, 13b60 <boot_magic_decode+0x10>
        return BOOT_MAGIC_GOOD;
    }
    return BOOT_MAGIC_BAD;
   13b5c:	2002      	movs	r0, #2
}
   13b5e:	bd08      	pop	{r3, pc}
        return BOOT_MAGIC_GOOD;
   13b60:	2001      	movs	r0, #1
   13b62:	e7fc      	b.n	13b5e <boot_magic_decode+0xe>
   13b64:	00019e7c 	.word	0x00019e7c

00013b68 <boot_write_magic>:
    return rc;
}

int
boot_write_magic(const struct flash_area *fap)
{
   13b68:	b530      	push	{r4, r5, lr}
   13b6a:	b085      	sub	sp, #20
   13b6c:	4605      	mov	r5, r0
	return (uint32_t)fa->fa_off;
}

static inline uint32_t flash_area_get_size(const struct flash_area *fa)
{
	return (uint32_t)fa->fa_size;
   13b6e:	6881      	ldr	r1, [r0, #8]
    return flash_area_get_size(fap) - BOOT_MAGIC_SZ;
   13b70:	3910      	subs	r1, #16
     * returned by boot_magic_off() is the start of magic which is not the
     * start of the flash write boundary and thus writes to the magic will fail.
     * To account for this change, write to magic is first padded with 0xFF
     * before writing to the trailer.
     */
    pad_off = ALIGN_DOWN(off, BOOT_MAX_ALIGN);
   13b72:	f021 0407 	bic.w	r4, r1, #7

    erased_val = flash_area_erased_val(fap);
   13b76:	f003 ff22 	bl	179be <flash_area_erased_val>
   13b7a:	4601      	mov	r1, r0

    memset(&magic[0], erased_val, sizeof(magic));
   13b7c:	2210      	movs	r2, #16
   13b7e:	4668      	mov	r0, sp
   13b80:	f004 f85e 	bl	17c40 <memset>
    memcpy(&magic[BOOT_MAGIC_ALIGN_SIZE - BOOT_MAGIC_SZ], BOOT_IMG_MAGIC, BOOT_MAGIC_SZ);
   13b84:	2210      	movs	r2, #16
   13b86:	4907      	ldr	r1, [pc, #28]	; (13ba4 <boot_write_magic+0x3c>)
   13b88:	4668      	mov	r0, sp
   13b8a:	f004 f82a 	bl	17be2 <memcpy>

    BOOT_LOG_DBG("writing magic; fa_id=%d off=0x%lx (0x%lx)",
                 flash_area_get_id(fap), (unsigned long)off,
                 (unsigned long)(flash_area_get_off(fap) + off));
    rc = flash_area_write(fap, pad_off, &magic[0], BOOT_MAGIC_ALIGN_SIZE);
   13b8e:	2310      	movs	r3, #16
   13b90:	466a      	mov	r2, sp
   13b92:	4621      	mov	r1, r4
   13b94:	4628      	mov	r0, r5
   13b96:	f003 fed7 	bl	17948 <flash_area_write>

    if (rc != 0) {
   13b9a:	b908      	cbnz	r0, 13ba0 <boot_write_magic+0x38>
        return BOOT_EFLASH;
    }

    return 0;
}
   13b9c:	b005      	add	sp, #20
   13b9e:	bd30      	pop	{r4, r5, pc}
        return BOOT_EFLASH;
   13ba0:	2001      	movs	r0, #1
   13ba2:	e7fb      	b.n	13b9c <boot_write_magic+0x34>
   13ba4:	00019e7c 	.word	0x00019e7c

00013ba8 <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
   13ba8:	4b02      	ldr	r3, [pc, #8]	; (13bb4 <nvmc_wait+0xc>)
   13baa:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
   13bae:	2b00      	cmp	r3, #0
   13bb0:	d0fa      	beq.n	13ba8 <nvmc_wait>
}
   13bb2:	4770      	bx	lr
   13bb4:	4001e000 	.word	0x4001e000

00013bb8 <nvmc_config>:

/*  Configure the NVMC to "mode".
    Mode must be an enumerator of field NVMC_CONFIG_WEN */
void nvmc_config(uint32_t mode)
{
   13bb8:	b508      	push	{r3, lr}
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   13bba:	4b03      	ldr	r3, [pc, #12]	; (13bc8 <nvmc_config+0x10>)
   13bbc:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
    nvmc_wait();
   13bc0:	f7ff fff2 	bl	13ba8 <nvmc_wait>
}
   13bc4:	bd08      	pop	{r3, pc}
   13bc6:	bf00      	nop
   13bc8:	4001e000 	.word	0x4001e000

00013bcc <SystemCoreClockUpdate>:

void SystemCoreClockUpdate(void)
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
   13bcc:	4b01      	ldr	r3, [pc, #4]	; (13bd4 <SystemCoreClockUpdate+0x8>)
   13bce:	4a02      	ldr	r2, [pc, #8]	; (13bd8 <SystemCoreClockUpdate+0xc>)
   13bd0:	601a      	str	r2, [r3, #0]
}
   13bd2:	4770      	bx	lr
   13bd4:	200000b0 	.word	0x200000b0
   13bd8:	03d09000 	.word	0x03d09000

00013bdc <SystemInit>:

void SystemInit(void)
{
   13bdc:	b538      	push	{r3, r4, r5, lr}
    #endif

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
   13bde:	f004 ffeb 	bl	18bb8 <nrf52_errata_36>
   13be2:	b140      	cbz	r0, 13bf6 <SystemInit+0x1a>
            NRF_CLOCK->EVENTS_DONE = 0;
   13be4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   13be8:	2200      	movs	r2, #0
   13bea:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
   13bee:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
   13bf2:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    #endif

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
   13bf6:	f004 ffe9 	bl	18bcc <nrf52_errata_66>
   13bfa:	2800      	cmp	r0, #0
   13bfc:	d046      	beq.n	13c8c <SystemInit+0xb0>
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
   13bfe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   13c02:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
   13c06:	4b59      	ldr	r3, [pc, #356]	; (13d6c <SystemInit+0x190>)
   13c08:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
   13c0c:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
   13c10:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
   13c14:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
   13c18:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
   13c1c:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
   13c20:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
   13c24:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
   13c28:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
   13c2c:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
   13c30:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
   13c34:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
   13c38:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
   13c3c:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
   13c40:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
   13c44:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
   13c48:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
   13c4c:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
   13c50:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
   13c54:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
   13c58:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
   13c5c:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
   13c60:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
   13c64:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
   13c68:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
   13c6c:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
   13c70:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
   13c74:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
   13c78:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
   13c7c:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
   13c80:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
   13c84:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
   13c88:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_98_ENABLE_WORKAROUND
        /* Workaround for Errata 98 "NFCT: Not able to communicate with the peer" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_98()){
   13c8c:	f004 ffa8 	bl	18be0 <nrf52_errata_98>
   13c90:	b118      	cbz	r0, 13c9a <SystemInit+0xbe>
            *(volatile uint32_t *)0x4000568Cul = 0x00038148ul;
   13c92:	4b37      	ldr	r3, [pc, #220]	; (13d70 <SystemInit+0x194>)
   13c94:	4a37      	ldr	r2, [pc, #220]	; (13d74 <SystemInit+0x198>)
   13c96:	f8c3 268c 	str.w	r2, [r3, #1676]	; 0x68c
    #endif

    #if NRF52_ERRATA_103_ENABLE_WORKAROUND && defined(CCM_MAXPACKETSIZE_MAXPACKETSIZE_Pos)
        /* Workaround for Errata 103 "CCM: Wrong reset value of CCM MAXPACKETSIZE" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_103()){
   13c9a:	f004 ffb4 	bl	18c06 <nrf52_errata_103>
   13c9e:	b118      	cbz	r0, 13ca8 <SystemInit+0xcc>
            NRF_CCM->MAXPACKETSIZE = 0xFBul;
   13ca0:	4b35      	ldr	r3, [pc, #212]	; (13d78 <SystemInit+0x19c>)
   13ca2:	22fb      	movs	r2, #251	; 0xfb
   13ca4:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    #endif

    #if NRF52_ERRATA_115_ENABLE_WORKAROUND
        /* Workaround for Errata 115 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_115()){
   13ca8:	f004 ffc0 	bl	18c2c <nrf52_errata_115>
   13cac:	b170      	cbz	r0, 13ccc <SystemInit+0xf0>
            *(volatile uint32_t *)0x40000EE4 = (*(volatile uint32_t *)0x40000EE4 & 0xFFFFFFF0) | (*(uint32_t *)0x10000258 & 0x0000000F);
   13cae:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   13cb2:	f8d1 3ee4 	ldr.w	r3, [r1, #3812]	; 0xee4
   13cb6:	f023 030f 	bic.w	r3, r3, #15
   13cba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   13cbe:	f8d2 2258 	ldr.w	r2, [r2, #600]	; 0x258
   13cc2:	f002 020f 	and.w	r2, r2, #15
   13cc6:	4313      	orrs	r3, r2
   13cc8:	f8c1 3ee4 	str.w	r3, [r1, #3812]	; 0xee4
    #endif

    #if NRF52_ERRATA_120_ENABLE_WORKAROUND
        /* Workaround for Errata 120 "QSPI: Data read or written is corrupted" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_120()){
   13ccc:	f004 ffc1 	bl	18c52 <nrf52_errata_120>
   13cd0:	b120      	cbz	r0, 13cdc <SystemInit+0x100>
            *(volatile uint32_t *)0x40029640ul = 0x200ul;
   13cd2:	4b2a      	ldr	r3, [pc, #168]	; (13d7c <SystemInit+0x1a0>)
   13cd4:	f44f 7200 	mov.w	r2, #512	; 0x200
   13cd8:	f8c3 2640 	str.w	r2, [r3, #1600]	; 0x640
    #endif

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
   13cdc:	f004 ffcc 	bl	18c78 <nrf52_errata_136>
   13ce0:	b160      	cbz	r0, 13cfc <SystemInit+0x120>
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
   13ce2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   13ce6:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
   13cea:	f013 0f01 	tst.w	r3, #1
   13cee:	d005      	beq.n	13cfc <SystemInit+0x120>
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
   13cf0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   13cf4:	f06f 0201 	mvn.w	r2, #1
   13cf8:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
            {
                /* Prevent processor from unlocking APPROTECT soft branch after this point. */
                NRF_APPROTECT->FORCEPROTECT = APPROTECT_FORCEPROTECT_FORCEPROTECT_Force;
            }
        #else
            if (nrf52_configuration_249())
   13cfc:	f004 ffc6 	bl	18c8c <nrf52_configuration_249>
   13d00:	b138      	cbz	r0, 13d12 <SystemInit+0x136>
            {
                /* Load APPROTECT soft branch from UICR.
                   If UICR->APPROTECT is disabled, POWER->APPROTECT will be disabled. */
                NRF_APPROTECT->DISABLE = NRF_UICR->APPROTECT;
   13d02:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   13d06:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
   13d0a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   13d0e:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   13d12:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   13d16:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
   13d1a:	2b00      	cmp	r3, #0
   13d1c:	db08      	blt.n	13d30 <SystemInit+0x154>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
   13d1e:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   13d22:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   13d26:	2b00      	cmp	r3, #0
   13d28:	db02      	blt.n	13d30 <SystemInit+0x154>
            nvmc_config(NVMC_CONFIG_WEN_Ren);
            NVIC_SystemReset();
        }
    #endif

    SystemCoreClockUpdate();
   13d2a:	f7ff ff4f 	bl	13bcc <SystemCoreClockUpdate>
}
   13d2e:	bd38      	pop	{r3, r4, r5, pc}
            nvmc_config(NVMC_CONFIG_WEN_Wen);
   13d30:	2001      	movs	r0, #1
   13d32:	f7ff ff41 	bl	13bb8 <nvmc_config>
            NRF_UICR->PSELRESET[0] = RESET_PIN;
   13d36:	f04f 2410 	mov.w	r4, #268439552	; 0x10001000
   13d3a:	2512      	movs	r5, #18
   13d3c:	f8c4 5200 	str.w	r5, [r4, #512]	; 0x200
            nvmc_wait();
   13d40:	f7ff ff32 	bl	13ba8 <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
   13d44:	f8c4 5204 	str.w	r5, [r4, #516]	; 0x204
            nvmc_wait();
   13d48:	f7ff ff2e 	bl	13ba8 <nvmc_wait>
            nvmc_config(NVMC_CONFIG_WEN_Ren);
   13d4c:	2000      	movs	r0, #0
   13d4e:	f7ff ff33 	bl	13bb8 <nvmc_config>
  __ASM volatile ("dsb 0xF":::"memory");
   13d52:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   13d56:	490a      	ldr	r1, [pc, #40]	; (13d80 <SystemInit+0x1a4>)
   13d58:	68ca      	ldr	r2, [r1, #12]
   13d5a:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   13d5e:	4b09      	ldr	r3, [pc, #36]	; (13d84 <SystemInit+0x1a8>)
   13d60:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   13d62:	60cb      	str	r3, [r1, #12]
   13d64:	f3bf 8f4f 	dsb	sy
    __NOP();
   13d68:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   13d6a:	e7fd      	b.n	13d68 <SystemInit+0x18c>
   13d6c:	4000c000 	.word	0x4000c000
   13d70:	40005000 	.word	0x40005000
   13d74:	00038148 	.word	0x00038148
   13d78:	4000f000 	.word	0x4000f000
   13d7c:	40029000 	.word	0x40029000
   13d80:	e000ed00 	.word	0xe000ed00
   13d84:	05fa0004 	.word	0x05fa0004

00013d88 <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
   13d88:	b510      	push	{r4, lr}
    int8_t idx;
    uint32_t new_mask, prev_mask;

    do {
        prev_mask = *p_mask;
   13d8a:	6804      	ldr	r4, [r0, #0]
        idx = 31 - NRF_CLZ(prev_mask);
   13d8c:	fab4 f384 	clz	r3, r4
   13d90:	f1c3 031f 	rsb	r3, r3, #31
   13d94:	fa5f fc83 	uxtb.w	ip, r3
        if (idx < 0) {
   13d98:	2b00      	cmp	r3, #0
   13d9a:	db16      	blt.n	13dca <nrfx_flag32_alloc+0x42>
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
   13d9c:	2201      	movs	r2, #1
   13d9e:	fa02 f303 	lsl.w	r3, r2, r3
   13da2:	ea24 0303 	bic.w	r3, r4, r3
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   13da6:	f3bf 8f5b 	dmb	ish
   13daa:	e850 2f00 	ldrex	r2, [r0]
   13dae:	42a2      	cmp	r2, r4
   13db0:	d104      	bne.n	13dbc <nrfx_flag32_alloc+0x34>
   13db2:	e840 3e00 	strex	lr, r3, [r0]
   13db6:	f1be 0f00 	cmp.w	lr, #0
   13dba:	d1f6      	bne.n	13daa <nrfx_flag32_alloc+0x22>
   13dbc:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   13dc0:	d1e3      	bne.n	13d8a <nrfx_flag32_alloc+0x2>

    *p_flag = idx;
   13dc2:	f881 c000 	strb.w	ip, [r1]

    return NRFX_SUCCESS;
   13dc6:	4802      	ldr	r0, [pc, #8]	; (13dd0 <nrfx_flag32_alloc+0x48>)
}
   13dc8:	bd10      	pop	{r4, pc}
            return NRFX_ERROR_NO_MEM;
   13dca:	4802      	ldr	r0, [pc, #8]	; (13dd4 <nrfx_flag32_alloc+0x4c>)
   13dcc:	e7fc      	b.n	13dc8 <nrfx_flag32_alloc+0x40>
   13dce:	bf00      	nop
   13dd0:	0bad0000 	.word	0x0bad0000
   13dd4:	0bad0002 	.word	0x0bad0002

00013dd8 <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
   13dd8:	6803      	ldr	r3, [r0, #0]
   13dda:	40cb      	lsrs	r3, r1
   13ddc:	f013 0f01 	tst.w	r3, #1
   13de0:	d115      	bne.n	13e0e <nrfx_flag32_free+0x36>
{
   13de2:	b500      	push	{lr}
    {
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
   13de4:	6802      	ldr	r2, [r0, #0]
        new_mask = prev_mask | NRFX_BIT(flag);
   13de6:	2301      	movs	r3, #1
   13de8:	408b      	lsls	r3, r1
   13dea:	4313      	orrs	r3, r2
   13dec:	f3bf 8f5b 	dmb	ish
   13df0:	e850 cf00 	ldrex	ip, [r0]
   13df4:	4594      	cmp	ip, r2
   13df6:	d104      	bne.n	13e02 <nrfx_flag32_free+0x2a>
   13df8:	e840 3e00 	strex	lr, r3, [r0]
   13dfc:	f1be 0f00 	cmp.w	lr, #0
   13e00:	d1f6      	bne.n	13df0 <nrfx_flag32_free+0x18>
   13e02:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   13e06:	d1ed      	bne.n	13de4 <nrfx_flag32_free+0xc>

    return NRFX_SUCCESS;
   13e08:	4802      	ldr	r0, [pc, #8]	; (13e14 <nrfx_flag32_free+0x3c>)
}
   13e0a:	f85d fb04 	ldr.w	pc, [sp], #4
        return NRFX_ERROR_INVALID_PARAM;
   13e0e:	4802      	ldr	r0, [pc, #8]	; (13e18 <nrfx_flag32_free+0x40>)
}
   13e10:	4770      	bx	lr
   13e12:	bf00      	nop
   13e14:	0bad0000 	.word	0x0bad0000
   13e18:	0bad0004 	.word	0x0bad0004

00013e1c <clock_stop>:
    CoreDebug->DEMCR = core_debug;
}
#endif // NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_132)

static void clock_stop(nrf_clock_domain_t domain)
{
   13e1c:	b570      	push	{r4, r5, r6, lr}
   13e1e:	b082      	sub	sp, #8
    switch (domain)
   13e20:	4605      	mov	r5, r0
   13e22:	b118      	cbz	r0, 13e2c <clock_stop+0x10>
   13e24:	2801      	cmp	r0, #1
   13e26:	d016      	beq.n	13e56 <clock_stop+0x3a>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
   13e28:	b002      	add	sp, #8
   13e2a:	bd70      	pop	{r4, r5, r6, pc}
    p_reg->INTENCLR = mask;
   13e2c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   13e30:	2202      	movs	r2, #2
   13e32:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   13e36:	2200      	movs	r2, #0
   13e38:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
   13e3c:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   13e40:	2201      	movs	r2, #1
   13e42:	60da      	str	r2, [r3, #12]
    nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
   13e44:	2301      	movs	r3, #1
   13e46:	f88d 3007 	strb.w	r3, [sp, #7]
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
   13e4a:	429d      	cmp	r5, r3
   13e4c:	d00f      	beq.n	13e6e <clock_stop+0x52>
   13e4e:	2600      	movs	r6, #0
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
   13e50:	f242 7410 	movw	r4, #10000	; 0x2710
   13e54:	e029      	b.n	13eaa <clock_stop+0x8e>
    p_reg->INTENCLR = mask;
   13e56:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   13e5a:	2201      	movs	r2, #1
   13e5c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   13e60:	2100      	movs	r1, #0
   13e62:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
   13e66:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   13e6a:	605a      	str	r2, [r3, #4]
}
   13e6c:	e7ea      	b.n	13e44 <clock_stop+0x28>
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
   13e6e:	f10d 0607 	add.w	r6, sp, #7
   13e72:	e7ed      	b.n	13e50 <clock_stop+0x34>
            if (p_clk_src != NULL)
   13e74:	b136      	cbz	r6, 13e84 <clock_stop+0x68>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   13e76:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   13e7a:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
   13e7e:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
   13e82:	6033      	str	r3, [r6, #0]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   13e84:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   13e88:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
   13e8c:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   13e90:	d122      	bne.n	13ed8 <clock_stop+0xbc>
    return false;
   13e92:	2300      	movs	r3, #0
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
   13e94:	b323      	cbz	r3, 13ee0 <clock_stop+0xc4>
   13e96:	b11e      	cbz	r6, 13ea0 <clock_stop+0x84>
   13e98:	f89d 3007 	ldrb.w	r3, [sp, #7]
   13e9c:	2b01      	cmp	r3, #1
   13e9e:	d11f      	bne.n	13ee0 <clock_stop+0xc4>
   13ea0:	2001      	movs	r0, #1
   13ea2:	f004 ff06 	bl	18cb2 <nrfx_busy_wait>
   13ea6:	3c01      	subs	r4, #1
   13ea8:	d01a      	beq.n	13ee0 <clock_stop+0xc4>
    switch (domain)
   13eaa:	2d00      	cmp	r5, #0
   13eac:	d0e2      	beq.n	13e74 <clock_stop+0x58>
   13eae:	2d01      	cmp	r5, #1
   13eb0:	d001      	beq.n	13eb6 <clock_stop+0x9a>
   13eb2:	2300      	movs	r3, #0
   13eb4:	e7ee      	b.n	13e94 <clock_stop+0x78>
            if (p_clk_src != NULL)
   13eb6:	b136      	cbz	r6, 13ec6 <clock_stop+0xaa>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   13eb8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   13ebc:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
   13ec0:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
   13ec4:	7033      	strb	r3, [r6, #0]
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   13ec6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   13eca:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
   13ece:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   13ed2:	d103      	bne.n	13edc <clock_stop+0xc0>
    return false;
   13ed4:	2300      	movs	r3, #0
   13ed6:	e7dd      	b.n	13e94 <clock_stop+0x78>
                return true;
   13ed8:	2301      	movs	r3, #1
   13eda:	e7db      	b.n	13e94 <clock_stop+0x78>
                return true;
   13edc:	2301      	movs	r3, #1
   13ede:	e7d9      	b.n	13e94 <clock_stop+0x78>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
   13ee0:	2d01      	cmp	r5, #1
   13ee2:	d1a1      	bne.n	13e28 <clock_stop+0xc>
            m_clock_cb.hfclk_started = false;
   13ee4:	4b01      	ldr	r3, [pc, #4]	; (13eec <clock_stop+0xd0>)
   13ee6:	2200      	movs	r2, #0
   13ee8:	715a      	strb	r2, [r3, #5]
   13eea:	e79d      	b.n	13e28 <clock_stop+0xc>
   13eec:	200009b4 	.word	0x200009b4

00013ef0 <nrfx_clock_init>:
nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    NRFX_ASSERT(event_handler);

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
   13ef0:	4b06      	ldr	r3, [pc, #24]	; (13f0c <nrfx_clock_init+0x1c>)
   13ef2:	791b      	ldrb	r3, [r3, #4]
   13ef4:	b93b      	cbnz	r3, 13f06 <nrfx_clock_init+0x16>
    else
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
   13ef6:	4b05      	ldr	r3, [pc, #20]	; (13f0c <nrfx_clock_init+0x1c>)
   13ef8:	6018      	str	r0, [r3, #0]
        m_clock_cb.module_initialized = true;
   13efa:	2201      	movs	r2, #1
   13efc:	711a      	strb	r2, [r3, #4]
#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_201)
        m_clock_cb.hfclk_started = false;
   13efe:	2200      	movs	r2, #0
   13f00:	715a      	strb	r2, [r3, #5]
    nrfx_err_t err_code = NRFX_SUCCESS;
   13f02:	4803      	ldr	r0, [pc, #12]	; (13f10 <nrfx_clock_init+0x20>)
   13f04:	4770      	bx	lr
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
   13f06:	4803      	ldr	r0, [pc, #12]	; (13f14 <nrfx_clock_init+0x24>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   13f08:	4770      	bx	lr
   13f0a:	bf00      	nop
   13f0c:	200009b4 	.word	0x200009b4
   13f10:	0bad0000 	.word	0x0bad0000
   13f14:	0bad000c 	.word	0x0bad000c

00013f18 <nrfx_power_clock_irq_handler>:
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
   13f18:	b508      	push	{r3, lr}
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   13f1a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   13f1e:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
   13f22:	b18b      	cbz	r3, 13f48 <nrfx_power_clock_irq_handler+0x30>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   13f24:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   13f28:	2200      	movs	r2, #0
   13f2a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   13f2e:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENCLR = mask;
   13f32:	2201      	movs	r2, #1
   13f34:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF_STARTED_MASK);

#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_201)
        if (!m_clock_cb.hfclk_started)
   13f38:	4b15      	ldr	r3, [pc, #84]	; (13f90 <nrfx_power_clock_irq_handler+0x78>)
   13f3a:	795b      	ldrb	r3, [r3, #5]
   13f3c:	b923      	cbnz	r3, 13f48 <nrfx_power_clock_irq_handler+0x30>
        {
            m_clock_cb.hfclk_started = true;
   13f3e:	4b14      	ldr	r3, [pc, #80]	; (13f90 <nrfx_power_clock_irq_handler+0x78>)
   13f40:	715a      	strb	r2, [r3, #5]
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
   13f42:	681b      	ldr	r3, [r3, #0]
   13f44:	2000      	movs	r0, #0
   13f46:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   13f48:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   13f4c:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
   13f50:	b19b      	cbz	r3, 13f7a <nrfx_power_clock_irq_handler+0x62>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   13f52:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   13f56:	2200      	movs	r2, #0
   13f58:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
   13f5c:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   13f60:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   13f64:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
   13f68:	f012 0f03 	tst.w	r2, #3
   13f6c:	d106      	bne.n	13f7c <nrfx_power_clock_irq_handler+0x64>
    p_reg->LFCLKSRC = (uint32_t)(source);
   13f6e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   13f72:	2201      	movs	r2, #1
   13f74:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   13f78:	609a      	str	r2, [r3, #8]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
   13f7a:	bd08      	pop	{r3, pc}
    p_reg->INTENCLR = mask;
   13f7c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   13f80:	2202      	movs	r2, #2
   13f82:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   13f86:	4b02      	ldr	r3, [pc, #8]	; (13f90 <nrfx_power_clock_irq_handler+0x78>)
   13f88:	681b      	ldr	r3, [r3, #0]
   13f8a:	2001      	movs	r0, #1
   13f8c:	4798      	blx	r3
}
   13f8e:	e7f4      	b.n	13f7a <nrfx_power_clock_irq_handler+0x62>
   13f90:	200009b4 	.word	0x200009b4

00013f94 <pin_in_use>:
 *
 * @return True if pin is in use.
 */
static bool pin_in_use(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
   13f94:	3008      	adds	r0, #8
   13f96:	4b03      	ldr	r3, [pc, #12]	; (13fa4 <pin_in_use+0x10>)
   13f98:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   13f9c:	f000 0001 	and.w	r0, r0, #1
   13fa0:	4770      	bx	lr
   13fa2:	bf00      	nop
   13fa4:	200000b4 	.word	0x200000b4

00013fa8 <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
   13fa8:	3008      	adds	r0, #8
   13faa:	4b03      	ldr	r3, [pc, #12]	; (13fb8 <pin_in_use_by_te+0x10>)
   13fac:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   13fb0:	f3c0 1040 	ubfx	r0, r0, #5, #1
   13fb4:	4770      	bx	lr
   13fb6:	bf00      	nop
   13fb8:	200000b4 	.word	0x200000b4

00013fbc <pin_has_trigger>:
 *
 * @return True if pin has trigger.
 */
static bool pin_has_trigger(uint32_t pin)
{
    return PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]) != NRFX_GPIOTE_TRIGGER_NONE;
   13fbc:	3008      	adds	r0, #8
   13fbe:	4b04      	ldr	r3, [pc, #16]	; (13fd0 <pin_has_trigger+0x14>)
   13fc0:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   13fc4:	f010 001c 	ands.w	r0, r0, #28
   13fc8:	bf18      	it	ne
   13fca:	2001      	movne	r0, #1
   13fcc:	4770      	bx	lr
   13fce:	bf00      	nop
   13fd0:	200000b4 	.word	0x200000b4

00013fd4 <pin_is_output>:
 *
 * @return True if pin is output.
 */
static bool pin_is_output(uint32_t pin)
{
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   13fd4:	3008      	adds	r0, #8
   13fd6:	4b03      	ldr	r3, [pc, #12]	; (13fe4 <pin_is_output+0x10>)
   13fd8:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   13fdc:	f3c0 0040 	ubfx	r0, r0, #1, #1
   13fe0:	4770      	bx	lr
   13fe2:	bf00      	nop
   13fe4:	200000b4 	.word	0x200000b4

00013fe8 <pin_te_get>:
}

/* Returns gpiote TE channel associated with the pin */
static uint8_t pin_te_get(nrfx_gpiote_pin_t pin)
{
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   13fe8:	3008      	adds	r0, #8
   13fea:	4b02      	ldr	r3, [pc, #8]	; (13ff4 <pin_te_get+0xc>)
   13fec:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   13ff0:	0b40      	lsrs	r0, r0, #13
   13ff2:	4770      	bx	lr
   13ff4:	200000b4 	.word	0x200000b4

00013ff8 <handler_in_use>:
}

static bool handler_in_use(int32_t handler_id)
{

    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   13ff8:	2200      	movs	r2, #0
   13ffa:	e004      	b.n	14006 <handler_in_use+0xe>
    {
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
   13ffc:	f04f 33ff 	mov.w	r3, #4294967295
   14000:	4283      	cmp	r3, r0
   14002:	d00f      	beq.n	14024 <handler_in_use+0x2c>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   14004:	3201      	adds	r2, #1
   14006:	2a2f      	cmp	r2, #47	; 0x2f
   14008:	d80a      	bhi.n	14020 <handler_in_use+0x28>
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
   1400a:	f102 0308 	add.w	r3, r2, #8
   1400e:	4906      	ldr	r1, [pc, #24]	; (14028 <handler_in_use+0x30>)
   14010:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
   14014:	f413 7f80 	tst.w	r3, #256	; 0x100
   14018:	d0f0      	beq.n	13ffc <handler_in_use+0x4>
   1401a:	f3c3 2343 	ubfx	r3, r3, #9, #4
   1401e:	e7ef      	b.n	14000 <handler_in_use+0x8>
        {
            return true;
        }
    }

    return false;
   14020:	2000      	movs	r0, #0
   14022:	4770      	bx	lr
            return true;
   14024:	2001      	movs	r0, #1
}
   14026:	4770      	bx	lr
   14028:	200000b4 	.word	0x200000b4

0001402c <find_handler>:
    return NRFX_SUCCESS;
}

static int32_t find_handler(nrfx_gpiote_interrupt_handler_t handler, void * p_context)
{
    for (uint32_t i = 0; i < NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS; i++)
   1402c:	2300      	movs	r3, #0
   1402e:	b113      	cbz	r3, 14036 <find_handler+0xa>
        {
            return i;
        }
    }

    return -1;
   14030:	f04f 30ff 	mov.w	r0, #4294967295
}
   14034:	4770      	bx	lr
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
   14036:	4a07      	ldr	r2, [pc, #28]	; (14054 <find_handler+0x28>)
   14038:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
   1403c:	4282      	cmp	r2, r0
   1403e:	d001      	beq.n	14044 <find_handler+0x18>
    for (uint32_t i = 0; i < NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS; i++)
   14040:	3301      	adds	r3, #1
   14042:	e7f4      	b.n	1402e <find_handler+0x2>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
   14044:	4a03      	ldr	r2, [pc, #12]	; (14054 <find_handler+0x28>)
   14046:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
   1404a:	6852      	ldr	r2, [r2, #4]
   1404c:	428a      	cmp	r2, r1
   1404e:	d1f7      	bne.n	14040 <find_handler+0x14>
            return i;
   14050:	4618      	mov	r0, r3
   14052:	4770      	bx	lr
   14054:	200000b4 	.word	0x200000b4

00014058 <channel_handler_get>:
}

/* Return handler associated with given pin or null. */
static nrfx_gpiote_handler_config_t const * channel_handler_get(nrfx_gpiote_pin_t pin)
{
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   14058:	3008      	adds	r0, #8
   1405a:	4b06      	ldr	r3, [pc, #24]	; (14074 <channel_handler_get+0x1c>)
   1405c:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
   14060:	f410 7f80 	tst.w	r0, #256	; 0x100
   14064:	d004      	beq.n	14070 <channel_handler_get+0x18>
   14066:	f3c0 2043 	ubfx	r0, r0, #9, #4
    if (handler_id == PIN_FLAG_NO_HANDLER)
    {
        return NULL;
    }

    return &m_cb.handlers[handler_id];
   1406a:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   1406e:	4770      	bx	lr
        return NULL;
   14070:	2000      	movs	r0, #0
}
   14072:	4770      	bx	lr
   14074:	200000b4 	.word	0x200000b4

00014078 <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
   14078:	b570      	push	{r4, r5, r6, lr}
   1407a:	4604      	mov	r4, r0
   1407c:	460d      	mov	r5, r1
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);
   1407e:	f7ff ffeb 	bl	14058 <channel_handler_get>

    if (handler)
   14082:	b120      	cbz	r0, 1408e <call_handler+0x16>
    {
        handler->handler(pin, trigger, handler->p_context);
   14084:	6806      	ldr	r6, [r0, #0]
   14086:	6842      	ldr	r2, [r0, #4]
   14088:	4629      	mov	r1, r5
   1408a:	4620      	mov	r0, r4
   1408c:	47b0      	blx	r6
    }
    if (m_cb.global_handler.handler)
   1408e:	4b04      	ldr	r3, [pc, #16]	; (140a0 <call_handler+0x28>)
   14090:	689b      	ldr	r3, [r3, #8]
   14092:	b123      	cbz	r3, 1409e <call_handler+0x26>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
   14094:	4a02      	ldr	r2, [pc, #8]	; (140a0 <call_handler+0x28>)
   14096:	68d2      	ldr	r2, [r2, #12]
   14098:	4629      	mov	r1, r5
   1409a:	4620      	mov	r0, r4
   1409c:	4798      	blx	r3
    }
}
   1409e:	bd70      	pop	{r4, r5, r6, pc}
   140a0:	200000b4 	.word	0x200000b4

000140a4 <release_handler>:
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   140a4:	f100 0208 	add.w	r2, r0, #8
   140a8:	4b0e      	ldr	r3, [pc, #56]	; (140e4 <release_handler+0x40>)
   140aa:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
   140ae:	f413 7f80 	tst.w	r3, #256	; 0x100
   140b2:	d016      	beq.n	140e2 <release_handler+0x3e>
{
   140b4:	b510      	push	{r4, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   140b6:	f3c3 2443 	ubfx	r4, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
   140ba:	4610      	mov	r0, r2
   140bc:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
   140c0:	4a08      	ldr	r2, [pc, #32]	; (140e4 <release_handler+0x40>)
   140c2:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    if (!handler_in_use(handler_id))
   140c6:	4620      	mov	r0, r4
   140c8:	f7ff ff96 	bl	13ff8 <handler_in_use>
   140cc:	b100      	cbz	r0, 140d0 <release_handler+0x2c>
}
   140ce:	bd10      	pop	{r4, pc}
        m_cb.handlers[handler_id].handler = NULL;
   140d0:	4804      	ldr	r0, [pc, #16]	; (140e4 <release_handler+0x40>)
   140d2:	2300      	movs	r3, #0
   140d4:	f840 3034 	str.w	r3, [r0, r4, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
   140d8:	4621      	mov	r1, r4
   140da:	3074      	adds	r0, #116	; 0x74
   140dc:	f7ff fe7c 	bl	13dd8 <nrfx_flag32_free>
        NRFX_ASSERT(err == NRFX_SUCCESS);
   140e0:	e7f5      	b.n	140ce <release_handler+0x2a>
   140e2:	4770      	bx	lr
   140e4:	200000b4 	.word	0x200000b4

000140e8 <pin_handler_trigger_uninit>:
{
   140e8:	b510      	push	{r4, lr}
   140ea:	4604      	mov	r4, r0
    if (pin_in_use_by_te(pin))
   140ec:	f7ff ff5c 	bl	13fa8 <pin_in_use_by_te>
   140f0:	b140      	cbz	r0, 14104 <pin_handler_trigger_uninit+0x1c>
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
   140f2:	4620      	mov	r0, r4
   140f4:	f7ff ff78 	bl	13fe8 <pin_te_get>
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
   140f8:	f500 70a2 	add.w	r0, r0, #324	; 0x144
   140fc:	4b06      	ldr	r3, [pc, #24]	; (14118 <pin_handler_trigger_uninit+0x30>)
   140fe:	2200      	movs	r2, #0
   14100:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
    release_handler(pin);
   14104:	4620      	mov	r0, r4
   14106:	f7ff ffcd 	bl	140a4 <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
   1410a:	3408      	adds	r4, #8
   1410c:	4b03      	ldr	r3, [pc, #12]	; (1411c <pin_handler_trigger_uninit+0x34>)
   1410e:	2200      	movs	r2, #0
   14110:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
}
   14114:	bd10      	pop	{r4, pc}
   14116:	bf00      	nop
   14118:	40006000 	.word	0x40006000
   1411c:	200000b4 	.word	0x200000b4

00014120 <pin_handler_set>:
{
   14120:	b570      	push	{r4, r5, r6, lr}
   14122:	b082      	sub	sp, #8
   14124:	4606      	mov	r6, r0
   14126:	460c      	mov	r4, r1
   14128:	4615      	mov	r5, r2
    release_handler(pin);
   1412a:	f7ff ffbb 	bl	140a4 <release_handler>
    if (!handler)
   1412e:	b324      	cbz	r4, 1417a <pin_handler_set+0x5a>
    handler_id = find_handler(handler, p_context);
   14130:	4629      	mov	r1, r5
   14132:	4620      	mov	r0, r4
   14134:	f7ff ff7a 	bl	1402c <find_handler>
    if (handler_id < 0)
   14138:	1e03      	subs	r3, r0, #0
   1413a:	db13      	blt.n	14164 <pin_handler_set+0x44>
    m_cb.handlers[handler_id].handler = handler;
   1413c:	4a10      	ldr	r2, [pc, #64]	; (14180 <pin_handler_set+0x60>)
   1413e:	f842 4033 	str.w	r4, [r2, r3, lsl #3]
    m_cb.handlers[handler_id].p_context = p_context;
   14142:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
   14146:	604d      	str	r5, [r1, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   14148:	025b      	lsls	r3, r3, #9
   1414a:	b29b      	uxth	r3, r3
   1414c:	f106 0008 	add.w	r0, r6, #8
   14150:	f832 1010 	ldrh.w	r1, [r2, r0, lsl #1]
   14154:	430b      	orrs	r3, r1
   14156:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   1415a:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    return NRFX_SUCCESS;
   1415e:	4809      	ldr	r0, [pc, #36]	; (14184 <pin_handler_set+0x64>)
}
   14160:	b002      	add	sp, #8
   14162:	bd70      	pop	{r4, r5, r6, pc}
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
   14164:	f10d 0107 	add.w	r1, sp, #7
   14168:	4807      	ldr	r0, [pc, #28]	; (14188 <pin_handler_set+0x68>)
   1416a:	f7ff fe0d 	bl	13d88 <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
   1416e:	4b05      	ldr	r3, [pc, #20]	; (14184 <pin_handler_set+0x64>)
   14170:	4298      	cmp	r0, r3
   14172:	d1f5      	bne.n	14160 <pin_handler_set+0x40>
        handler_id = (int32_t)id;
   14174:	f89d 3007 	ldrb.w	r3, [sp, #7]
   14178:	e7e0      	b.n	1413c <pin_handler_set+0x1c>
        return NRFX_SUCCESS;
   1417a:	4802      	ldr	r0, [pc, #8]	; (14184 <pin_handler_set+0x64>)
   1417c:	e7f0      	b.n	14160 <pin_handler_set+0x40>
   1417e:	bf00      	nop
   14180:	200000b4 	.word	0x200000b4
   14184:	0bad0000 	.word	0x0bad0000
   14188:	20000128 	.word	0x20000128

0001418c <gpiote_evt_handle>:
    } while (input_read_and_check(input, pins_to_check));
}
#endif // defined(NRF_GPIO_LATCH_PRESENT)

static void gpiote_evt_handle(uint32_t mask)
{
   1418c:	b538      	push	{r3, r4, r5, lr}
   1418e:	4604      	mov	r4, r0
    while (mask)
   14190:	e018      	b.n	141c4 <gpiote_evt_handle+0x38>
    {
        uint32_t ch = NRF_CTZ(mask);
   14192:	fa94 f3a4 	rbit	r3, r4
   14196:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
   1419a:	2201      	movs	r2, #1
   1419c:	409a      	lsls	r2, r3
   1419e:	ea24 0402 	bic.w	r4, r4, r2
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   141a2:	4a0a      	ldr	r2, [pc, #40]	; (141cc <gpiote_evt_handle+0x40>)
   141a4:	f503 73a2 	add.w	r3, r3, #324	; 0x144
   141a8:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
   141ac:	f3c5 2505 	ubfx	r5, r5, #8, #6
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
   141b0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
        nrfx_gpiote_pin_t pin = nrf_gpiote_event_pin_get(NRF_GPIOTE, ch);
        nrf_gpiote_polarity_t polarity = nrf_gpiote_event_polarity_get(NRF_GPIOTE, ch);

        call_handler(pin, gpiote_polarity_to_trigger(polarity));
   141b4:	f3c0 4001 	ubfx	r0, r0, #16, #2
   141b8:	f004 fe10 	bl	18ddc <gpiote_polarity_to_trigger>
   141bc:	4601      	mov	r1, r0
   141be:	4628      	mov	r0, r5
   141c0:	f7ff ff5a 	bl	14078 <call_handler>
    while (mask)
   141c4:	2c00      	cmp	r4, #0
   141c6:	d1e4      	bne.n	14192 <gpiote_evt_handle+0x6>
    }
}
   141c8:	bd38      	pop	{r3, r4, r5, pc}
   141ca:	bf00      	nop
   141cc:	40006000 	.word	0x40006000

000141d0 <latch_pending_read_and_check>:
{
   141d0:	b082      	sub	sp, #8
   141d2:	4684      	mov	ip, r0
    NRF_GPIO_Type * gpio_regs[GPIO_COUNT] = GPIO_REG_LIST;
   141d4:	4b11      	ldr	r3, [pc, #68]	; (1421c <latch_pending_read_and_check+0x4c>)
   141d6:	e893 0003 	ldmia.w	r3, {r0, r1}
   141da:	ab02      	add	r3, sp, #8
   141dc:	e903 0003 	stmdb	r3, {r0, r1}
    for (i = start_port; i < (start_port + length); i++)
   141e0:	4660      	mov	r0, ip
   141e2:	2300      	movs	r3, #0
   141e4:	e00b      	b.n	141fe <latch_pending_read_and_check+0x2e>
        *p_masks = gpio_regs[i]->LATCH;
   141e6:	aa02      	add	r2, sp, #8
   141e8:	eb02 0283 	add.w	r2, r2, r3, lsl #2
   141ec:	f852 2c08 	ldr.w	r2, [r2, #-8]
   141f0:	f8d2 1520 	ldr.w	r1, [r2, #1312]	; 0x520
   141f4:	f840 1b04 	str.w	r1, [r0], #4
        gpio_regs[i]->LATCH = *p_masks;
   141f8:	f8c2 1520 	str.w	r1, [r2, #1312]	; 0x520
    for (i = start_port; i < (start_port + length); i++)
   141fc:	3301      	adds	r3, #1
   141fe:	2b01      	cmp	r3, #1
   14200:	d9f1      	bls.n	141e6 <latch_pending_read_and_check+0x16>
    for (uint32_t port_idx = 0; port_idx < GPIO_COUNT; port_idx++)
   14202:	2300      	movs	r3, #0
   14204:	2b01      	cmp	r3, #1
   14206:	d804      	bhi.n	14212 <latch_pending_read_and_check+0x42>
        if (latch[port_idx])
   14208:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
   1420c:	b922      	cbnz	r2, 14218 <latch_pending_read_and_check+0x48>
    for (uint32_t port_idx = 0; port_idx < GPIO_COUNT; port_idx++)
   1420e:	3301      	adds	r3, #1
   14210:	e7f8      	b.n	14204 <latch_pending_read_and_check+0x34>
    return false;
   14212:	2000      	movs	r0, #0
}
   14214:	b002      	add	sp, #8
   14216:	4770      	bx	lr
            return true;
   14218:	2001      	movs	r0, #1
   1421a:	e7fb      	b.n	14214 <latch_pending_read_and_check+0x44>
   1421c:	00019860 	.word	0x00019860

00014220 <next_sense_cond_call_handler>:
{
   14220:	b570      	push	{r4, r5, r6, lr}
   14222:	4604      	mov	r4, r0
   14224:	460d      	mov	r5, r1
   14226:	4616      	mov	r6, r2
    if (is_level(trigger))
   14228:	4608      	mov	r0, r1
   1422a:	f004 fdd9 	bl	18de0 <is_level>
   1422e:	b9d0      	cbnz	r0, 14266 <next_sense_cond_call_handler+0x46>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   14230:	2e02      	cmp	r6, #2
   14232:	d052      	beq.n	142da <next_sense_cond_call_handler+0xba>
   14234:	2002      	movs	r0, #2
    *p_pin = pin_number & 0x1F;
   14236:	f004 021f 	and.w	r2, r4, #31
    return pin_number >> 5;
   1423a:	0961      	lsrs	r1, r4, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1423c:	2901      	cmp	r1, #1
   1423e:	d04e      	beq.n	142de <next_sense_cond_call_handler+0xbe>
        case 0: return NRF_P0;
   14240:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    uint32_t cnf = reg->PIN_CNF[pin_number];
   14244:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
   14248:	f851 3022 	ldr.w	r3, [r1, r2, lsl #2]
    cnf &= ~to_update;
   1424c:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   14250:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
    reg->PIN_CNF[pin_number] = cnf;
   14254:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
   14258:	2d03      	cmp	r5, #3
   1425a:	d044      	beq.n	142e6 <next_sense_cond_call_handler+0xc6>
   1425c:	2e02      	cmp	r6, #2
   1425e:	d040      	beq.n	142e2 <next_sense_cond_call_handler+0xc2>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
   14260:	2e03      	cmp	r6, #3
   14262:	d045      	beq.n	142f0 <next_sense_cond_call_handler+0xd0>
}
   14264:	bd70      	pop	{r4, r5, r6, pc}
        call_handler(pin, trigger);
   14266:	4629      	mov	r1, r5
   14268:	4620      	mov	r0, r4
   1426a:	f7ff ff05 	bl	14078 <call_handler>
    *p_pin = pin_number & 0x1F;
   1426e:	f004 031f 	and.w	r3, r4, #31
    return pin_number >> 5;
   14272:	0962      	lsrs	r2, r4, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   14274:	2a01      	cmp	r2, #1
   14276:	d02a      	beq.n	142ce <next_sense_cond_call_handler+0xae>
        case 0: return NRF_P0;
   14278:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   1427c:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   14280:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14284:	f3c3 4301 	ubfx	r3, r3, #16, #2
        if (nrf_gpio_pin_sense_get(pin) == sense)
   14288:	429e      	cmp	r6, r3
   1428a:	d1eb      	bne.n	14264 <next_sense_cond_call_handler+0x44>
    *p_pin = pin_number & 0x1F;
   1428c:	f004 031f 	and.w	r3, r4, #31
    return pin_number >> 5;
   14290:	0962      	lsrs	r2, r4, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   14292:	2a01      	cmp	r2, #1
   14294:	d01d      	beq.n	142d2 <next_sense_cond_call_handler+0xb2>
        case 0: return NRF_P0;
   14296:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    uint32_t cnf = reg->PIN_CNF[pin_number];
   1429a:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   1429e:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
    cnf &= ~to_update;
   142a2:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf;
   142a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    *p_pin = pin_number & 0x1F;
   142aa:	f004 031f 	and.w	r3, r4, #31
    return pin_number >> 5;
   142ae:	0964      	lsrs	r4, r4, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   142b0:	2c01      	cmp	r4, #1
   142b2:	d010      	beq.n	142d6 <next_sense_cond_call_handler+0xb6>
        case 0: return NRF_P0;
   142b4:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    uint32_t cnf = reg->PIN_CNF[pin_number];
   142b8:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   142bc:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
    cnf &= ~to_update;
   142c0:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   142c4:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
    reg->PIN_CNF[pin_number] = cnf;
   142c8:	f841 6023 	str.w	r6, [r1, r3, lsl #2]
   142cc:	e7ca      	b.n	14264 <next_sense_cond_call_handler+0x44>
        case 1: return NRF_P1;
   142ce:	4a0a      	ldr	r2, [pc, #40]	; (142f8 <next_sense_cond_call_handler+0xd8>)
   142d0:	e7d4      	b.n	1427c <next_sense_cond_call_handler+0x5c>
   142d2:	4909      	ldr	r1, [pc, #36]	; (142f8 <next_sense_cond_call_handler+0xd8>)
   142d4:	e7e1      	b.n	1429a <next_sense_cond_call_handler+0x7a>
   142d6:	4908      	ldr	r1, [pc, #32]	; (142f8 <next_sense_cond_call_handler+0xd8>)
   142d8:	e7ee      	b.n	142b8 <next_sense_cond_call_handler+0x98>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   142da:	2003      	movs	r0, #3
   142dc:	e7ab      	b.n	14236 <next_sense_cond_call_handler+0x16>
   142de:	4906      	ldr	r1, [pc, #24]	; (142f8 <next_sense_cond_call_handler+0xd8>)
   142e0:	e7b0      	b.n	14244 <next_sense_cond_call_handler+0x24>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
   142e2:	2d01      	cmp	r5, #1
   142e4:	d1bc      	bne.n	14260 <next_sense_cond_call_handler+0x40>
            call_handler(pin, trigger);
   142e6:	4629      	mov	r1, r5
   142e8:	4620      	mov	r0, r4
   142ea:	f7ff fec5 	bl	14078 <call_handler>
}
   142ee:	e7b9      	b.n	14264 <next_sense_cond_call_handler+0x44>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
   142f0:	2d02      	cmp	r5, #2
   142f2:	d1b7      	bne.n	14264 <next_sense_cond_call_handler+0x44>
   142f4:	e7f7      	b.n	142e6 <next_sense_cond_call_handler+0xc6>
   142f6:	bf00      	nop
   142f8:	50000300 	.word	0x50000300

000142fc <port_event_handle>:
{
   142fc:	b570      	push	{r4, r5, r6, lr}
   142fe:	b084      	sub	sp, #16
    NRF_GPIO_Type * gpio_regs[GPIO_COUNT] = GPIO_REG_LIST;
   14300:	4a2f      	ldr	r2, [pc, #188]	; (143c0 <port_event_handle+0xc4>)
   14302:	466b      	mov	r3, sp
   14304:	e892 0003 	ldmia.w	r2, {r0, r1}
   14308:	e883 0003 	stmia.w	r3, {r0, r1}
    for (i = start_port; i < (start_port + length); i++)
   1430c:	2300      	movs	r3, #0
   1430e:	a802      	add	r0, sp, #8
   14310:	e00b      	b.n	1432a <port_event_handle+0x2e>
        *p_masks = gpio_regs[i]->LATCH;
   14312:	aa04      	add	r2, sp, #16
   14314:	eb02 0283 	add.w	r2, r2, r3, lsl #2
   14318:	f852 2c10 	ldr.w	r2, [r2, #-16]
   1431c:	f8d2 1520 	ldr.w	r1, [r2, #1312]	; 0x520
   14320:	f840 1b04 	str.w	r1, [r0], #4
        gpio_regs[i]->LATCH = *p_masks;
   14324:	f8c2 1520 	str.w	r1, [r2, #1312]	; 0x520
    for (i = start_port; i < (start_port + length); i++)
   14328:	3301      	adds	r3, #1
   1432a:	2b01      	cmp	r3, #1
   1432c:	d9f1      	bls.n	14312 <port_event_handle+0x16>
   1432e:	e042      	b.n	143b6 <port_event_handle+0xba>
        case 1: return NRF_P1;
   14330:	4e24      	ldr	r6, [pc, #144]	; (143c4 <port_event_handle+0xc8>)
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   14332:	f505 73e0 	add.w	r3, r5, #448	; 0x1c0
   14336:	f856 2023 	ldr.w	r2, [r6, r3, lsl #2]
                next_sense_cond_call_handler(pin, trigger, sense);
   1433a:	f3c2 4201 	ubfx	r2, r2, #16, #2
   1433e:	f7ff ff6f 	bl	14220 <next_sense_cond_call_handler>
    reg->LATCH = (1 << pin_number);
   14342:	2301      	movs	r3, #1
   14344:	40ab      	lsls	r3, r5
   14346:	f8c6 3520 	str.w	r3, [r6, #1312]	; 0x520
            while (latch[i])
   1434a:	ab04      	add	r3, sp, #16
   1434c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
   14350:	f853 0c08 	ldr.w	r0, [r3, #-8]
   14354:	b310      	cbz	r0, 1439c <port_event_handle+0xa0>
                uint32_t pin = NRF_CTZ(latch[i]);
   14356:	fa90 f0a0 	rbit	r0, r0
   1435a:	fab0 f080 	clz	r0, r0
                pin += 32 * i;
   1435e:	eb00 1044 	add.w	r0, r0, r4, lsl #5
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   14362:	f100 0208 	add.w	r2, r0, #8
   14366:	4b18      	ldr	r3, [pc, #96]	; (143c8 <port_event_handle+0xcc>)
   14368:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
   1436c:	f3c1 0182 	ubfx	r1, r1, #2, #3
 * @param[in,out] p_mask Pointer to mask with bit fields.
 */
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
   14370:	08c5      	lsrs	r5, r0, #3
    bit = BITMASK_RELBIT_GET(bit);
   14372:	f000 0207 	and.w	r2, r0, #7
    p_mask8[byte_idx] &= ~(1 << bit);
   14376:	f10d 0c08 	add.w	ip, sp, #8
   1437a:	2301      	movs	r3, #1
   1437c:	fa03 f202 	lsl.w	r2, r3, r2
   14380:	f81c 3005 	ldrb.w	r3, [ip, r5]
   14384:	ea23 0302 	bic.w	r3, r3, r2
   14388:	f80c 3005 	strb.w	r3, [ip, r5]
    *p_pin = pin_number & 0x1F;
   1438c:	f000 051f 	and.w	r5, r0, #31
    return pin_number >> 5;
   14390:	0943      	lsrs	r3, r0, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   14392:	2b01      	cmp	r3, #1
   14394:	d0cc      	beq.n	14330 <port_event_handle+0x34>
        case 0: return NRF_P0;
   14396:	f04f 46a0 	mov.w	r6, #1342177280	; 0x50000000
   1439a:	e7ca      	b.n	14332 <port_event_handle+0x36>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
   1439c:	3401      	adds	r4, #1
   1439e:	2c01      	cmp	r4, #1
   143a0:	d9d3      	bls.n	1434a <port_event_handle+0x4e>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   143a2:	4b0a      	ldr	r3, [pc, #40]	; (143cc <port_event_handle+0xd0>)
   143a4:	2200      	movs	r2, #0
   143a6:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
   143aa:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
    } while (latch_pending_read_and_check(latch));
   143ae:	a802      	add	r0, sp, #8
   143b0:	f7ff ff0e 	bl	141d0 <latch_pending_read_and_check>
   143b4:	b108      	cbz	r0, 143ba <port_event_handle+0xbe>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
   143b6:	2400      	movs	r4, #0
   143b8:	e7f1      	b.n	1439e <port_event_handle+0xa2>
}
   143ba:	b004      	add	sp, #16
   143bc:	bd70      	pop	{r4, r5, r6, pc}
   143be:	bf00      	nop
   143c0:	00019860 	.word	0x00019860
   143c4:	50000300 	.word	0x50000300
   143c8:	200000b4 	.word	0x200000b4
   143cc:	40006000 	.word	0x40006000

000143d0 <nrfx_gpiote_input_configure>:
{
   143d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   143d4:	4604      	mov	r4, r0
   143d6:	4615      	mov	r5, r2
   143d8:	461e      	mov	r6, r3
    if (p_input_config)
   143da:	b371      	cbz	r1, 1443a <nrfx_gpiote_input_configure+0x6a>
   143dc:	460f      	mov	r7, r1
        if (pin_is_task_output(pin))
   143de:	f004 fce7 	bl	18db0 <pin_is_task_output>
   143e2:	2800      	cmp	r0, #0
   143e4:	f040 8099 	bne.w	1451a <nrfx_gpiote_input_configure+0x14a>
    *p_pin = pin_number & 0x1F;
   143e8:	f004 021f 	and.w	r2, r4, #31
    return pin_number >> 5;
   143ec:	0963      	lsrs	r3, r4, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   143ee:	2b01      	cmp	r3, #1
   143f0:	d045      	beq.n	1447e <nrfx_gpiote_input_configure+0xae>
        case 0: return NRF_P0;
   143f2:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
    uint32_t cnf = reg->PIN_CNF[pin_number];
   143f6:	f502 73e0 	add.w	r3, r2, #448	; 0x1c0
   143fa:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   143fe:	2f00      	cmp	r7, #0
   14400:	d03f      	beq.n	14482 <nrfx_gpiote_input_configure+0xb2>
   14402:	210c      	movs	r1, #12
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   14404:	f041 0103 	orr.w	r1, r1, #3
    cnf &= ~to_update;
   14408:	ea23 0301 	bic.w	r3, r3, r1
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
   1440c:	2f00      	cmp	r7, #0
   1440e:	d03a      	beq.n	14486 <nrfx_gpiote_input_configure+0xb6>
   14410:	7839      	ldrb	r1, [r7, #0]
   14412:	0089      	lsls	r1, r1, #2
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   14414:	430b      	orrs	r3, r1
    reg->PIN_CNF[pin_number] = cnf;
   14416:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
   1441a:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
   1441e:	4a43      	ldr	r2, [pc, #268]	; (1452c <nrfx_gpiote_input_configure+0x15c>)
   14420:	f104 0108 	add.w	r1, r4, #8
   14424:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
   14428:	f023 0302 	bic.w	r3, r3, #2
   1442c:	b29b      	uxth	r3, r3
   1442e:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
   14432:	f043 0301 	orr.w	r3, r3, #1
   14436:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_trigger_config)
   1443a:	b1bd      	cbz	r5, 1446c <nrfx_gpiote_input_configure+0x9c>
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
   1443c:	782f      	ldrb	r7, [r5, #0]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
   1443e:	f8d5 8004 	ldr.w	r8, [r5, #4]
        if (pin_is_output(pin))
   14442:	4620      	mov	r0, r4
   14444:	f7ff fdc6 	bl	13fd4 <pin_is_output>
   14448:	b1f8      	cbz	r0, 1448a <nrfx_gpiote_input_configure+0xba>
            if (use_evt)
   1444a:	f1b8 0f00 	cmp.w	r8, #0
   1444e:	d166      	bne.n	1451e <nrfx_gpiote_input_configure+0x14e>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
   14450:	4a36      	ldr	r2, [pc, #216]	; (1452c <nrfx_gpiote_input_configure+0x15c>)
   14452:	f104 0108 	add.w	r1, r4, #8
   14456:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
   1445a:	f023 031c 	bic.w	r3, r3, #28
   1445e:	b29b      	uxth	r3, r3
   14460:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
   14464:	ea43 0387 	orr.w	r3, r3, r7, lsl #2
   14468:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_handler_config)
   1446c:	2e00      	cmp	r6, #0
   1446e:	d05a      	beq.n	14526 <nrfx_gpiote_input_configure+0x156>
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
   14470:	6872      	ldr	r2, [r6, #4]
   14472:	6831      	ldr	r1, [r6, #0]
   14474:	4620      	mov	r0, r4
   14476:	f7ff fe53 	bl	14120 <pin_handler_set>
}
   1447a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        case 1: return NRF_P1;
   1447e:	482c      	ldr	r0, [pc, #176]	; (14530 <nrfx_gpiote_input_configure+0x160>)
   14480:	e7b9      	b.n	143f6 <nrfx_gpiote_input_configure+0x26>
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   14482:	2100      	movs	r1, #0
   14484:	e7be      	b.n	14404 <nrfx_gpiote_input_configure+0x34>
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
   14486:	2100      	movs	r1, #0
   14488:	e7c4      	b.n	14414 <nrfx_gpiote_input_configure+0x44>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
   1448a:	4a28      	ldr	r2, [pc, #160]	; (1452c <nrfx_gpiote_input_configure+0x15c>)
   1448c:	f104 0108 	add.w	r1, r4, #8
   14490:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
   14494:	f023 0320 	bic.w	r3, r3, #32
   14498:	04db      	lsls	r3, r3, #19
   1449a:	0cdb      	lsrs	r3, r3, #19
   1449c:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
            if (use_evt)
   144a0:	f1b8 0f00 	cmp.w	r8, #0
   144a4:	d0d4      	beq.n	14450 <nrfx_gpiote_input_configure+0x80>
                if (!edge)
   144a6:	2f03      	cmp	r7, #3
   144a8:	d83b      	bhi.n	14522 <nrfx_gpiote_input_configure+0x152>
                uint8_t ch = *p_trigger_config->p_in_channel;
   144aa:	686b      	ldr	r3, [r5, #4]
   144ac:	781d      	ldrb	r5, [r3, #0]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
   144ae:	b937      	cbnz	r7, 144be <nrfx_gpiote_input_configure+0xee>
    p_reg->CONFIG[idx] = 0;
   144b0:	f505 75a2 	add.w	r5, r5, #324	; 0x144
   144b4:	4b1f      	ldr	r3, [pc, #124]	; (14534 <nrfx_gpiote_input_configure+0x164>)
   144b6:	2200      	movs	r2, #0
   144b8:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
#if defined(NRF9160_XXAA) || defined(NRF5340_XXAA)
    p_reg->CONFIG[idx] = 0;
#endif
}
   144bc:	e7c8      	b.n	14450 <nrfx_gpiote_input_configure+0x80>
                    nrf_gpiote_polarity_t polarity = gpiote_trigger_to_polarity(trigger);
   144be:	4638      	mov	r0, r7
   144c0:	f004 fc8d 	bl	18dde <gpiote_trigger_to_polarity>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   144c4:	4b1b      	ldr	r3, [pc, #108]	; (14534 <nrfx_gpiote_input_configure+0x164>)
   144c6:	f505 72a2 	add.w	r2, r5, #324	; 0x144
   144ca:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   144ce:	f021 0103 	bic.w	r1, r1, #3
   144d2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   144d6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   144da:	f421 314f 	bic.w	r1, r1, #211968	; 0x33c00
   144de:	f421 7140 	bic.w	r1, r1, #768	; 0x300
   144e2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   144e6:	f853 c022 	ldr.w	ip, [r3, r2, lsl #2]
   144ea:	0221      	lsls	r1, r4, #8
   144ec:	f401 517c 	and.w	r1, r1, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
   144f0:	0400      	lsls	r0, r0, #16
   144f2:	f400 3040 	and.w	r0, r0, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   144f6:	4301      	orrs	r1, r0
   144f8:	ea4c 0101 	orr.w	r1, ip, r1
   144fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   14500:	036b      	lsls	r3, r5, #13
   14502:	b29b      	uxth	r3, r3
   14504:	4a09      	ldr	r2, [pc, #36]	; (1452c <nrfx_gpiote_input_configure+0x15c>)
   14506:	f104 0108 	add.w	r1, r4, #8
   1450a:	f832 0011 	ldrh.w	r0, [r2, r1, lsl #1]
   1450e:	4303      	orrs	r3, r0
   14510:	f043 0320 	orr.w	r3, r3, #32
   14514:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
   14518:	e79a      	b.n	14450 <nrfx_gpiote_input_configure+0x80>
            return NRFX_ERROR_INVALID_PARAM;
   1451a:	4807      	ldr	r0, [pc, #28]	; (14538 <nrfx_gpiote_input_configure+0x168>)
   1451c:	e7ad      	b.n	1447a <nrfx_gpiote_input_configure+0xaa>
                return NRFX_ERROR_INVALID_PARAM;
   1451e:	4806      	ldr	r0, [pc, #24]	; (14538 <nrfx_gpiote_input_configure+0x168>)
   14520:	e7ab      	b.n	1447a <nrfx_gpiote_input_configure+0xaa>
                    return NRFX_ERROR_INVALID_PARAM;
   14522:	4805      	ldr	r0, [pc, #20]	; (14538 <nrfx_gpiote_input_configure+0x168>)
   14524:	e7a9      	b.n	1447a <nrfx_gpiote_input_configure+0xaa>
        err = NRFX_SUCCESS;
   14526:	4805      	ldr	r0, [pc, #20]	; (1453c <nrfx_gpiote_input_configure+0x16c>)
   14528:	e7a7      	b.n	1447a <nrfx_gpiote_input_configure+0xaa>
   1452a:	bf00      	nop
   1452c:	200000b4 	.word	0x200000b4
   14530:	50000300 	.word	0x50000300
   14534:	40006000 	.word	0x40006000
   14538:	0bad0004 	.word	0x0bad0004
   1453c:	0bad0000 	.word	0x0bad0000

00014540 <nrfx_gpiote_output_configure>:
{
   14540:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   14542:	4604      	mov	r4, r0
   14544:	4615      	mov	r5, r2
    if (p_config)
   14546:	2900      	cmp	r1, #0
   14548:	d055      	beq.n	145f6 <nrfx_gpiote_output_configure+0xb6>
   1454a:	460e      	mov	r6, r1
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
   1454c:	f004 fc3f 	bl	18dce <pin_is_input>
   14550:	b128      	cbz	r0, 1455e <nrfx_gpiote_output_configure+0x1e>
   14552:	4620      	mov	r0, r4
   14554:	f7ff fd28 	bl	13fa8 <pin_in_use_by_te>
   14558:	2800      	cmp	r0, #0
   1455a:	f040 80a2 	bne.w	146a2 <nrfx_gpiote_output_configure+0x162>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
   1455e:	4620      	mov	r0, r4
   14560:	f7ff fd2c 	bl	13fbc <pin_has_trigger>
   14564:	b118      	cbz	r0, 1456e <nrfx_gpiote_output_configure+0x2e>
   14566:	7873      	ldrb	r3, [r6, #1]
   14568:	2b01      	cmp	r3, #1
   1456a:	f000 809c 	beq.w	146a6 <nrfx_gpiote_output_configure+0x166>
        nrf_gpio_reconfigure(pin, &dir, &p_config->input_connect, &p_config->pull,
   1456e:	f106 0c01 	add.w	ip, r6, #1
   14572:	1cb7      	adds	r7, r6, #2
    *p_pin = pin_number & 0x1F;
   14574:	f004 021f 	and.w	r2, r4, #31
    return pin_number >> 5;
   14578:	0963      	lsrs	r3, r4, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1457a:	2b01      	cmp	r3, #1
   1457c:	d057      	beq.n	1462e <nrfx_gpiote_output_configure+0xee>
        case 0: return NRF_P0;
   1457e:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    uint32_t cnf = reg->PIN_CNF[pin_number];
   14582:	f502 73e0 	add.w	r3, r2, #448	; 0x1c0
   14586:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   1458a:	f1bc 0f00 	cmp.w	ip, #0
   1458e:	d050      	beq.n	14632 <nrfx_gpiote_output_configure+0xf2>
   14590:	2302      	movs	r3, #2
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   14592:	f043 0301 	orr.w	r3, r3, #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   14596:	2f00      	cmp	r7, #0
   14598:	d04d      	beq.n	14636 <nrfx_gpiote_output_configure+0xf6>
   1459a:	f04f 0e0c 	mov.w	lr, #12
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   1459e:	ea43 030e 	orr.w	r3, r3, lr
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
   145a2:	2e00      	cmp	r6, #0
   145a4:	d04a      	beq.n	1463c <nrfx_gpiote_output_configure+0xfc>
   145a6:	f44f 6ee0 	mov.w	lr, #1792	; 0x700
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   145aa:	ea43 030e 	orr.w	r3, r3, lr
    cnf &= ~to_update;
   145ae:	ea20 0003 	bic.w	r0, r0, r3
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
   145b2:	f1bc 0f00 	cmp.w	ip, #0
   145b6:	d044      	beq.n	14642 <nrfx_gpiote_output_configure+0x102>
   145b8:	7873      	ldrb	r3, [r6, #1]
   145ba:	005b      	lsls	r3, r3, #1
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   145bc:	f043 0301 	orr.w	r3, r3, #1
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
   145c0:	2f00      	cmp	r7, #0
   145c2:	d040      	beq.n	14646 <nrfx_gpiote_output_configure+0x106>
   145c4:	f896 c002 	ldrb.w	ip, [r6, #2]
   145c8:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
   145cc:	ea43 030c 	orr.w	r3, r3, ip
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
   145d0:	2e00      	cmp	r6, #0
   145d2:	d03b      	beq.n	1464c <nrfx_gpiote_output_configure+0x10c>
   145d4:	7836      	ldrb	r6, [r6, #0]
   145d6:	0236      	lsls	r6, r6, #8
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
   145d8:	4333      	orrs	r3, r6
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   145da:	4303      	orrs	r3, r0
    reg->PIN_CNF[pin_number] = cnf;
   145dc:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
   145e0:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
   145e4:	4a33      	ldr	r2, [pc, #204]	; (146b4 <nrfx_gpiote_output_configure+0x174>)
   145e6:	f104 0108 	add.w	r1, r4, #8
   145ea:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
   145ee:	f043 0303 	orr.w	r3, r3, #3
   145f2:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_task_config)
   145f6:	2d00      	cmp	r5, #0
   145f8:	d057      	beq.n	146aa <nrfx_gpiote_output_configure+0x16a>
        if (pin_is_input(pin))
   145fa:	4620      	mov	r0, r4
   145fc:	f004 fbe7 	bl	18dce <pin_is_input>
   14600:	2800      	cmp	r0, #0
   14602:	d154      	bne.n	146ae <nrfx_gpiote_output_configure+0x16e>
        uint32_t ch = p_task_config->task_ch;
   14604:	782b      	ldrb	r3, [r5, #0]
    p_reg->CONFIG[idx] = 0;
   14606:	f503 71a2 	add.w	r1, r3, #324	; 0x144
   1460a:	4a2b      	ldr	r2, [pc, #172]	; (146b8 <nrfx_gpiote_output_configure+0x178>)
   1460c:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
   14610:	4928      	ldr	r1, [pc, #160]	; (146b4 <nrfx_gpiote_output_configure+0x174>)
   14612:	f104 0008 	add.w	r0, r4, #8
   14616:	f831 2010 	ldrh.w	r2, [r1, r0, lsl #1]
   1461a:	f022 0220 	bic.w	r2, r2, #32
   1461e:	04d2      	lsls	r2, r2, #19
   14620:	0cd2      	lsrs	r2, r2, #19
   14622:	f821 2010 	strh.w	r2, [r1, r0, lsl #1]
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
   14626:	786a      	ldrb	r2, [r5, #1]
   14628:	b992      	cbnz	r2, 14650 <nrfx_gpiote_output_configure+0x110>
    return NRFX_SUCCESS;
   1462a:	4824      	ldr	r0, [pc, #144]	; (146bc <nrfx_gpiote_output_configure+0x17c>)
}
   1462c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        case 1: return NRF_P1;
   1462e:	4924      	ldr	r1, [pc, #144]	; (146c0 <nrfx_gpiote_output_configure+0x180>)
   14630:	e7a7      	b.n	14582 <nrfx_gpiote_output_configure+0x42>
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   14632:	2300      	movs	r3, #0
   14634:	e7ad      	b.n	14592 <nrfx_gpiote_output_configure+0x52>
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   14636:	f04f 0e00 	mov.w	lr, #0
   1463a:	e7b0      	b.n	1459e <nrfx_gpiote_output_configure+0x5e>
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
   1463c:	f04f 0e00 	mov.w	lr, #0
   14640:	e7b3      	b.n	145aa <nrfx_gpiote_output_configure+0x6a>
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
   14642:	2300      	movs	r3, #0
   14644:	e7ba      	b.n	145bc <nrfx_gpiote_output_configure+0x7c>
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
   14646:	f04f 0c00 	mov.w	ip, #0
   1464a:	e7bf      	b.n	145cc <nrfx_gpiote_output_configure+0x8c>
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
   1464c:	2600      	movs	r6, #0
   1464e:	e7c3      	b.n	145d8 <nrfx_gpiote_output_configure+0x98>
            nrf_gpiote_task_configure(NRF_GPIOTE, ch, pin,
   14650:	78af      	ldrb	r7, [r5, #2]
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
   14652:	4819      	ldr	r0, [pc, #100]	; (146b8 <nrfx_gpiote_output_configure+0x178>)
   14654:	f503 75a2 	add.w	r5, r3, #324	; 0x144
   14658:	f850 1025 	ldr.w	r1, [r0, r5, lsl #2]
   1465c:	f421 1199 	bic.w	r1, r1, #1253376	; 0x132000
   14660:	f421 51f8 	bic.w	r1, r1, #7936	; 0x1f00
   14664:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   14668:	f850 6025 	ldr.w	r6, [r0, r5, lsl #2]
   1466c:	0221      	lsls	r1, r4, #8
   1466e:	f401 517c 	and.w	r1, r1, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
   14672:	0412      	lsls	r2, r2, #16
   14674:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   14678:	430a      	orrs	r2, r1
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
   1467a:	0539      	lsls	r1, r7, #20
   1467c:	f401 1180 	and.w	r1, r1, #1048576	; 0x100000
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
   14680:	430a      	orrs	r2, r1
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   14682:	4332      	orrs	r2, r6
   14684:	f840 2025 	str.w	r2, [r0, r5, lsl #2]
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   14688:	035b      	lsls	r3, r3, #13
   1468a:	b29b      	uxth	r3, r3
   1468c:	4a09      	ldr	r2, [pc, #36]	; (146b4 <nrfx_gpiote_output_configure+0x174>)
   1468e:	3408      	adds	r4, #8
   14690:	f832 1014 	ldrh.w	r1, [r2, r4, lsl #1]
   14694:	430b      	orrs	r3, r1
   14696:	f043 0320 	orr.w	r3, r3, #32
   1469a:	f822 3014 	strh.w	r3, [r2, r4, lsl #1]
    return NRFX_SUCCESS;
   1469e:	4807      	ldr	r0, [pc, #28]	; (146bc <nrfx_gpiote_output_configure+0x17c>)
   146a0:	e7c4      	b.n	1462c <nrfx_gpiote_output_configure+0xec>
   146a2:	4808      	ldr	r0, [pc, #32]	; (146c4 <nrfx_gpiote_output_configure+0x184>)
   146a4:	e7c2      	b.n	1462c <nrfx_gpiote_output_configure+0xec>
   146a6:	4807      	ldr	r0, [pc, #28]	; (146c4 <nrfx_gpiote_output_configure+0x184>)
   146a8:	e7c0      	b.n	1462c <nrfx_gpiote_output_configure+0xec>
   146aa:	4804      	ldr	r0, [pc, #16]	; (146bc <nrfx_gpiote_output_configure+0x17c>)
   146ac:	e7be      	b.n	1462c <nrfx_gpiote_output_configure+0xec>
            return NRFX_ERROR_INVALID_PARAM;
   146ae:	4805      	ldr	r0, [pc, #20]	; (146c4 <nrfx_gpiote_output_configure+0x184>)
   146b0:	e7bc      	b.n	1462c <nrfx_gpiote_output_configure+0xec>
   146b2:	bf00      	nop
   146b4:	200000b4 	.word	0x200000b4
   146b8:	40006000 	.word	0x40006000
   146bc:	0bad0000 	.word	0x0bad0000
   146c0:	50000300 	.word	0x50000300
   146c4:	0bad0004 	.word	0x0bad0004

000146c8 <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
   146c8:	4b01      	ldr	r3, [pc, #4]	; (146d0 <nrfx_gpiote_global_callback_set+0x8>)
   146ca:	6098      	str	r0, [r3, #8]
    m_cb.global_handler.p_context = p_context;
   146cc:	60d9      	str	r1, [r3, #12]
}
   146ce:	4770      	bx	lr
   146d0:	200000b4 	.word	0x200000b4

000146d4 <nrfx_gpiote_channel_get>:
{
   146d4:	b538      	push	{r3, r4, r5, lr}
   146d6:	4604      	mov	r4, r0
   146d8:	460d      	mov	r5, r1
    if (pin_in_use_by_te(pin))
   146da:	f7ff fc65 	bl	13fa8 <pin_in_use_by_te>
   146de:	b140      	cbz	r0, 146f2 <nrfx_gpiote_channel_get+0x1e>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   146e0:	f104 0008 	add.w	r0, r4, #8
   146e4:	4b04      	ldr	r3, [pc, #16]	; (146f8 <nrfx_gpiote_channel_get+0x24>)
   146e6:	f833 3010 	ldrh.w	r3, [r3, r0, lsl #1]
   146ea:	0b5b      	lsrs	r3, r3, #13
   146ec:	702b      	strb	r3, [r5, #0]
        return NRFX_SUCCESS;
   146ee:	4803      	ldr	r0, [pc, #12]	; (146fc <nrfx_gpiote_channel_get+0x28>)
}
   146f0:	bd38      	pop	{r3, r4, r5, pc}
        return NRFX_ERROR_INVALID_PARAM;
   146f2:	4803      	ldr	r0, [pc, #12]	; (14700 <nrfx_gpiote_channel_get+0x2c>)
   146f4:	e7fc      	b.n	146f0 <nrfx_gpiote_channel_get+0x1c>
   146f6:	bf00      	nop
   146f8:	200000b4 	.word	0x200000b4
   146fc:	0bad0000 	.word	0x0bad0000
   14700:	0bad0004 	.word	0x0bad0004

00014704 <nrfx_gpiote_init>:
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   14704:	4b10      	ldr	r3, [pc, #64]	; (14748 <nrfx_gpiote_init+0x44>)
   14706:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
   1470a:	b10b      	cbz	r3, 14710 <nrfx_gpiote_init+0xc>
        return err_code;
   1470c:	480f      	ldr	r0, [pc, #60]	; (1474c <nrfx_gpiote_init+0x48>)
}
   1470e:	4770      	bx	lr
{
   14710:	b510      	push	{r4, lr}
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
   14712:	4c0d      	ldr	r4, [pc, #52]	; (14748 <nrfx_gpiote_init+0x44>)
   14714:	2260      	movs	r2, #96	; 0x60
   14716:	2100      	movs	r1, #0
   14718:	f104 0010 	add.w	r0, r4, #16
   1471c:	f003 fa90 	bl	17c40 <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
   14720:	2006      	movs	r0, #6
   14722:	f7fd f965 	bl	119f0 <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   14726:	4b0a      	ldr	r3, [pc, #40]	; (14750 <nrfx_gpiote_init+0x4c>)
   14728:	2200      	movs	r2, #0
   1472a:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
   1472e:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
    p_reg->INTENSET = mask;
   14732:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   14736:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
   1473a:	2301      	movs	r3, #1
   1473c:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
   14740:	6763      	str	r3, [r4, #116]	; 0x74
    return err_code;
   14742:	4804      	ldr	r0, [pc, #16]	; (14754 <nrfx_gpiote_init+0x50>)
}
   14744:	bd10      	pop	{r4, pc}
   14746:	bf00      	nop
   14748:	200000b4 	.word	0x200000b4
   1474c:	0bad0005 	.word	0x0bad0005
   14750:	40006000 	.word	0x40006000
   14754:	0bad0000 	.word	0x0bad0000

00014758 <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
   14758:	4b03      	ldr	r3, [pc, #12]	; (14768 <nrfx_gpiote_is_init+0x10>)
   1475a:	f893 0078 	ldrb.w	r0, [r3, #120]	; 0x78
}
   1475e:	3800      	subs	r0, #0
   14760:	bf18      	it	ne
   14762:	2001      	movne	r0, #1
   14764:	4770      	bx	lr
   14766:	bf00      	nop
   14768:	200000b4 	.word	0x200000b4

0001476c <nrfx_gpiote_channel_free>:
{
   1476c:	b508      	push	{r3, lr}
   1476e:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
   14770:	4801      	ldr	r0, [pc, #4]	; (14778 <nrfx_gpiote_channel_free+0xc>)
   14772:	f7ff fb31 	bl	13dd8 <nrfx_flag32_free>
}
   14776:	bd08      	pop	{r3, pc}
   14778:	20000124 	.word	0x20000124

0001477c <nrfx_gpiote_channel_alloc>:
{
   1477c:	b508      	push	{r3, lr}
   1477e:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
   14780:	4801      	ldr	r0, [pc, #4]	; (14788 <nrfx_gpiote_channel_alloc+0xc>)
   14782:	f7ff fb01 	bl	13d88 <nrfx_flag32_alloc>
}
   14786:	bd08      	pop	{r3, pc}
   14788:	20000124 	.word	0x20000124

0001478c <nrfx_gpiote_trigger_enable>:
{
   1478c:	b538      	push	{r3, r4, r5, lr}
   1478e:	4604      	mov	r4, r0
   14790:	460d      	mov	r5, r1
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   14792:	f7ff fc09 	bl	13fa8 <pin_in_use_by_te>
   14796:	b308      	cbz	r0, 147dc <nrfx_gpiote_trigger_enable+0x50>
   14798:	4620      	mov	r0, r4
   1479a:	f004 fb18 	bl	18dce <pin_is_input>
   1479e:	b1e8      	cbz	r0, 147dc <nrfx_gpiote_trigger_enable+0x50>
        uint8_t ch = pin_te_get(pin);
   147a0:	4620      	mov	r0, r4
   147a2:	f7ff fc21 	bl	13fe8 <pin_te_get>
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
   147a6:	0083      	lsls	r3, r0, #2
   147a8:	f503 7380 	add.w	r3, r3, #256	; 0x100
    return ((uint32_t)p_reg + event);
   147ac:	b29b      	uxth	r3, r3
   147ae:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   147b2:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   147b6:	2200      	movs	r2, #0
   147b8:	601a      	str	r2, [r3, #0]
   147ba:	681b      	ldr	r3, [r3, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
   147bc:	4a22      	ldr	r2, [pc, #136]	; (14848 <nrfx_gpiote_trigger_enable+0xbc>)
   147be:	f500 71a2 	add.w	r1, r0, #324	; 0x144
   147c2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
   147c6:	f043 0301 	orr.w	r3, r3, #1
   147ca:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
        if (int_enable)
   147ce:	b39d      	cbz	r5, 14838 <nrfx_gpiote_trigger_enable+0xac>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
   147d0:	2301      	movs	r3, #1
   147d2:	fa03 f000 	lsl.w	r0, r3, r0
    p_reg->INTENSET = mask;
   147d6:	f8c2 0304 	str.w	r0, [r2, #772]	; 0x304
}
   147da:	e02d      	b.n	14838 <nrfx_gpiote_trigger_enable+0xac>
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   147dc:	f104 0308 	add.w	r3, r4, #8
   147e0:	4a1a      	ldr	r2, [pc, #104]	; (1484c <nrfx_gpiote_trigger_enable+0xc0>)
   147e2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
   147e6:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
   147ea:	2b04      	cmp	r3, #4
   147ec:	d012      	beq.n	14814 <nrfx_gpiote_trigger_enable+0x88>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
   147ee:	2b05      	cmp	r3, #5
   147f0:	d023      	beq.n	1483a <nrfx_gpiote_trigger_enable+0xae>
    *p_pin = pin_number & 0x1F;
   147f2:	f004 021f 	and.w	r2, r4, #31
    return pin_number >> 5;
   147f6:	0963      	lsrs	r3, r4, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   147f8:	2b01      	cmp	r3, #1
   147fa:	d009      	beq.n	14810 <nrfx_gpiote_trigger_enable+0x84>
        case 0: return NRF_P0;
   147fc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    return p_reg->IN;
   14800:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   14804:	40d3      	lsrs	r3, r2
        sense = nrf_gpio_pin_read(pin) ? NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   14806:	f013 0f01 	tst.w	r3, #1
   1480a:	d018      	beq.n	1483e <nrfx_gpiote_trigger_enable+0xb2>
   1480c:	2003      	movs	r0, #3
   1480e:	e002      	b.n	14816 <nrfx_gpiote_trigger_enable+0x8a>
        case 1: return NRF_P1;
   14810:	4b0f      	ldr	r3, [pc, #60]	; (14850 <nrfx_gpiote_trigger_enable+0xc4>)
   14812:	e7f5      	b.n	14800 <nrfx_gpiote_trigger_enable+0x74>
        sense = NRF_GPIO_PIN_SENSE_LOW;
   14814:	2003      	movs	r0, #3
    *p_pin = pin_number & 0x1F;
   14816:	f004 021f 	and.w	r2, r4, #31
    return pin_number >> 5;
   1481a:	0964      	lsrs	r4, r4, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1481c:	2c01      	cmp	r4, #1
   1481e:	d010      	beq.n	14842 <nrfx_gpiote_trigger_enable+0xb6>
        case 0: return NRF_P0;
   14820:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    uint32_t cnf = reg->PIN_CNF[pin_number];
   14824:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
   14828:	f851 3022 	ldr.w	r3, [r1, r2, lsl #2]
    cnf &= ~to_update;
   1482c:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   14830:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
    reg->PIN_CNF[pin_number] = cnf;
   14834:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
}
   14838:	bd38      	pop	{r3, r4, r5, pc}
        sense = NRF_GPIO_PIN_SENSE_HIGH;
   1483a:	2002      	movs	r0, #2
   1483c:	e7eb      	b.n	14816 <nrfx_gpiote_trigger_enable+0x8a>
        sense = nrf_gpio_pin_read(pin) ? NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   1483e:	2002      	movs	r0, #2
   14840:	e7e9      	b.n	14816 <nrfx_gpiote_trigger_enable+0x8a>
        case 1: return NRF_P1;
   14842:	4903      	ldr	r1, [pc, #12]	; (14850 <nrfx_gpiote_trigger_enable+0xc4>)
   14844:	e7ee      	b.n	14824 <nrfx_gpiote_trigger_enable+0x98>
   14846:	bf00      	nop
   14848:	40006000 	.word	0x40006000
   1484c:	200000b4 	.word	0x200000b4
   14850:	50000300 	.word	0x50000300

00014854 <nrfx_gpiote_trigger_disable>:
{
   14854:	b510      	push	{r4, lr}
   14856:	4604      	mov	r4, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   14858:	f7ff fba6 	bl	13fa8 <pin_in_use_by_te>
   1485c:	b1a0      	cbz	r0, 14888 <nrfx_gpiote_trigger_disable+0x34>
   1485e:	4620      	mov	r0, r4
   14860:	f004 fab5 	bl	18dce <pin_is_input>
   14864:	b180      	cbz	r0, 14888 <nrfx_gpiote_trigger_disable+0x34>
        uint8_t ch = pin_te_get(pin);
   14866:	4620      	mov	r0, r4
   14868:	f7ff fbbe 	bl	13fe8 <pin_te_get>
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
   1486c:	2201      	movs	r2, #1
   1486e:	4082      	lsls	r2, r0
    p_reg->INTENCLR = mask;
   14870:	4b0e      	ldr	r3, [pc, #56]	; (148ac <nrfx_gpiote_trigger_disable+0x58>)
   14872:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   14876:	f500 70a2 	add.w	r0, r0, #324	; 0x144
   1487a:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
   1487e:	f022 0203 	bic.w	r2, r2, #3
   14882:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
}
   14886:	e00e      	b.n	148a6 <nrfx_gpiote_trigger_disable+0x52>
    *p_pin = pin_number & 0x1F;
   14888:	f004 031f 	and.w	r3, r4, #31
    return pin_number >> 5;
   1488c:	0964      	lsrs	r4, r4, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1488e:	2c01      	cmp	r4, #1
   14890:	d00a      	beq.n	148a8 <nrfx_gpiote_trigger_disable+0x54>
        case 0: return NRF_P0;
   14892:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    uint32_t cnf = reg->PIN_CNF[pin_number];
   14896:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   1489a:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
    cnf &= ~to_update;
   1489e:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf;
   148a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   148a6:	bd10      	pop	{r4, pc}
        case 1: return NRF_P1;
   148a8:	4901      	ldr	r1, [pc, #4]	; (148b0 <nrfx_gpiote_trigger_disable+0x5c>)
   148aa:	e7f4      	b.n	14896 <nrfx_gpiote_trigger_disable+0x42>
   148ac:	40006000 	.word	0x40006000
   148b0:	50000300 	.word	0x50000300

000148b4 <nrfx_gpiote_pin_uninit>:
{
   148b4:	b510      	push	{r4, lr}
   148b6:	4604      	mov	r4, r0
    if (!pin_in_use(pin))
   148b8:	f7ff fb6c 	bl	13f94 <pin_in_use>
   148bc:	b908      	cbnz	r0, 148c2 <nrfx_gpiote_pin_uninit+0xe>
        return NRFX_ERROR_INVALID_PARAM;
   148be:	480c      	ldr	r0, [pc, #48]	; (148f0 <nrfx_gpiote_pin_uninit+0x3c>)
}
   148c0:	bd10      	pop	{r4, pc}
    nrfx_gpiote_trigger_disable(pin);
   148c2:	4620      	mov	r0, r4
   148c4:	f7ff ffc6 	bl	14854 <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
   148c8:	4620      	mov	r0, r4
   148ca:	f7ff fc0d 	bl	140e8 <pin_handler_trigger_uninit>
    *p_pin = pin_number & 0x1F;
   148ce:	f004 031f 	and.w	r3, r4, #31
    return pin_number >> 5;
   148d2:	0964      	lsrs	r4, r4, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   148d4:	2c01      	cmp	r4, #1
   148d6:	d008      	beq.n	148ea <nrfx_gpiote_pin_uninit+0x36>
        case 0: return NRF_P0;
   148d8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
   148dc:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   148e0:	2102      	movs	r1, #2
   148e2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    return NRFX_SUCCESS;
   148e6:	4803      	ldr	r0, [pc, #12]	; (148f4 <nrfx_gpiote_pin_uninit+0x40>)
   148e8:	e7ea      	b.n	148c0 <nrfx_gpiote_pin_uninit+0xc>
        case 1: return NRF_P1;
   148ea:	4a03      	ldr	r2, [pc, #12]	; (148f8 <nrfx_gpiote_pin_uninit+0x44>)
   148ec:	e7f6      	b.n	148dc <nrfx_gpiote_pin_uninit+0x28>
   148ee:	bf00      	nop
   148f0:	0bad0004 	.word	0x0bad0004
   148f4:	0bad0000 	.word	0x0bad0000
   148f8:	50000300 	.word	0x50000300

000148fc <nrfx_gpiote_irq_handler>:

void nrfx_gpiote_irq_handler(void)
{
   148fc:	b538      	push	{r3, r4, r5, lr}
    uint32_t status = 0;
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
   148fe:	2001      	movs	r0, #1
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
   14900:	f44f 7380 	mov.w	r3, #256	; 0x100

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   14904:	2100      	movs	r1, #0
    uint32_t status = 0;
   14906:	460c      	mov	r4, r1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   14908:	e003      	b.n	14912 <nrfx_gpiote_irq_handler+0x16>
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
        }
        mask <<= 1;
   1490a:	0040      	lsls	r0, r0, #1
        /* Incrementing to next event, utilizing the fact that events are grouped together
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
   1490c:	3304      	adds	r3, #4
   1490e:	b29b      	uxth	r3, r3
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   14910:	3101      	adds	r1, #1
   14912:	2907      	cmp	r1, #7
   14914:	d814      	bhi.n	14940 <nrfx_gpiote_irq_handler+0x44>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   14916:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
   1491a:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
   1491e:	6812      	ldr	r2, [r2, #0]
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
   14920:	2a00      	cmp	r2, #0
   14922:	d0f2      	beq.n	1490a <nrfx_gpiote_irq_handler+0xe>
    return p_reg->INTENSET & mask;
   14924:	4a0c      	ldr	r2, [pc, #48]	; (14958 <nrfx_gpiote_irq_handler+0x5c>)
   14926:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
   1492a:	4210      	tst	r0, r2
   1492c:	d0ed      	beq.n	1490a <nrfx_gpiote_irq_handler+0xe>
    return ((uint32_t)p_reg + event);
   1492e:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
   14932:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   14936:	2500      	movs	r5, #0
   14938:	6015      	str	r5, [r2, #0]
   1493a:	6812      	ldr	r2, [r2, #0]
            status |= mask;
   1493c:	4304      	orrs	r4, r0
   1493e:	e7e4      	b.n	1490a <nrfx_gpiote_irq_handler+0xe>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   14940:	4b05      	ldr	r3, [pc, #20]	; (14958 <nrfx_gpiote_irq_handler+0x5c>)
   14942:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
   14946:	b91b      	cbnz	r3, 14950 <nrfx_gpiote_irq_handler+0x54>
    {
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
   14948:	4620      	mov	r0, r4
   1494a:	f7ff fc1f 	bl	1418c <gpiote_evt_handle>
}
   1494e:	bd38      	pop	{r3, r4, r5, pc}
        port_event_handle();
   14950:	f7ff fcd4 	bl	142fc <port_event_handle>
   14954:	e7f8      	b.n	14948 <nrfx_gpiote_irq_handler+0x4c>
   14956:	bf00      	nop
   14958:	40006000 	.word	0x40006000

0001495c <nvmc_readonly_mode_set>:
#endif

NRF_STATIC_INLINE void nrf_nvmc_mode_set(NRF_NVMC_Type * p_reg,
                                         nrf_nvmc_mode_t mode)
{
    p_reg->CONFIG = (uint32_t)mode;
   1495c:	4b02      	ldr	r3, [pc, #8]	; (14968 <nvmc_readonly_mode_set+0xc>)
   1495e:	2200      	movs	r2, #0
   14960:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    nrf_nvmc_nonsecure_mode_set(NRF_NVMC, NRF_NVMC_NS_MODE_READONLY);
#endif
#if !defined(NRF_TRUSTZONE_NONSECURE)
    nrf_nvmc_mode_set(NRF_NVMC, NRF_NVMC_MODE_READONLY);
#endif
}
   14964:	4770      	bx	lr
   14966:	bf00      	nop
   14968:	4001e000 	.word	0x4001e000

0001496c <nvmc_write_mode_set>:
   1496c:	4b02      	ldr	r3, [pc, #8]	; (14978 <nvmc_write_mode_set+0xc>)
   1496e:	2201      	movs	r2, #1
   14970:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    nrf_nvmc_nonsecure_mode_set(NRF_NVMC, NRF_NVMC_NS_MODE_WRITE);
#endif
#if !defined(NRF_TRUSTZONE_NONSECURE)
    nrf_nvmc_mode_set(NRF_NVMC, NRF_NVMC_MODE_WRITE);
#endif
}
   14974:	4770      	bx	lr
   14976:	bf00      	nop
   14978:	4001e000 	.word	0x4001e000

0001497c <nvmc_erase_mode_set>:
   1497c:	4b02      	ldr	r3, [pc, #8]	; (14988 <nvmc_erase_mode_set+0xc>)
   1497e:	2202      	movs	r2, #2
   14980:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    nrf_nvmc_nonsecure_mode_set(NRF_NVMC, NRF_NVMC_NS_MODE_ERASE);
#endif
#if !defined(NRF_TRUSTZONE_NONSECURE)
    nrf_nvmc_mode_set(NRF_NVMC, NRF_NVMC_MODE_ERASE);
#endif
}
   14984:	4770      	bx	lr
   14986:	bf00      	nop
   14988:	4001e000 	.word	0x4001e000

0001498c <nvmc_word_write>:
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
   1498c:	4b04      	ldr	r3, [pc, #16]	; (149a0 <nvmc_word_write+0x14>)
   1498e:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
{
#if defined(NRF9160_XXAA)
    while (!nrf_nvmc_write_ready_check(NRF_NVMC))
    {}
#else
    while (!nrf_nvmc_ready_check(NRF_NVMC))
   14992:	f013 0f01 	tst.w	r3, #1
   14996:	d0f9      	beq.n	1498c <nvmc_word_write>
    {}
#endif

    *(volatile uint32_t *)addr = value;
   14998:	6001      	str	r1, [r0, #0]
  __ASM volatile ("dmb 0xF":::"memory");
   1499a:	f3bf 8f5f 	dmb	sy
    __DMB();
}
   1499e:	4770      	bx	lr
   149a0:	4001e000 	.word	0x4001e000

000149a4 <nrfx_nvmc_page_erase>:
        nvmc_word_write(addr + (NVMC_BYTES_IN_WORD * i), ((uint32_t const *)src)[i]);
    }
}

nrfx_err_t nrfx_nvmc_page_erase(uint32_t addr)
{
   149a4:	b510      	push	{r4, lr}
   149a6:	4604      	mov	r4, r0
    NRFX_ASSERT(is_valid_address(addr, false));

    if (!is_page_aligned_check(addr))
   149a8:	f004 fa30 	bl	18e0c <is_page_aligned_check>
   149ac:	b908      	cbnz	r0, 149b2 <nrfx_nvmc_page_erase+0xe>
    {
        return NRFX_ERROR_INVALID_ADDR;
   149ae:	4808      	ldr	r0, [pc, #32]	; (149d0 <nrfx_nvmc_page_erase+0x2c>)
    while (!nrf_nvmc_ready_check(NRF_NVMC))
    {}
    nvmc_readonly_mode_set();

    return NRFX_SUCCESS;
}
   149b0:	bd10      	pop	{r4, pc}
    nvmc_erase_mode_set();
   149b2:	f7ff ffe3 	bl	1497c <nvmc_erase_mode_set>
    else
    {
        p_reg->ERASEPCR1 = page_addr;
    }
#elif defined(NRF52_SERIES)
    p_reg->ERASEPAGE = page_addr;
   149b6:	4b07      	ldr	r3, [pc, #28]	; (149d4 <nrfx_nvmc_page_erase+0x30>)
   149b8:	f8c3 4508 	str.w	r4, [r3, #1288]	; 0x508
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
   149bc:	4b05      	ldr	r3, [pc, #20]	; (149d4 <nrfx_nvmc_page_erase+0x30>)
   149be:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    while (!nrf_nvmc_ready_check(NRF_NVMC))
   149c2:	f013 0f01 	tst.w	r3, #1
   149c6:	d0f9      	beq.n	149bc <nrfx_nvmc_page_erase+0x18>
    nvmc_readonly_mode_set();
   149c8:	f7ff ffc8 	bl	1495c <nvmc_readonly_mode_set>
    return NRFX_SUCCESS;
   149cc:	4802      	ldr	r0, [pc, #8]	; (149d8 <nrfx_nvmc_page_erase+0x34>)
   149ce:	e7ef      	b.n	149b0 <nrfx_nvmc_page_erase+0xc>
   149d0:	0bad000a 	.word	0x0bad000a
   149d4:	4001e000 	.word	0x4001e000
   149d8:	0bad0000 	.word	0x0bad0000

000149dc <nrfx_ppi_channel_alloc>:
    nrfx_flag32_init(&m_groups_allocated, NRFX_PPI_ALL_APP_GROUPS_MASK);
}


nrfx_err_t nrfx_ppi_channel_alloc(nrf_ppi_channel_t * p_channel)
{
   149dc:	b508      	push	{r3, lr}
   149de:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_channels_allocated, (uint8_t *)p_channel);
   149e0:	4801      	ldr	r0, [pc, #4]	; (149e8 <nrfx_ppi_channel_alloc+0xc>)
   149e2:	f7ff f9d1 	bl	13d88 <nrfx_flag32_alloc>
}
   149e6:	bd08      	pop	{r3, pc}
   149e8:	20000130 	.word	0x20000130

000149ec <qspi_xfer>:
   149ec:	f000 4c60 	and.w	ip, r0, #3758096384	; 0xe0000000
                            nrfx_qspi_state_t desired_state)
{
    NRFX_ASSERT(m_cb.state != NRFX_QSPI_STATE_UNINITIALIZED);
    NRFX_ASSERT(p_buffer != NULL);

    if (!nrfx_is_in_ram(p_buffer) || !nrfx_is_word_aligned(p_buffer))
   149f0:	f1bc 5f00 	cmp.w	ip, #536870912	; 0x20000000
   149f4:	d155      	bne.n	14aa2 <qspi_xfer+0xb6>
   149f6:	f010 0f03 	tst.w	r0, #3
   149fa:	d154      	bne.n	14aa6 <qspi_xfer+0xba>
{
   149fc:	b430      	push	{r4, r5}
    {
        return NRFX_ERROR_INVALID_ADDR;
    }

    if ((m_cb.state != NRFX_QSPI_STATE_IDLE) &&
   149fe:	4c2d      	ldr	r4, [pc, #180]	; (14ab4 <qspi_xfer+0xc8>)
   14a00:	f894 c030 	ldrb.w	ip, [r4, #48]	; 0x30
   14a04:	f1bc 0f01 	cmp.w	ip, #1
   14a08:	d001      	beq.n	14a0e <qspi_xfer+0x22>
   14a0a:	459c      	cmp	ip, r3
   14a0c:	d14d      	bne.n	14aaa <qspi_xfer+0xbe>
    {
        return NRFX_ERROR_BUSY;
    }

    bool is_first_buffer = false;
    if (m_cb.handler)
   14a0e:	4c29      	ldr	r4, [pc, #164]	; (14ab4 <qspi_xfer+0xc8>)
   14a10:	6824      	ldr	r4, [r4, #0]
   14a12:	b354      	cbz	r4, 14a6a <qspi_xfer+0x7e>
    {
        if (m_cb.p_buffer_primary)
   14a14:	4d27      	ldr	r5, [pc, #156]	; (14ab4 <qspi_xfer+0xc8>)
   14a16:	68ad      	ldr	r5, [r5, #8]
   14a18:	b1fd      	cbz	r5, 14a5a <qspi_xfer+0x6e>
        {
            m_cb.p_buffer_secondary = p_buffer;
   14a1a:	4d26      	ldr	r5, [pc, #152]	; (14ab4 <qspi_xfer+0xc8>)
   14a1c:	60e8      	str	r0, [r5, #12]
            m_cb.size_secondary     = length;
   14a1e:	6169      	str	r1, [r5, #20]
            m_cb.addr_secondary     = address;
   14a20:	61ea      	str	r2, [r5, #28]
    bool is_first_buffer = false;
   14a22:	2500      	movs	r5, #0
            is_first_buffer = true;
        }
    }

    nrf_qspi_task_t task;
    if (desired_state == NRFX_QSPI_STATE_WRITE)
   14a24:	2b02      	cmp	r3, #2
   14a26:	d022      	beq.n	14a6e <qspi_xfer+0x82>
NRF_STATIC_INLINE void nrf_qspi_read_buffer_set(NRF_QSPI_Type * p_reg,
                                                void          * p_buffer,
                                                uint32_t        length,
                                                uint32_t        src_addr)
{
    p_reg->READ.SRC = src_addr;
   14a28:	4b23      	ldr	r3, [pc, #140]	; (14ab8 <qspi_xfer+0xcc>)
   14a2a:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    p_reg->READ.DST = (uint32_t) p_buffer;
   14a2e:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
    p_reg->READ.CNT = length;
   14a32:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
        task = NRF_QSPI_TASK_WRITESTART;
    }
    else
    {
        nrf_qspi_read_buffer_set(NRF_QSPI, p_buffer, length, address);
        task = NRF_QSPI_TASK_READSTART;
   14a36:	2304      	movs	r3, #4
    }

    if (!m_cb.handler)
   14a38:	b314      	cbz	r4, 14a80 <qspi_xfer+0x94>
        nrf_qspi_event_clear(NRF_QSPI, NRF_QSPI_EVENT_READY);
        nrf_qspi_task_trigger(NRF_QSPI, task);
        while (!nrf_qspi_event_check(NRF_QSPI, NRF_QSPI_EVENT_READY))
        {}
    }
    else if (is_first_buffer)
   14a3a:	2d00      	cmp	r5, #0
   14a3c:	d038      	beq.n	14ab0 <qspi_xfer+0xc4>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   14a3e:	491e      	ldr	r1, [pc, #120]	; (14ab8 <qspi_xfer+0xcc>)
   14a40:	2200      	movs	r2, #0
   14a42:	f8c1 2100 	str.w	r2, [r1, #256]	; 0x100
    p_reg->INTENSET = mask;
   14a46:	2201      	movs	r2, #1
   14a48:	f8c1 2304 	str.w	r2, [r1, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   14a4c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   14a50:	f503 3324 	add.w	r3, r3, #167936	; 0x29000
   14a54:	601a      	str	r2, [r3, #0]
        nrf_qspi_event_clear(NRF_QSPI, NRF_QSPI_EVENT_READY);
        nrf_qspi_int_enable(NRF_QSPI, NRF_QSPI_INT_READY_MASK);
        nrf_qspi_task_trigger(NRF_QSPI, task);
    }

    return NRFX_SUCCESS;
   14a56:	4819      	ldr	r0, [pc, #100]	; (14abc <qspi_xfer+0xd0>)
}
   14a58:	e028      	b.n	14aac <qspi_xfer+0xc0>
            m_cb.p_buffer_primary = p_buffer;
   14a5a:	4d16      	ldr	r5, [pc, #88]	; (14ab4 <qspi_xfer+0xc8>)
   14a5c:	60a8      	str	r0, [r5, #8]
            m_cb.size_primary     = length;
   14a5e:	6129      	str	r1, [r5, #16]
            m_cb.addr_primary     = address;
   14a60:	61aa      	str	r2, [r5, #24]
            m_cb.state = desired_state;
   14a62:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
            is_first_buffer = true;
   14a66:	2501      	movs	r5, #1
   14a68:	e7dc      	b.n	14a24 <qspi_xfer+0x38>
    bool is_first_buffer = false;
   14a6a:	2500      	movs	r5, #0
   14a6c:	e7da      	b.n	14a24 <qspi_xfer+0x38>
    p_reg->WRITE.DST = dest_addr;
   14a6e:	4b12      	ldr	r3, [pc, #72]	; (14ab8 <qspi_xfer+0xcc>)
   14a70:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
    p_reg->WRITE.SRC = (uint32_t) p_buffer;
   14a74:	f8c3 0514 	str.w	r0, [r3, #1300]	; 0x514
    p_reg->WRITE.CNT = length;
   14a78:	f8c3 1518 	str.w	r1, [r3, #1304]	; 0x518
        task = NRF_QSPI_TASK_WRITESTART;
   14a7c:	2308      	movs	r3, #8
   14a7e:	e7db      	b.n	14a38 <qspi_xfer+0x4c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   14a80:	4a0d      	ldr	r2, [pc, #52]	; (14ab8 <qspi_xfer+0xcc>)
   14a82:	2100      	movs	r1, #0
   14a84:	f8c2 1100 	str.w	r1, [r2, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   14a88:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   14a8c:	f503 3324 	add.w	r3, r3, #167936	; 0x29000
   14a90:	2201      	movs	r2, #1
   14a92:	601a      	str	r2, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   14a94:	4b08      	ldr	r3, [pc, #32]	; (14ab8 <qspi_xfer+0xcc>)
   14a96:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
        while (!nrf_qspi_event_check(NRF_QSPI, NRF_QSPI_EVENT_READY))
   14a9a:	2b00      	cmp	r3, #0
   14a9c:	d0fa      	beq.n	14a94 <qspi_xfer+0xa8>
    return NRFX_SUCCESS;
   14a9e:	4807      	ldr	r0, [pc, #28]	; (14abc <qspi_xfer+0xd0>)
   14aa0:	e004      	b.n	14aac <qspi_xfer+0xc0>
        return NRFX_ERROR_INVALID_ADDR;
   14aa2:	4807      	ldr	r0, [pc, #28]	; (14ac0 <qspi_xfer+0xd4>)
   14aa4:	4770      	bx	lr
   14aa6:	4806      	ldr	r0, [pc, #24]	; (14ac0 <qspi_xfer+0xd4>)
}
   14aa8:	4770      	bx	lr
        return NRFX_ERROR_BUSY;
   14aaa:	4806      	ldr	r0, [pc, #24]	; (14ac4 <qspi_xfer+0xd8>)
}
   14aac:	bc30      	pop	{r4, r5}
   14aae:	4770      	bx	lr
    return NRFX_SUCCESS;
   14ab0:	4802      	ldr	r0, [pc, #8]	; (14abc <qspi_xfer+0xd0>)
   14ab2:	e7fb      	b.n	14aac <qspi_xfer+0xc0>
   14ab4:	200009bc 	.word	0x200009bc
   14ab8:	40029000 	.word	0x40029000
   14abc:	0bad0000 	.word	0x0bad0000
   14ac0:	0bad000a 	.word	0x0bad000a
   14ac4:	0bad000b 	.word	0x0bad000b

00014ac8 <qspi_pins_configure>:

static bool qspi_pins_configure(nrfx_qspi_config_t const * p_config)
{
   14ac8:	4603      	mov	r3, r0
    // If both GPIO configuration and pin selection are to be skipped,
    // the pin numbers may be not specified at all, so even validation
    // of those numbers cannot be performed.
    if (p_config->skip_gpio_cfg && p_config->skip_psel_cfg)
   14aca:	7cc2      	ldrb	r2, [r0, #19]
   14acc:	b112      	cbz	r2, 14ad4 <qspi_pins_configure+0xc>
   14ace:	7d00      	ldrb	r0, [r0, #20]
   14ad0:	2800      	cmp	r0, #0
   14ad2:	d16a      	bne.n	14baa <qspi_pins_configure+0xe2>
    {
        return true;
    }

    // Check if the user set meaningful values to struct fields. If not, return false.
    if ((p_config->pins.sck_pin == NRF_QSPI_PIN_NOT_CONNECTED) ||
   14ad4:	7919      	ldrb	r1, [r3, #4]
   14ad6:	29ff      	cmp	r1, #255	; 0xff
   14ad8:	f000 80ad 	beq.w	14c36 <qspi_pins_configure+0x16e>
        (p_config->pins.csn_pin == NRF_QSPI_PIN_NOT_CONNECTED) ||
   14adc:	7958      	ldrb	r0, [r3, #5]
    if ((p_config->pins.sck_pin == NRF_QSPI_PIN_NOT_CONNECTED) ||
   14ade:	28ff      	cmp	r0, #255	; 0xff
   14ae0:	f000 80ab 	beq.w	14c3a <qspi_pins_configure+0x172>
        (p_config->pins.io0_pin == NRF_QSPI_PIN_NOT_CONNECTED) ||
   14ae4:	7998      	ldrb	r0, [r3, #6]
        (p_config->pins.csn_pin == NRF_QSPI_PIN_NOT_CONNECTED) ||
   14ae6:	28ff      	cmp	r0, #255	; 0xff
   14ae8:	f000 80a9 	beq.w	14c3e <qspi_pins_configure+0x176>
        (p_config->pins.io1_pin == NRF_QSPI_PIN_NOT_CONNECTED))
   14aec:	79d8      	ldrb	r0, [r3, #7]
        (p_config->pins.io0_pin == NRF_QSPI_PIN_NOT_CONNECTED) ||
   14aee:	28ff      	cmp	r0, #255	; 0xff
   14af0:	f000 80a7 	beq.w	14c42 <qspi_pins_configure+0x17a>
    {
        return false;
    }
#endif

    if (!p_config->skip_gpio_cfg)
   14af4:	2a00      	cmp	r2, #0
   14af6:	d156      	bne.n	14ba6 <qspi_pins_configure+0xde>
    *p_pin = pin_number & 0x1F;
   14af8:	f001 021f 	and.w	r2, r1, #31
    return pin_number >> 5;
   14afc:	0949      	lsrs	r1, r1, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   14afe:	2901      	cmp	r1, #1
   14b00:	d054      	beq.n	14bac <qspi_pins_configure+0xe4>
        case 0: return NRF_P0;
   14b02:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
   14b06:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
   14b0a:	f240 3002 	movw	r0, #770	; 0x302
   14b0e:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
    {
        QSPI_PIN_INIT(p_config->pins.sck_pin);
        QSPI_PIN_INIT(p_config->pins.csn_pin);
   14b12:	795a      	ldrb	r2, [r3, #5]
    *p_pin = pin_number & 0x1F;
   14b14:	f002 011f 	and.w	r1, r2, #31
    return pin_number >> 5;
   14b18:	0952      	lsrs	r2, r2, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   14b1a:	2a01      	cmp	r2, #1
   14b1c:	d048      	beq.n	14bb0 <qspi_pins_configure+0xe8>
        case 0: return NRF_P0;
   14b1e:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
   14b22:	f501 72e0 	add.w	r2, r1, #448	; 0x1c0
   14b26:	f240 3102 	movw	r1, #770	; 0x302
   14b2a:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
        QSPI_PIN_INIT(p_config->pins.io0_pin);
   14b2e:	799a      	ldrb	r2, [r3, #6]
    *p_pin = pin_number & 0x1F;
   14b30:	f002 011f 	and.w	r1, r2, #31
    return pin_number >> 5;
   14b34:	0952      	lsrs	r2, r2, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   14b36:	2a01      	cmp	r2, #1
   14b38:	d03c      	beq.n	14bb4 <qspi_pins_configure+0xec>
        case 0: return NRF_P0;
   14b3a:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
   14b3e:	f501 72e0 	add.w	r2, r1, #448	; 0x1c0
   14b42:	f240 3102 	movw	r1, #770	; 0x302
   14b46:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
        QSPI_PIN_INIT(p_config->pins.io1_pin);
   14b4a:	79da      	ldrb	r2, [r3, #7]
    *p_pin = pin_number & 0x1F;
   14b4c:	f002 011f 	and.w	r1, r2, #31
    return pin_number >> 5;
   14b50:	0952      	lsrs	r2, r2, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   14b52:	2a01      	cmp	r2, #1
   14b54:	d030      	beq.n	14bb8 <qspi_pins_configure+0xf0>
        case 0: return NRF_P0;
   14b56:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
   14b5a:	f501 72e0 	add.w	r2, r1, #448	; 0x1c0
   14b5e:	f240 3102 	movw	r1, #770	; 0x302
   14b62:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
        if (p_config->pins.io2_pin != NRF_QSPI_PIN_NOT_CONNECTED)
   14b66:	7a1a      	ldrb	r2, [r3, #8]
   14b68:	2aff      	cmp	r2, #255	; 0xff
   14b6a:	d00c      	beq.n	14b86 <qspi_pins_configure+0xbe>
    *p_pin = pin_number & 0x1F;
   14b6c:	f002 011f 	and.w	r1, r2, #31
    return pin_number >> 5;
   14b70:	0952      	lsrs	r2, r2, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   14b72:	2a01      	cmp	r2, #1
   14b74:	d022      	beq.n	14bbc <qspi_pins_configure+0xf4>
        case 0: return NRF_P0;
   14b76:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
   14b7a:	f501 72e0 	add.w	r2, r1, #448	; 0x1c0
   14b7e:	f240 3102 	movw	r1, #770	; 0x302
   14b82:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
        {
            QSPI_PIN_INIT(p_config->pins.io2_pin);
        }
        if (p_config->pins.io3_pin != NRF_QSPI_PIN_NOT_CONNECTED)
   14b86:	7a5a      	ldrb	r2, [r3, #9]
   14b88:	2aff      	cmp	r2, #255	; 0xff
   14b8a:	d00c      	beq.n	14ba6 <qspi_pins_configure+0xde>
    *p_pin = pin_number & 0x1F;
   14b8c:	f002 011f 	and.w	r1, r2, #31
    return pin_number >> 5;
   14b90:	0952      	lsrs	r2, r2, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   14b92:	2a01      	cmp	r2, #1
   14b94:	d014      	beq.n	14bc0 <qspi_pins_configure+0xf8>
        case 0: return NRF_P0;
   14b96:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
   14b9a:	f501 72e0 	add.w	r2, r1, #448	; 0x1c0
   14b9e:	f240 3102 	movw	r1, #770	; 0x302
   14ba2:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
        {
            QSPI_PIN_INIT(p_config->pins.io3_pin);
        }
    }

    if (!p_config->skip_psel_cfg)
   14ba6:	7d18      	ldrb	r0, [r3, #20]
   14ba8:	b160      	cbz	r0, 14bc4 <qspi_pins_configure+0xfc>
    {
        nrf_qspi_pins_set(NRF_QSPI, &p_config->pins);
    }

    return true;
}
   14baa:	4770      	bx	lr
        case 1: return NRF_P1;
   14bac:	4926      	ldr	r1, [pc, #152]	; (14c48 <qspi_pins_configure+0x180>)
   14bae:	e7aa      	b.n	14b06 <qspi_pins_configure+0x3e>
   14bb0:	4825      	ldr	r0, [pc, #148]	; (14c48 <qspi_pins_configure+0x180>)
   14bb2:	e7b6      	b.n	14b22 <qspi_pins_configure+0x5a>
   14bb4:	4824      	ldr	r0, [pc, #144]	; (14c48 <qspi_pins_configure+0x180>)
   14bb6:	e7c2      	b.n	14b3e <qspi_pins_configure+0x76>
   14bb8:	4823      	ldr	r0, [pc, #140]	; (14c48 <qspi_pins_configure+0x180>)
   14bba:	e7ce      	b.n	14b5a <qspi_pins_configure+0x92>
   14bbc:	4822      	ldr	r0, [pc, #136]	; (14c48 <qspi_pins_configure+0x180>)
   14bbe:	e7dc      	b.n	14b7a <qspi_pins_configure+0xb2>
   14bc0:	4821      	ldr	r0, [pc, #132]	; (14c48 <qspi_pins_configure+0x180>)
   14bc2:	e7ea      	b.n	14b9a <qspi_pins_configure+0xd2>
        nrf_qspi_pins_set(NRF_QSPI, &p_config->pins);
   14bc4:	1d1a      	adds	r2, r3, #4
    p_reg->PSEL.SCK = NRF_QSPI_PIN_VAL(p_pins->sck_pin);
   14bc6:	791b      	ldrb	r3, [r3, #4]
   14bc8:	2bff      	cmp	r3, #255	; 0xff
   14bca:	d022      	beq.n	14c12 <qspi_pins_configure+0x14a>
   14bcc:	491f      	ldr	r1, [pc, #124]	; (14c4c <qspi_pins_configure+0x184>)
   14bce:	f8c1 3524 	str.w	r3, [r1, #1316]	; 0x524
    p_reg->PSEL.CSN = NRF_QSPI_PIN_VAL(p_pins->csn_pin);
   14bd2:	7853      	ldrb	r3, [r2, #1]
   14bd4:	2bff      	cmp	r3, #255	; 0xff
   14bd6:	d01f      	beq.n	14c18 <qspi_pins_configure+0x150>
   14bd8:	491c      	ldr	r1, [pc, #112]	; (14c4c <qspi_pins_configure+0x184>)
   14bda:	f8c1 3528 	str.w	r3, [r1, #1320]	; 0x528
    p_reg->PSEL.IO0 = NRF_QSPI_PIN_VAL(p_pins->io0_pin);
   14bde:	7893      	ldrb	r3, [r2, #2]
   14be0:	2bff      	cmp	r3, #255	; 0xff
   14be2:	d01c      	beq.n	14c1e <qspi_pins_configure+0x156>
   14be4:	4919      	ldr	r1, [pc, #100]	; (14c4c <qspi_pins_configure+0x184>)
   14be6:	f8c1 3530 	str.w	r3, [r1, #1328]	; 0x530
    p_reg->PSEL.IO1 = NRF_QSPI_PIN_VAL(p_pins->io1_pin);
   14bea:	78d3      	ldrb	r3, [r2, #3]
   14bec:	2bff      	cmp	r3, #255	; 0xff
   14bee:	d019      	beq.n	14c24 <qspi_pins_configure+0x15c>
   14bf0:	4916      	ldr	r1, [pc, #88]	; (14c4c <qspi_pins_configure+0x184>)
   14bf2:	f8c1 3534 	str.w	r3, [r1, #1332]	; 0x534
    p_reg->PSEL.IO2 = NRF_QSPI_PIN_VAL(p_pins->io2_pin);
   14bf6:	7913      	ldrb	r3, [r2, #4]
   14bf8:	2bff      	cmp	r3, #255	; 0xff
   14bfa:	d016      	beq.n	14c2a <qspi_pins_configure+0x162>
   14bfc:	4913      	ldr	r1, [pc, #76]	; (14c4c <qspi_pins_configure+0x184>)
   14bfe:	f8c1 3538 	str.w	r3, [r1, #1336]	; 0x538
    p_reg->PSEL.IO3 = NRF_QSPI_PIN_VAL(p_pins->io3_pin);
   14c02:	7953      	ldrb	r3, [r2, #5]
   14c04:	2bff      	cmp	r3, #255	; 0xff
   14c06:	d013      	beq.n	14c30 <qspi_pins_configure+0x168>
   14c08:	4a10      	ldr	r2, [pc, #64]	; (14c4c <qspi_pins_configure+0x184>)
   14c0a:	f8c2 353c 	str.w	r3, [r2, #1340]	; 0x53c
    return true;
   14c0e:	2001      	movs	r0, #1
}
   14c10:	4770      	bx	lr
    p_reg->PSEL.SCK = NRF_QSPI_PIN_VAL(p_pins->sck_pin);
   14c12:	f04f 33ff 	mov.w	r3, #4294967295
   14c16:	e7d9      	b.n	14bcc <qspi_pins_configure+0x104>
    p_reg->PSEL.CSN = NRF_QSPI_PIN_VAL(p_pins->csn_pin);
   14c18:	f04f 33ff 	mov.w	r3, #4294967295
   14c1c:	e7dc      	b.n	14bd8 <qspi_pins_configure+0x110>
    p_reg->PSEL.IO0 = NRF_QSPI_PIN_VAL(p_pins->io0_pin);
   14c1e:	f04f 33ff 	mov.w	r3, #4294967295
   14c22:	e7df      	b.n	14be4 <qspi_pins_configure+0x11c>
    p_reg->PSEL.IO1 = NRF_QSPI_PIN_VAL(p_pins->io1_pin);
   14c24:	f04f 33ff 	mov.w	r3, #4294967295
   14c28:	e7e2      	b.n	14bf0 <qspi_pins_configure+0x128>
    p_reg->PSEL.IO2 = NRF_QSPI_PIN_VAL(p_pins->io2_pin);
   14c2a:	f04f 33ff 	mov.w	r3, #4294967295
   14c2e:	e7e5      	b.n	14bfc <qspi_pins_configure+0x134>
    p_reg->PSEL.IO3 = NRF_QSPI_PIN_VAL(p_pins->io3_pin);
   14c30:	f04f 33ff 	mov.w	r3, #4294967295
   14c34:	e7e8      	b.n	14c08 <qspi_pins_configure+0x140>
        return false;
   14c36:	2000      	movs	r0, #0
   14c38:	4770      	bx	lr
   14c3a:	2000      	movs	r0, #0
   14c3c:	4770      	bx	lr
   14c3e:	2000      	movs	r0, #0
   14c40:	4770      	bx	lr
   14c42:	2000      	movs	r0, #0
   14c44:	e7b1      	b.n	14baa <qspi_pins_configure+0xe2>
   14c46:	bf00      	nop
   14c48:	50000300 	.word	0x50000300
   14c4c:	40029000 	.word	0x40029000

00014c50 <qspi_pins_deconfigure>:

static void qspi_pins_deconfigure(void)
{
   14c50:	b570      	push	{r4, r5, r6, lr}
   14c52:	b082      	sub	sp, #8
    p_pins->sck_pin = (uint8_t)p_reg->PSEL.SCK;
   14c54:	4c3e      	ldr	r4, [pc, #248]	; (14d50 <qspi_pins_deconfigure+0x100>)
   14c56:	f8d4 0524 	ldr.w	r0, [r4, #1316]	; 0x524
   14c5a:	b2c0      	uxtb	r0, r0
   14c5c:	f88d 0000 	strb.w	r0, [sp]
    p_pins->csn_pin = (uint8_t)p_reg->PSEL.CSN;
   14c60:	f8d4 1528 	ldr.w	r1, [r4, #1320]	; 0x528
   14c64:	b2c9      	uxtb	r1, r1
   14c66:	f88d 1001 	strb.w	r1, [sp, #1]
    p_pins->io0_pin = (uint8_t)p_reg->PSEL.IO0;
   14c6a:	f8d4 2530 	ldr.w	r2, [r4, #1328]	; 0x530
   14c6e:	b2d2      	uxtb	r2, r2
   14c70:	f88d 2002 	strb.w	r2, [sp, #2]
    p_pins->io1_pin = (uint8_t)p_reg->PSEL.IO1;
   14c74:	f8d4 3534 	ldr.w	r3, [r4, #1332]	; 0x534
   14c78:	b2db      	uxtb	r3, r3
   14c7a:	f88d 3003 	strb.w	r3, [sp, #3]
    p_pins->io2_pin = (uint8_t)p_reg->PSEL.IO2;
   14c7e:	f8d4 5538 	ldr.w	r5, [r4, #1336]	; 0x538
   14c82:	fa5f fc85 	uxtb.w	ip, r5
   14c86:	f88d c004 	strb.w	ip, [sp, #4]
    p_pins->io3_pin = (uint8_t)p_reg->PSEL.IO3;
   14c8a:	f8d4 453c 	ldr.w	r4, [r4, #1340]	; 0x53c
   14c8e:	b2e4      	uxtb	r4, r4
   14c90:	f88d 4005 	strb.w	r4, [sp, #5]
    *p_pin = pin_number & 0x1F;
   14c94:	f000 0e1f 	and.w	lr, r0, #31
    return pin_number >> 5;
   14c98:	0940      	lsrs	r0, r0, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   14c9a:	2801      	cmp	r0, #1
   14c9c:	d04b      	beq.n	14d36 <qspi_pins_deconfigure+0xe6>
        case 0: return NRF_P0;
   14c9e:	f04f 45a0 	mov.w	r5, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
   14ca2:	f50e 70e0 	add.w	r0, lr, #448	; 0x1c0
   14ca6:	2602      	movs	r6, #2
   14ca8:	f845 6020 	str.w	r6, [r5, r0, lsl #2]
    *p_pin = pin_number & 0x1F;
   14cac:	f001 001f 	and.w	r0, r1, #31
    return pin_number >> 5;
   14cb0:	0949      	lsrs	r1, r1, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   14cb2:	2901      	cmp	r1, #1
   14cb4:	d041      	beq.n	14d3a <qspi_pins_deconfigure+0xea>
        case 0: return NRF_P0;
   14cb6:	f04f 45a0 	mov.w	r5, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
   14cba:	f500 71e0 	add.w	r1, r0, #448	; 0x1c0
   14cbe:	2002      	movs	r0, #2
   14cc0:	f845 0021 	str.w	r0, [r5, r1, lsl #2]
    *p_pin = pin_number & 0x1F;
   14cc4:	f002 011f 	and.w	r1, r2, #31
    return pin_number >> 5;
   14cc8:	0952      	lsrs	r2, r2, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   14cca:	2a01      	cmp	r2, #1
   14ccc:	d037      	beq.n	14d3e <qspi_pins_deconfigure+0xee>
        case 0: return NRF_P0;
   14cce:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
   14cd2:	f501 72e0 	add.w	r2, r1, #448	; 0x1c0
   14cd6:	2102      	movs	r1, #2
   14cd8:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
    *p_pin = pin_number & 0x1F;
   14cdc:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
   14ce0:	095b      	lsrs	r3, r3, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   14ce2:	2b01      	cmp	r3, #1
   14ce4:	d02d      	beq.n	14d42 <qspi_pins_deconfigure+0xf2>
        case 0: return NRF_P0;
   14ce6:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
   14cea:	f502 73e0 	add.w	r3, r2, #448	; 0x1c0
   14cee:	2202      	movs	r2, #2
   14cf0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    nrf_gpio_cfg_default(pins.sck_pin);
    nrf_gpio_cfg_default(pins.csn_pin);
    nrf_gpio_cfg_default(pins.io0_pin);
    nrf_gpio_cfg_default(pins.io1_pin);
    if (pins.io2_pin != NRF_QSPI_PIN_NOT_CONNECTED)
   14cf4:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
   14cf8:	d00d      	beq.n	14d16 <qspi_pins_deconfigure+0xc6>
    *p_pin = pin_number & 0x1F;
   14cfa:	f00c 031f 	and.w	r3, ip, #31
    return pin_number >> 5;
   14cfe:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   14d02:	f1bc 0f01 	cmp.w	ip, #1
   14d06:	d01e      	beq.n	14d46 <qspi_pins_deconfigure+0xf6>
        case 0: return NRF_P0;
   14d08:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
   14d0c:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   14d10:	2202      	movs	r2, #2
   14d12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    {
        nrf_gpio_cfg_default(pins.io2_pin);
    }
    if (pins.io3_pin != NRF_QSPI_PIN_NOT_CONNECTED)
   14d16:	2cff      	cmp	r4, #255	; 0xff
   14d18:	d00b      	beq.n	14d32 <qspi_pins_deconfigure+0xe2>
    *p_pin = pin_number & 0x1F;
   14d1a:	f004 031f 	and.w	r3, r4, #31
    return pin_number >> 5;
   14d1e:	0964      	lsrs	r4, r4, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   14d20:	2c01      	cmp	r4, #1
   14d22:	d012      	beq.n	14d4a <qspi_pins_deconfigure+0xfa>
        case 0: return NRF_P0;
   14d24:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
   14d28:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   14d2c:	2202      	movs	r2, #2
   14d2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    {
        nrf_gpio_cfg_default(pins.io3_pin);
    }
}
   14d32:	b002      	add	sp, #8
   14d34:	bd70      	pop	{r4, r5, r6, pc}
        case 1: return NRF_P1;
   14d36:	4d07      	ldr	r5, [pc, #28]	; (14d54 <qspi_pins_deconfigure+0x104>)
   14d38:	e7b3      	b.n	14ca2 <qspi_pins_deconfigure+0x52>
   14d3a:	4d06      	ldr	r5, [pc, #24]	; (14d54 <qspi_pins_deconfigure+0x104>)
   14d3c:	e7bd      	b.n	14cba <qspi_pins_deconfigure+0x6a>
   14d3e:	4805      	ldr	r0, [pc, #20]	; (14d54 <qspi_pins_deconfigure+0x104>)
   14d40:	e7c7      	b.n	14cd2 <qspi_pins_deconfigure+0x82>
   14d42:	4904      	ldr	r1, [pc, #16]	; (14d54 <qspi_pins_deconfigure+0x104>)
   14d44:	e7d1      	b.n	14cea <qspi_pins_deconfigure+0x9a>
   14d46:	4903      	ldr	r1, [pc, #12]	; (14d54 <qspi_pins_deconfigure+0x104>)
   14d48:	e7e0      	b.n	14d0c <qspi_pins_deconfigure+0xbc>
   14d4a:	4902      	ldr	r1, [pc, #8]	; (14d54 <qspi_pins_deconfigure+0x104>)
   14d4c:	e7ec      	b.n	14d28 <qspi_pins_deconfigure+0xd8>
   14d4e:	bf00      	nop
   14d50:	40029000 	.word	0x40029000
   14d54:	50000300 	.word	0x50000300

00014d58 <qspi_event_xfer_handle>:
}
#endif

static void qspi_event_xfer_handle(nrfx_qspi_evt_ext_xfer_t * p_xfer)
{
    p_xfer->p_buffer = (uint8_t *)m_cb.p_buffer_primary;
   14d58:	4b0a      	ldr	r3, [pc, #40]	; (14d84 <qspi_event_xfer_handle+0x2c>)
   14d5a:	689a      	ldr	r2, [r3, #8]
   14d5c:	6002      	str	r2, [r0, #0]
    p_xfer->size     = m_cb.size_primary;
   14d5e:	691a      	ldr	r2, [r3, #16]
   14d60:	6042      	str	r2, [r0, #4]
    p_xfer->addr     = m_cb.addr_primary;
   14d62:	699a      	ldr	r2, [r3, #24]
   14d64:	6082      	str	r2, [r0, #8]
    if (m_cb.p_buffer_secondary)
   14d66:	68da      	ldr	r2, [r3, #12]
   14d68:	b13a      	cbz	r2, 14d7a <qspi_event_xfer_handle+0x22>
    {
        m_cb.p_buffer_primary = m_cb.p_buffer_secondary;
   14d6a:	609a      	str	r2, [r3, #8]
        m_cb.size_primary     = m_cb.size_secondary;
   14d6c:	695a      	ldr	r2, [r3, #20]
   14d6e:	611a      	str	r2, [r3, #16]
        m_cb.addr_primary     = m_cb.addr_secondary;
   14d70:	69da      	ldr	r2, [r3, #28]
   14d72:	619a      	str	r2, [r3, #24]

        m_cb.p_buffer_secondary = NULL;
   14d74:	2200      	movs	r2, #0
   14d76:	60da      	str	r2, [r3, #12]
   14d78:	4770      	bx	lr
    }
    else
    {
        m_cb.p_buffer_primary = NULL;
   14d7a:	4b02      	ldr	r3, [pc, #8]	; (14d84 <qspi_event_xfer_handle+0x2c>)
   14d7c:	2200      	movs	r2, #0
   14d7e:	609a      	str	r2, [r3, #8]
    }
}
   14d80:	4770      	bx	lr
   14d82:	bf00      	nop
   14d84:	200009bc 	.word	0x200009bc

00014d88 <qspi_event_erase_handle>:
    p_reg->ERASE.LEN = len;
}

NRF_STATIC_INLINE uint32_t nrf_qspi_erase_ptr_get(NRF_QSPI_Type const * p_reg)
{
    return p_reg->ERASE.PTR;
   14d88:	4b03      	ldr	r3, [pc, #12]	; (14d98 <qspi_event_erase_handle+0x10>)
   14d8a:	f8d3 251c 	ldr.w	r2, [r3, #1308]	; 0x51c

static void qspi_event_erase_handle(nrfx_qspi_evt_ext_erase_t * p_erase)
{
    p_erase->addr = nrf_qspi_erase_ptr_get(NRF_QSPI);
   14d8e:	6002      	str	r2, [r0, #0]
}

NRF_STATIC_INLINE nrf_qspi_erase_len_t nrf_qspi_erase_len_get(NRF_QSPI_Type const * p_reg)
{
    return (nrf_qspi_erase_len_t)p_reg->ERASE.LEN;
   14d90:	f8d3 3520 	ldr.w	r3, [r3, #1312]	; 0x520
    p_erase->len  = nrf_qspi_erase_len_get(NRF_QSPI);
   14d94:	7103      	strb	r3, [r0, #4]
}
   14d96:	4770      	bx	lr
   14d98:	40029000 	.word	0x40029000

00014d9c <qspi_extended_event_process>:

static void qspi_extended_event_process(nrfx_qspi_evt_ext_t * p_event)
{
   14d9c:	b508      	push	{r3, lr}
    switch (m_cb.state)
   14d9e:	4b0e      	ldr	r3, [pc, #56]	; (14dd8 <qspi_extended_event_process+0x3c>)
   14da0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
   14da4:	2b03      	cmp	r3, #3
   14da6:	d00a      	beq.n	14dbe <qspi_extended_event_process+0x22>
   14da8:	2b04      	cmp	r3, #4
   14daa:	d00e      	beq.n	14dca <qspi_extended_event_process+0x2e>
   14dac:	2b02      	cmp	r3, #2
   14dae:	d000      	beq.n	14db2 <qspi_extended_event_process+0x16>
            break;

        default:
            break;
    }
}
   14db0:	bd08      	pop	{r3, pc}
            p_event->type = NRFX_QSPI_EVENT_WRITE_DONE;
   14db2:	2301      	movs	r3, #1
   14db4:	f800 3b04 	strb.w	r3, [r0], #4
            qspi_event_xfer_handle(&p_event->data.xfer);
   14db8:	f7ff ffce 	bl	14d58 <qspi_event_xfer_handle>
            break;
   14dbc:	e7f8      	b.n	14db0 <qspi_extended_event_process+0x14>
            p_event->type = NRFX_QSPI_EVENT_READ_DONE;
   14dbe:	2302      	movs	r3, #2
   14dc0:	f800 3b04 	strb.w	r3, [r0], #4
            qspi_event_xfer_handle(&p_event->data.xfer);
   14dc4:	f7ff ffc8 	bl	14d58 <qspi_event_xfer_handle>
            break;
   14dc8:	e7f2      	b.n	14db0 <qspi_extended_event_process+0x14>
            p_event->type = NRFX_QSPI_EVENT_ERASE_DONE;
   14dca:	2303      	movs	r3, #3
   14dcc:	f800 3b04 	strb.w	r3, [r0], #4
            qspi_event_erase_handle(&p_event->data.erase);
   14dd0:	f7ff ffda 	bl	14d88 <qspi_event_erase_handle>
}
   14dd4:	e7ec      	b.n	14db0 <qspi_extended_event_process+0x14>
   14dd6:	bf00      	nop
   14dd8:	200009bc 	.word	0x200009bc

00014ddc <qspi_ready_wait>:
{
   14ddc:	b510      	push	{r4, lr}
    NRFX_WAIT_FOR(nrf_qspi_event_check(NRF_QSPI, NRF_QSPI_EVENT_READY),
   14dde:	2464      	movs	r4, #100	; 0x64
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   14de0:	4b08      	ldr	r3, [pc, #32]	; (14e04 <qspi_ready_wait+0x28>)
   14de2:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
   14de6:	b933      	cbnz	r3, 14df6 <qspi_ready_wait+0x1a>
   14de8:	200a      	movs	r0, #10
   14dea:	f003 ff62 	bl	18cb2 <nrfx_busy_wait>
   14dee:	3c01      	subs	r4, #1
   14df0:	d1f6      	bne.n	14de0 <qspi_ready_wait+0x4>
   14df2:	2300      	movs	r3, #0
   14df4:	e000      	b.n	14df8 <qspi_ready_wait+0x1c>
   14df6:	2301      	movs	r3, #1
    if (!result)
   14df8:	b10b      	cbz	r3, 14dfe <qspi_ready_wait+0x22>
    return NRFX_SUCCESS;
   14dfa:	4803      	ldr	r0, [pc, #12]	; (14e08 <qspi_ready_wait+0x2c>)
}
   14dfc:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_TIMEOUT;
   14dfe:	4803      	ldr	r0, [pc, #12]	; (14e0c <qspi_ready_wait+0x30>)
   14e00:	e7fc      	b.n	14dfc <qspi_ready_wait+0x20>
   14e02:	bf00      	nop
   14e04:	40029000 	.word	0x40029000
   14e08:	0bad0000 	.word	0x0bad0000
   14e0c:	0bad0007 	.word	0x0bad0007

00014e10 <nrfx_qspi_init>:
    if (m_cb.state != NRFX_QSPI_STATE_UNINITIALIZED)
   14e10:	4b2f      	ldr	r3, [pc, #188]	; (14ed0 <nrfx_qspi_init+0xc0>)
   14e12:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
   14e16:	2b00      	cmp	r3, #0
   14e18:	d155      	bne.n	14ec6 <nrfx_qspi_init+0xb6>
{
   14e1a:	b570      	push	{r4, r5, r6, lr}
   14e1c:	4604      	mov	r4, r0
   14e1e:	460d      	mov	r5, r1
   14e20:	4616      	mov	r6, r2
    if (!qspi_pins_configure(p_config))
   14e22:	f7ff fe51 	bl	14ac8 <qspi_pins_configure>
   14e26:	2800      	cmp	r0, #0
   14e28:	d04f      	beq.n	14eca <nrfx_qspi_init+0xba>
    nrf_qspi_xip_offset_set(NRF_QSPI, p_config->xip_offset);
   14e2a:	4622      	mov	r2, r4
   14e2c:	f852 1b0a 	ldr.w	r1, [r2], #10
    p_reg->XIPOFFSET = xip_offset;
   14e30:	4b28      	ldr	r3, [pc, #160]	; (14ed4 <nrfx_qspi_init+0xc4>)
   14e32:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
    uint32_t config = p_config->readoc;
   14e36:	7aa3      	ldrb	r3, [r4, #10]
    config |= ((uint32_t)p_config->writeoc)    << QSPI_IFCONFIG0_WRITEOC_Pos;
   14e38:	7851      	ldrb	r1, [r2, #1]
   14e3a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
    config |= ((uint32_t)p_config->addrmode)   << QSPI_IFCONFIG0_ADDRMODE_Pos;
   14e3e:	7891      	ldrb	r1, [r2, #2]
   14e40:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
    config |= (p_config->dpmconfig ? 1U : 0U ) << QSPI_IFCONFIG0_DPMENABLE_Pos;
   14e44:	78d2      	ldrb	r2, [r2, #3]
   14e46:	2a00      	cmp	r2, #0
   14e48:	d039      	beq.n	14ebe <nrfx_qspi_init+0xae>
   14e4a:	2280      	movs	r2, #128	; 0x80
   14e4c:	4313      	orrs	r3, r2
    p_reg->IFCONFIG0 = config;
   14e4e:	4921      	ldr	r1, [pc, #132]	; (14ed4 <nrfx_qspi_init+0xc4>)
   14e50:	f8c1 3544 	str.w	r3, [r1, #1348]	; 0x544
    nrf_qspi_ifconfig1_set(NRF_QSPI, &p_config->phy_if);
   14e54:	f104 020e 	add.w	r2, r4, #14
    uint32_t config = p_reg->IFCONFIG1 & 0x00FFFF00;
   14e58:	f8d1 3600 	ldr.w	r3, [r1, #1536]	; 0x600
   14e5c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   14e60:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    config |= p_config->sck_delay;
   14e64:	7ba1      	ldrb	r1, [r4, #14]
   14e66:	430b      	orrs	r3, r1
    config |= (p_config->dpmen ? 1U : 0U)      << QSPI_IFCONFIG1_DPMEN_Pos;
   14e68:	7be1      	ldrb	r1, [r4, #15]
   14e6a:	b351      	cbz	r1, 14ec2 <nrfx_qspi_init+0xb2>
   14e6c:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
   14e70:	430b      	orrs	r3, r1
    config |= ((uint32_t)(p_config->spi_mode)) << QSPI_IFCONFIG1_SPIMODE_Pos;
   14e72:	7891      	ldrb	r1, [r2, #2]
   14e74:	ea43 6341 	orr.w	r3, r3, r1, lsl #25
    config |= ((uint32_t)(p_config->sck_freq)) << QSPI_IFCONFIG1_SCKFREQ_Pos;
   14e78:	78d2      	ldrb	r2, [r2, #3]
   14e7a:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
    p_reg->IFCONFIG1 = config;
   14e7e:	4a15      	ldr	r2, [pc, #84]	; (14ed4 <nrfx_qspi_init+0xc4>)
   14e80:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600
    m_cb.handler = handler;
   14e84:	4b12      	ldr	r3, [pc, #72]	; (14ed0 <nrfx_qspi_init+0xc0>)
   14e86:	601d      	str	r5, [r3, #0]
    m_cb.p_context = p_context;
   14e88:	605e      	str	r6, [r3, #4]
    m_cb.skip_gpio_cfg = p_config->skip_gpio_cfg;
   14e8a:	7ce1      	ldrb	r1, [r4, #19]
   14e8c:	f883 1031 	strb.w	r1, [r3, #49]	; 0x31
    p_reg->INTENCLR = mask;
   14e90:	2301      	movs	r3, #1
   14e92:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
    if (handler)
   14e96:	b115      	cbz	r5, 14e9e <nrfx_qspi_init+0x8e>
        NRFX_IRQ_ENABLE(QSPI_IRQn);
   14e98:	2029      	movs	r0, #41	; 0x29
   14e9a:	f7fc fda9 	bl	119f0 <arch_irq_enable>
    m_cb.p_buffer_primary = NULL;
   14e9e:	4b0c      	ldr	r3, [pc, #48]	; (14ed0 <nrfx_qspi_init+0xc0>)
   14ea0:	2100      	movs	r1, #0
   14ea2:	6099      	str	r1, [r3, #8]
    m_cb.p_buffer_secondary = NULL;
   14ea4:	60d9      	str	r1, [r3, #12]
    m_cb.state = NRFX_QSPI_STATE_IDLE;
   14ea6:	2201      	movs	r2, #1
   14ea8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    p_reg->ENABLE = (QSPI_ENABLE_ENABLE_Enabled << QSPI_ENABLE_ENABLE_Pos);
   14eac:	4b09      	ldr	r3, [pc, #36]	; (14ed4 <nrfx_qspi_init+0xc4>)
   14eae:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   14eb2:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   14eb6:	601a      	str	r2, [r3, #0]
    return qspi_ready_wait();
   14eb8:	f7ff ff90 	bl	14ddc <qspi_ready_wait>
}
   14ebc:	bd70      	pop	{r4, r5, r6, pc}
    config |= (p_config->dpmconfig ? 1U : 0U ) << QSPI_IFCONFIG0_DPMENABLE_Pos;
   14ebe:	2200      	movs	r2, #0
   14ec0:	e7c4      	b.n	14e4c <nrfx_qspi_init+0x3c>
    config |= (p_config->dpmen ? 1U : 0U)      << QSPI_IFCONFIG1_DPMEN_Pos;
   14ec2:	2100      	movs	r1, #0
   14ec4:	e7d4      	b.n	14e70 <nrfx_qspi_init+0x60>
        return NRFX_ERROR_INVALID_STATE;
   14ec6:	4804      	ldr	r0, [pc, #16]	; (14ed8 <nrfx_qspi_init+0xc8>)
}
   14ec8:	4770      	bx	lr
        return NRFX_ERROR_INVALID_PARAM;
   14eca:	4804      	ldr	r0, [pc, #16]	; (14edc <nrfx_qspi_init+0xcc>)
   14ecc:	e7f6      	b.n	14ebc <nrfx_qspi_init+0xac>
   14ece:	bf00      	nop
   14ed0:	200009bc 	.word	0x200009bc
   14ed4:	40029000 	.word	0x40029000
   14ed8:	0bad0005 	.word	0x0bad0005
   14edc:	0bad0004 	.word	0x0bad0004

00014ee0 <nrfx_qspi_cinstr_xfer>:
{
   14ee0:	b538      	push	{r3, r4, r5, lr}
    if (m_cb.state != NRFX_QSPI_STATE_IDLE)
   14ee2:	4b41      	ldr	r3, [pc, #260]	; (14fe8 <nrfx_qspi_cinstr_xfer+0x108>)
   14ee4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
   14ee8:	2b01      	cmp	r3, #1
   14eea:	d179      	bne.n	14fe0 <nrfx_qspi_cinstr_xfer+0x100>
   14eec:	4604      	mov	r4, r0
   14eee:	4615      	mov	r5, r2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   14ef0:	4b3e      	ldr	r3, [pc, #248]	; (14fec <nrfx_qspi_cinstr_xfer+0x10c>)
   14ef2:	2200      	movs	r2, #0
   14ef4:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    if (p_tx_buffer)
   14ef8:	b329      	cbz	r1, 14f46 <nrfx_qspi_cinstr_xfer+0x66>
        nrf_qspi_cinstrdata_set(NRF_QSPI, p_config->length, p_tx_buffer);
   14efa:	7843      	ldrb	r3, [r0, #1]
{
    uint32_t reg = 0;
    uint8_t const *p_tx_data_8 = (uint8_t const *) p_tx_data;

    // Load custom instruction.
    switch (length)
   14efc:	3b02      	subs	r3, #2
   14efe:	2b07      	cmp	r3, #7
   14f00:	d821      	bhi.n	14f46 <nrfx_qspi_cinstr_xfer+0x66>
   14f02:	e8df f003 	tbb	[pc, r3]
   14f06:	5557      	.short	0x5557
   14f08:	4f511353 	.word	0x4f511353
   14f0c:	0407      	.short	0x0407
    {
        case NRF_QSPI_CINSTR_LEN_9B:
            reg |= ((uint32_t)p_tx_data_8[7]) << QSPI_CINSTRDAT1_BYTE7_Pos;
   14f0e:	79cb      	ldrb	r3, [r1, #7]
   14f10:	061b      	lsls	r3, r3, #24
   14f12:	e000      	b.n	14f16 <nrfx_qspi_cinstr_xfer+0x36>
    switch (length)
   14f14:	2300      	movs	r3, #0
            /* FALLTHROUGH */
        case NRF_QSPI_CINSTR_LEN_8B:
            reg |= ((uint32_t)p_tx_data_8[6]) << QSPI_CINSTRDAT1_BYTE6_Pos;
   14f16:	798a      	ldrb	r2, [r1, #6]
   14f18:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
            /* FALLTHROUGH */
        case NRF_QSPI_CINSTR_LEN_7B:
            reg |= ((uint32_t)p_tx_data_8[5]) << QSPI_CINSTRDAT1_BYTE5_Pos;
   14f1c:	794a      	ldrb	r2, [r1, #5]
   14f1e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
            /* FALLTHROUGH */
        case NRF_QSPI_CINSTR_LEN_6B:
            reg |= ((uint32_t)p_tx_data_8[4]);
   14f22:	790a      	ldrb	r2, [r1, #4]
   14f24:	4313      	orrs	r3, r2
            p_reg->CINSTRDAT1 = reg;
   14f26:	4a31      	ldr	r2, [pc, #196]	; (14fec <nrfx_qspi_cinstr_xfer+0x10c>)
   14f28:	f8c2 363c 	str.w	r3, [r2, #1596]	; 0x63c
            reg = 0;
            /* FALLTHROUGH */
        case NRF_QSPI_CINSTR_LEN_5B:
            reg |= ((uint32_t)p_tx_data_8[3]) << QSPI_CINSTRDAT0_BYTE3_Pos;
   14f2c:	78cb      	ldrb	r3, [r1, #3]
   14f2e:	061b      	lsls	r3, r3, #24
            /* FALLTHROUGH */
        case NRF_QSPI_CINSTR_LEN_4B:
            reg |= ((uint32_t)p_tx_data_8[2]) << QSPI_CINSTRDAT0_BYTE2_Pos;
   14f30:	788a      	ldrb	r2, [r1, #2]
   14f32:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
            /* FALLTHROUGH */
        case NRF_QSPI_CINSTR_LEN_3B:
            reg |= ((uint32_t)p_tx_data_8[1]) << QSPI_CINSTRDAT0_BYTE1_Pos;
   14f36:	784a      	ldrb	r2, [r1, #1]
   14f38:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
            /* FALLTHROUGH */
        case NRF_QSPI_CINSTR_LEN_2B:
            reg |= ((uint32_t)p_tx_data_8[0]);
   14f3c:	780a      	ldrb	r2, [r1, #0]
   14f3e:	4313      	orrs	r3, r2
            p_reg->CINSTRDAT0 = reg;
   14f40:	4a2a      	ldr	r2, [pc, #168]	; (14fec <nrfx_qspi_cinstr_xfer+0x10c>)
   14f42:	f8c2 3638 	str.w	r3, [r2, #1592]	; 0x638
    p_reg->INTENCLR = mask;
   14f46:	4a29      	ldr	r2, [pc, #164]	; (14fec <nrfx_qspi_cinstr_xfer+0x10c>)
   14f48:	2301      	movs	r3, #1
   14f4a:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
}

NRF_STATIC_INLINE void nrf_qspi_cinstr_transfer_start(NRF_QSPI_Type *                p_reg,
                                                      nrf_qspi_cinstr_conf_t const * p_config)
{
    p_reg->CINSTRCONF = (((uint32_t)p_config->opcode    << QSPI_CINSTRCONF_OPCODE_Pos) |
   14f4e:	7823      	ldrb	r3, [r4, #0]
                         ((uint32_t)p_config->length    << QSPI_CINSTRCONF_LENGTH_Pos) |
   14f50:	7861      	ldrb	r1, [r4, #1]
    p_reg->CINSTRCONF = (((uint32_t)p_config->opcode    << QSPI_CINSTRCONF_OPCODE_Pos) |
   14f52:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
                         ((uint32_t)p_config->io2_level << QSPI_CINSTRCONF_LIO2_Pos) |
   14f56:	78a1      	ldrb	r1, [r4, #2]
                         ((uint32_t)p_config->length    << QSPI_CINSTRCONF_LENGTH_Pos) |
   14f58:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
                         ((uint32_t)p_config->io3_level << QSPI_CINSTRCONF_LIO3_Pos) |
   14f5c:	78e1      	ldrb	r1, [r4, #3]
                         ((uint32_t)p_config->io2_level << QSPI_CINSTRCONF_LIO2_Pos) |
   14f5e:	ea43 3341 	orr.w	r3, r3, r1, lsl #13
                         ((uint32_t)p_config->wipwait   << QSPI_CINSTRCONF_WIPWAIT_Pos) |
   14f62:	7921      	ldrb	r1, [r4, #4]
                         ((uint32_t)p_config->io3_level << QSPI_CINSTRCONF_LIO3_Pos) |
   14f64:	ea43 3381 	orr.w	r3, r3, r1, lsl #14
                         ((uint32_t)p_config->wren      << QSPI_CINSTRCONF_WREN_Pos));
   14f68:	7961      	ldrb	r1, [r4, #5]
                         ((uint32_t)p_config->wipwait   << QSPI_CINSTRCONF_WIPWAIT_Pos) |
   14f6a:	ea43 33c1 	orr.w	r3, r3, r1, lsl #15
    p_reg->CINSTRCONF = (((uint32_t)p_config->opcode    << QSPI_CINSTRCONF_OPCODE_Pos) |
   14f6e:	f8c2 3634 	str.w	r3, [r2, #1588]	; 0x634
    if (qspi_ready_wait() == NRFX_ERROR_TIMEOUT)
   14f72:	f7ff ff33 	bl	14ddc <qspi_ready_wait>
   14f76:	4b1e      	ldr	r3, [pc, #120]	; (14ff0 <nrfx_qspi_cinstr_xfer+0x110>)
   14f78:	4298      	cmp	r0, r3
   14f7a:	d032      	beq.n	14fe2 <nrfx_qspi_cinstr_xfer+0x102>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   14f7c:	4b1b      	ldr	r3, [pc, #108]	; (14fec <nrfx_qspi_cinstr_xfer+0x10c>)
   14f7e:	2200      	movs	r2, #0
   14f80:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    if (p_rx_buffer)
   14f84:	b375      	cbz	r5, 14fe4 <nrfx_qspi_cinstr_xfer+0x104>
        nrf_qspi_cinstrdata_get(NRF_QSPI, p_config->length, p_rx_buffer);
   14f86:	7863      	ldrb	r3, [r4, #1]
    uint32_t reg1 = p_reg->CINSTRDAT1;
   14f88:	4a18      	ldr	r2, [pc, #96]	; (14fec <nrfx_qspi_cinstr_xfer+0x10c>)
   14f8a:	f8d2 163c 	ldr.w	r1, [r2, #1596]	; 0x63c
    uint32_t reg0 = p_reg->CINSTRDAT0;
   14f8e:	f8d2 2638 	ldr.w	r2, [r2, #1592]	; 0x638
    switch (length)
   14f92:	3b02      	subs	r3, #2
   14f94:	2b07      	cmp	r3, #7
   14f96:	d821      	bhi.n	14fdc <nrfx_qspi_cinstr_xfer+0xfc>
   14f98:	e8df f003 	tbb	[pc, r3]
   14f9c:	17191c1f 	.word	0x17191c1f
   14fa0:	0e101316 	.word	0x0e101316
    switch (length)
   14fa4:	2300      	movs	r3, #0
   14fa6:	e7b9      	b.n	14f1c <nrfx_qspi_cinstr_xfer+0x3c>
   14fa8:	2300      	movs	r3, #0
   14faa:	e7ba      	b.n	14f22 <nrfx_qspi_cinstr_xfer+0x42>
   14fac:	2300      	movs	r3, #0
   14fae:	e7bf      	b.n	14f30 <nrfx_qspi_cinstr_xfer+0x50>
   14fb0:	2300      	movs	r3, #0
   14fb2:	e7c0      	b.n	14f36 <nrfx_qspi_cinstr_xfer+0x56>
   14fb4:	2300      	movs	r3, #0
   14fb6:	e7c1      	b.n	14f3c <nrfx_qspi_cinstr_xfer+0x5c>
            p_rx_data_8[7] = (uint8_t)(reg1 >> QSPI_CINSTRDAT1_BYTE7_Pos);
   14fb8:	0e0b      	lsrs	r3, r1, #24
   14fba:	71eb      	strb	r3, [r5, #7]
            p_rx_data_8[6] = (uint8_t)(reg1 >> QSPI_CINSTRDAT1_BYTE6_Pos);
   14fbc:	f3c1 4307 	ubfx	r3, r1, #16, #8
   14fc0:	71ab      	strb	r3, [r5, #6]
            p_rx_data_8[5] = (uint8_t)(reg1 >> QSPI_CINSTRDAT1_BYTE5_Pos);
   14fc2:	f3c1 2307 	ubfx	r3, r1, #8, #8
   14fc6:	716b      	strb	r3, [r5, #5]
            p_rx_data_8[4] = (uint8_t)(reg1);
   14fc8:	7129      	strb	r1, [r5, #4]
            p_rx_data_8[3] = (uint8_t)(reg0 >> QSPI_CINSTRDAT0_BYTE3_Pos);
   14fca:	0e13      	lsrs	r3, r2, #24
   14fcc:	70eb      	strb	r3, [r5, #3]
            p_rx_data_8[2] = (uint8_t)(reg0 >> QSPI_CINSTRDAT0_BYTE2_Pos);
   14fce:	f3c2 4307 	ubfx	r3, r2, #16, #8
   14fd2:	70ab      	strb	r3, [r5, #2]
            p_rx_data_8[1] = (uint8_t)(reg0 >> QSPI_CINSTRDAT0_BYTE1_Pos);
   14fd4:	f3c2 2307 	ubfx	r3, r2, #8, #8
   14fd8:	706b      	strb	r3, [r5, #1]
            p_rx_data_8[0] = (uint8_t)(reg0);
   14fda:	702a      	strb	r2, [r5, #0]
    return NRFX_SUCCESS;
   14fdc:	4805      	ldr	r0, [pc, #20]	; (14ff4 <nrfx_qspi_cinstr_xfer+0x114>)
}
   14fde:	e000      	b.n	14fe2 <nrfx_qspi_cinstr_xfer+0x102>
        return NRFX_ERROR_BUSY;
   14fe0:	4805      	ldr	r0, [pc, #20]	; (14ff8 <nrfx_qspi_cinstr_xfer+0x118>)
}
   14fe2:	bd38      	pop	{r3, r4, r5, pc}
    return NRFX_SUCCESS;
   14fe4:	4803      	ldr	r0, [pc, #12]	; (14ff4 <nrfx_qspi_cinstr_xfer+0x114>)
   14fe6:	e7fc      	b.n	14fe2 <nrfx_qspi_cinstr_xfer+0x102>
   14fe8:	200009bc 	.word	0x200009bc
   14fec:	40029000 	.word	0x40029000
   14ff0:	0bad0007 	.word	0x0bad0007
   14ff4:	0bad0000 	.word	0x0bad0000
   14ff8:	0bad000b 	.word	0x0bad000b

00014ffc <nrfx_qspi_mem_busy_check>:
{
   14ffc:	b500      	push	{lr}
   14ffe:	b083      	sub	sp, #12
    uint8_t status_value = 0;
   15000:	2300      	movs	r3, #0
   15002:	f88d 3007 	strb.w	r3, [sp, #7]
    nrf_qspi_cinstr_conf_t const config = {
   15006:	9300      	str	r3, [sp, #0]
   15008:	f8ad 3004 	strh.w	r3, [sp, #4]
   1500c:	2305      	movs	r3, #5
   1500e:	f88d 3000 	strb.w	r3, [sp]
   15012:	2302      	movs	r3, #2
   15014:	f88d 3001 	strb.w	r3, [sp, #1]
   15018:	2301      	movs	r3, #1
   1501a:	f88d 3003 	strb.w	r3, [sp, #3]
    ret_code = nrfx_qspi_cinstr_xfer(&config, &status_value, &status_value);
   1501e:	f10d 0207 	add.w	r2, sp, #7
   15022:	4611      	mov	r1, r2
   15024:	4668      	mov	r0, sp
   15026:	f7ff ff5b 	bl	14ee0 <nrfx_qspi_cinstr_xfer>
    if (ret_code != NRFX_SUCCESS)
   1502a:	4b06      	ldr	r3, [pc, #24]	; (15044 <nrfx_qspi_mem_busy_check+0x48>)
   1502c:	4298      	cmp	r0, r3
   1502e:	d104      	bne.n	1503a <nrfx_qspi_mem_busy_check+0x3e>
    if ((status_value & QSPI_MEM_STATUSREG_WIP_Pos) != 0x00)
   15030:	f89d 3007 	ldrb.w	r3, [sp, #7]
   15034:	f013 0f01 	tst.w	r3, #1
   15038:	d102      	bne.n	15040 <nrfx_qspi_mem_busy_check+0x44>
}
   1503a:	b003      	add	sp, #12
   1503c:	f85d fb04 	ldr.w	pc, [sp], #4
        return NRFX_ERROR_BUSY;
   15040:	4801      	ldr	r0, [pc, #4]	; (15048 <nrfx_qspi_mem_busy_check+0x4c>)
   15042:	e7fa      	b.n	1503a <nrfx_qspi_mem_busy_check+0x3e>
   15044:	0bad0000 	.word	0x0bad0000
   15048:	0bad000b 	.word	0x0bad000b

0001504c <nrfx_qspi_uninit>:
{
   1504c:	b508      	push	{r3, lr}
    NRFX_IRQ_DISABLE(QSPI_IRQn);
   1504e:	2029      	movs	r0, #41	; 0x29
   15050:	f7fc fcdc 	bl	11a0c <arch_irq_disable>
                         (QSPI_CINSTRCONF_LFEN_Msk));
}

NRF_STATIC_INLINE bool nrf_qspi_cinstr_long_transfer_is_ongoing(NRF_QSPI_Type const * p_reg)
{
    return (bool)((p_reg->CINSTRCONF & (QSPI_CINSTRCONF_LFEN_Msk | QSPI_CINSTRCONF_LFSTOP_Msk))
   15054:	4b14      	ldr	r3, [pc, #80]	; (150a8 <nrfx_qspi_uninit+0x5c>)
   15056:	f8d3 3634 	ldr.w	r3, [r3, #1588]	; 0x634
   1505a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
    if (nrf_qspi_cinstr_long_transfer_is_ongoing(NRF_QSPI))
   1505e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   15062:	d019      	beq.n	15098 <nrfx_qspi_uninit+0x4c>
    p_reg->INTENCLR = mask;
   15064:	4b10      	ldr	r3, [pc, #64]	; (150a8 <nrfx_qspi_uninit+0x5c>)
   15066:	2201      	movs	r2, #1
   15068:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1506c:	611a      	str	r2, [r3, #16]
    if (nrf52_errata_122())
   1506e:	f003 ff4d 	bl	18f0c <nrf52_errata_122>
   15072:	b110      	cbz	r0, 1507a <nrfx_qspi_uninit+0x2e>
        *(volatile uint32_t *)0x40029054ul = 1ul;
   15074:	4b0c      	ldr	r3, [pc, #48]	; (150a8 <nrfx_qspi_uninit+0x5c>)
   15076:	2201      	movs	r2, #1
   15078:	655a      	str	r2, [r3, #84]	; 0x54
    p_reg->ENABLE = (QSPI_ENABLE_ENABLE_Disabled << QSPI_ENABLE_ENABLE_Pos);
   1507a:	4b0b      	ldr	r3, [pc, #44]	; (150a8 <nrfx_qspi_uninit+0x5c>)
   1507c:	2200      	movs	r2, #0
   1507e:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   15082:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    if (!m_cb.skip_gpio_cfg)
   15086:	4b09      	ldr	r3, [pc, #36]	; (150ac <nrfx_qspi_uninit+0x60>)
   15088:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
   1508c:	b14b      	cbz	r3, 150a2 <nrfx_qspi_uninit+0x56>
    m_cb.state = NRFX_QSPI_STATE_UNINITIALIZED;
   1508e:	4b07      	ldr	r3, [pc, #28]	; (150ac <nrfx_qspi_uninit+0x60>)
   15090:	2200      	movs	r2, #0
   15092:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
}
   15096:	bd08      	pop	{r3, pc}
                                                              bool                  finalize)
{
    uint32_t mask = (((uint32_t)length << QSPI_CINSTRCONF_LENGTH_Pos) | (QSPI_CINSTRCONF_LFEN_Msk));
    mask |= (finalize ? QSPI_CINSTRCONF_LFSTOP_Msk : 0);

    p_reg->CINSTRCONF = mask;
   15098:	4b03      	ldr	r3, [pc, #12]	; (150a8 <nrfx_qspi_uninit+0x5c>)
   1509a:	4a05      	ldr	r2, [pc, #20]	; (150b0 <nrfx_qspi_uninit+0x64>)
   1509c:	f8c3 2634 	str.w	r2, [r3, #1588]	; 0x634
}
   150a0:	e7e0      	b.n	15064 <nrfx_qspi_uninit+0x18>
        qspi_pins_deconfigure();
   150a2:	f7ff fdd5 	bl	14c50 <qspi_pins_deconfigure>
   150a6:	e7f2      	b.n	1508e <nrfx_qspi_uninit+0x42>
   150a8:	40029000 	.word	0x40029000
   150ac:	200009bc 	.word	0x200009bc
   150b0:	00030100 	.word	0x00030100

000150b4 <nrfx_qspi_erase>:
    if (!nrfx_is_word_aligned((void const *)start_address))
   150b4:	f011 0f03 	tst.w	r1, #3
   150b8:	d128      	bne.n	1510c <nrfx_qspi_erase+0x58>
    if (m_cb.handler && m_cb.state != NRFX_QSPI_STATE_IDLE)
   150ba:	4b16      	ldr	r3, [pc, #88]	; (15114 <nrfx_qspi_erase+0x60>)
   150bc:	681b      	ldr	r3, [r3, #0]
   150be:	b123      	cbz	r3, 150ca <nrfx_qspi_erase+0x16>
   150c0:	4b14      	ldr	r3, [pc, #80]	; (15114 <nrfx_qspi_erase+0x60>)
   150c2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
   150c6:	2b01      	cmp	r3, #1
   150c8:	d122      	bne.n	15110 <nrfx_qspi_erase+0x5c>
    m_cb.state = NRFX_QSPI_STATE_ERASE;
   150ca:	4a12      	ldr	r2, [pc, #72]	; (15114 <nrfx_qspi_erase+0x60>)
   150cc:	2304      	movs	r3, #4
   150ce:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
    p_reg->ERASE.PTR = erase_addr;
   150d2:	4b11      	ldr	r3, [pc, #68]	; (15118 <nrfx_qspi_erase+0x64>)
   150d4:	f8c3 151c 	str.w	r1, [r3, #1308]	; 0x51c
    p_reg->ERASE.LEN = len;
   150d8:	f8c3 0520 	str.w	r0, [r3, #1312]	; 0x520
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   150dc:	2100      	movs	r1, #0
   150de:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   150e2:	2101      	movs	r1, #1
   150e4:	60d9      	str	r1, [r3, #12]
    if (!m_cb.handler)
   150e6:	6813      	ldr	r3, [r2, #0]
   150e8:	b12b      	cbz	r3, 150f6 <nrfx_qspi_erase+0x42>
    p_reg->INTENSET = mask;
   150ea:	4b0b      	ldr	r3, [pc, #44]	; (15118 <nrfx_qspi_erase+0x64>)
   150ec:	2201      	movs	r2, #1
   150ee:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    return NRFX_SUCCESS;
   150f2:	480a      	ldr	r0, [pc, #40]	; (1511c <nrfx_qspi_erase+0x68>)
}
   150f4:	4770      	bx	lr
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   150f6:	4b08      	ldr	r3, [pc, #32]	; (15118 <nrfx_qspi_erase+0x64>)
   150f8:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
        while (!nrf_qspi_event_check(NRF_QSPI, NRF_QSPI_EVENT_READY))
   150fc:	2b00      	cmp	r3, #0
   150fe:	d0fa      	beq.n	150f6 <nrfx_qspi_erase+0x42>
        m_cb.state = NRFX_QSPI_STATE_IDLE;
   15100:	4b04      	ldr	r3, [pc, #16]	; (15114 <nrfx_qspi_erase+0x60>)
   15102:	2201      	movs	r2, #1
   15104:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return NRFX_SUCCESS;
   15108:	4804      	ldr	r0, [pc, #16]	; (1511c <nrfx_qspi_erase+0x68>)
   1510a:	4770      	bx	lr
        return NRFX_ERROR_INVALID_ADDR;
   1510c:	4804      	ldr	r0, [pc, #16]	; (15120 <nrfx_qspi_erase+0x6c>)
   1510e:	4770      	bx	lr
        return NRFX_ERROR_BUSY;
   15110:	4804      	ldr	r0, [pc, #16]	; (15124 <nrfx_qspi_erase+0x70>)
}
   15112:	4770      	bx	lr
   15114:	200009bc 	.word	0x200009bc
   15118:	40029000 	.word	0x40029000
   1511c:	0bad0000 	.word	0x0bad0000
   15120:	0bad000a 	.word	0x0bad000a
   15124:	0bad000b 	.word	0x0bad000b

00015128 <nrfx_qspi_irq_handler>:
   15128:	4b0e      	ldr	r3, [pc, #56]	; (15164 <nrfx_qspi_irq_handler+0x3c>)
   1512a:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100

void nrfx_qspi_irq_handler(void)
{
    // Catch Event ready interrupts
    if (nrf_qspi_event_check(NRF_QSPI, NRF_QSPI_EVENT_READY))
   1512e:	b903      	cbnz	r3, 15132 <nrfx_qspi_irq_handler+0xa>
   15130:	4770      	bx	lr
{
   15132:	b510      	push	{r4, lr}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   15134:	4b0b      	ldr	r3, [pc, #44]	; (15164 <nrfx_qspi_irq_handler+0x3c>)
   15136:	2200      	movs	r2, #0
   15138:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    {
        nrf_qspi_event_clear(NRF_QSPI, NRF_QSPI_EVENT_READY);

        qspi_extended_event_process(&m_cb.evt_ext);
   1513c:	4c0a      	ldr	r4, [pc, #40]	; (15168 <nrfx_qspi_irq_handler+0x40>)
   1513e:	f104 0020 	add.w	r0, r4, #32
   15142:	f7ff fe2b 	bl	14d9c <qspi_extended_event_process>
        if (!m_cb.p_buffer_primary)
   15146:	68a3      	ldr	r3, [r4, #8]
   15148:	b143      	cbz	r3, 1515c <nrfx_qspi_irq_handler+0x34>
        {
            m_cb.state = NRFX_QSPI_STATE_IDLE;
        }

        m_cb.handler(NRFX_QSPI_EVENT_DONE, m_cb.p_context);
   1514a:	4c07      	ldr	r4, [pc, #28]	; (15168 <nrfx_qspi_irq_handler+0x40>)
   1514c:	6823      	ldr	r3, [r4, #0]
   1514e:	6861      	ldr	r1, [r4, #4]
   15150:	2000      	movs	r0, #0
   15152:	4798      	blx	r3
        m_cb.evt_ext.type = NRFX_QSPI_EVENT_NONE;
   15154:	2300      	movs	r3, #0
   15156:	f884 3020 	strb.w	r3, [r4, #32]
    }
}
   1515a:	bd10      	pop	{r4, pc}
            m_cb.state = NRFX_QSPI_STATE_IDLE;
   1515c:	2201      	movs	r2, #1
   1515e:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
   15162:	e7f2      	b.n	1514a <nrfx_qspi_irq_handler+0x22>
   15164:	40029000 	.word	0x40029000
   15168:	200009bc 	.word	0x200009bc

0001516c <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
   1516c:	b510      	push	{r4, lr}
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
   1516e:	4c14      	ldr	r4, [pc, #80]	; (151c0 <_DoInit+0x54>)
   15170:	2303      	movs	r3, #3
   15172:	6123      	str	r3, [r4, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
   15174:	6163      	str	r3, [r4, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
   15176:	4a13      	ldr	r2, [pc, #76]	; (151c4 <_DoInit+0x58>)
   15178:	61a2      	str	r2, [r4, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
   1517a:	4b13      	ldr	r3, [pc, #76]	; (151c8 <_DoInit+0x5c>)
   1517c:	61e3      	str	r3, [r4, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
   1517e:	f44f 6380 	mov.w	r3, #1024	; 0x400
   15182:	6223      	str	r3, [r4, #32]
  p->aUp[0].RdOff         = 0u;
   15184:	2300      	movs	r3, #0
   15186:	62a3      	str	r3, [r4, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
   15188:	6263      	str	r3, [r4, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
   1518a:	62e3      	str	r3, [r4, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
   1518c:	6622      	str	r2, [r4, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
   1518e:	4a0f      	ldr	r2, [pc, #60]	; (151cc <_DoInit+0x60>)
   15190:	6662      	str	r2, [r4, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
   15192:	2210      	movs	r2, #16
   15194:	66a2      	str	r2, [r4, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
   15196:	6723      	str	r3, [r4, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
   15198:	66e3      	str	r3, [r4, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
   1519a:	6763      	str	r3, [r4, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
   1519c:	490c      	ldr	r1, [pc, #48]	; (151d0 <_DoInit+0x64>)
   1519e:	1de0      	adds	r0, r4, #7
   151a0:	f002 fcc3 	bl	17b2a <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
   151a4:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
   151a8:	490a      	ldr	r1, [pc, #40]	; (151d4 <_DoInit+0x68>)
   151aa:	4620      	mov	r0, r4
   151ac:	f002 fcbd 	bl	17b2a <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
   151b0:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
   151b4:	2320      	movs	r3, #32
   151b6:	71a3      	strb	r3, [r4, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
   151b8:	f3bf 8f5f 	dmb	sy
}
   151bc:	bd10      	pop	{r4, pc}
   151be:	bf00      	nop
   151c0:	200009f0 	.word	0x200009f0
   151c4:	00019e8c 	.word	0x00019e8c
   151c8:	20000aa8 	.word	0x20000aa8
   151cc:	20000a98 	.word	0x20000a98
   151d0:	00019e98 	.word	0x00019e98
   151d4:	00019e9c 	.word	0x00019e9c

000151d8 <z_device_state_init>:
 * The state object is always zero-initialized, but this may not be
 * sufficient.
 */
void z_device_state_init(void)
{
	const struct device *dev = __device_start;
   151d8:	4b03      	ldr	r3, [pc, #12]	; (151e8 <z_device_state_init+0x10>)

	while (dev < __device_end) {
   151da:	e000      	b.n	151de <z_device_state_init+0x6>
		z_object_init(dev);
		++dev;
   151dc:	3318      	adds	r3, #24
	while (dev < __device_end) {
   151de:	4a03      	ldr	r2, [pc, #12]	; (151ec <z_device_state_init+0x14>)
   151e0:	4293      	cmp	r3, r2
   151e2:	d3fb      	bcc.n	151dc <z_device_state_init+0x4>
	}
}
   151e4:	4770      	bx	lr
   151e6:	bf00      	nop
   151e8:	000195c4 	.word	0x000195c4
   151ec:	0001966c 	.word	0x0001966c

000151f0 <z_sys_init_run_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void z_sys_init_run_level(int32_t level)
{
   151f0:	b570      	push	{r4, r5, r6, lr}
   151f2:	4606      	mov	r6, r0
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   151f4:	4b11      	ldr	r3, [pc, #68]	; (1523c <z_sys_init_run_level+0x4c>)
   151f6:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   151fa:	e009      	b.n	15210 <z_sys_init_run_level+0x20>
			/* Mark device initialized.  If initialization
			 * failed, record the error condition.
			 */
			if (rc != 0) {
				if (rc < 0) {
					rc = -rc;
   151fc:	4240      	negs	r0, r0
   151fe:	e017      	b.n	15230 <z_sys_init_run_level+0x40>
				}
				if (rc > UINT8_MAX) {
					rc = UINT8_MAX;
				}
				dev->state->init_res = rc;
   15200:	68eb      	ldr	r3, [r5, #12]
   15202:	7018      	strb	r0, [r3, #0]
			}
			dev->state->initialized = true;
   15204:	68ea      	ldr	r2, [r5, #12]
   15206:	7853      	ldrb	r3, [r2, #1]
   15208:	f043 0301 	orr.w	r3, r3, #1
   1520c:	7053      	strb	r3, [r2, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   1520e:	3408      	adds	r4, #8
   15210:	1c73      	adds	r3, r6, #1
   15212:	4a0a      	ldr	r2, [pc, #40]	; (1523c <z_sys_init_run_level+0x4c>)
   15214:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15218:	42a3      	cmp	r3, r4
   1521a:	d90d      	bls.n	15238 <z_sys_init_run_level+0x48>
		const struct device *dev = entry->dev;
   1521c:	6865      	ldr	r5, [r4, #4]
		int rc = entry->init(dev);
   1521e:	6823      	ldr	r3, [r4, #0]
   15220:	4628      	mov	r0, r5
   15222:	4798      	blx	r3
		if (dev != NULL) {
   15224:	2d00      	cmp	r5, #0
   15226:	d0f2      	beq.n	1520e <z_sys_init_run_level+0x1e>
			if (rc != 0) {
   15228:	2800      	cmp	r0, #0
   1522a:	d0eb      	beq.n	15204 <z_sys_init_run_level+0x14>
				if (rc < 0) {
   1522c:	2800      	cmp	r0, #0
   1522e:	dbe5      	blt.n	151fc <z_sys_init_run_level+0xc>
				if (rc > UINT8_MAX) {
   15230:	28ff      	cmp	r0, #255	; 0xff
   15232:	dde5      	ble.n	15200 <z_sys_init_run_level+0x10>
					rc = UINT8_MAX;
   15234:	20ff      	movs	r0, #255	; 0xff
   15236:	e7e3      	b.n	15200 <z_sys_init_run_level+0x10>
		}
	}
}
   15238:	bd70      	pop	{r4, r5, r6, pc}
   1523a:	bf00      	nop
   1523c:	00019ea4 	.word	0x00019ea4

00015240 <init_idle_thread>:
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */

#if defined(CONFIG_MULTITHREADING)
__boot_func
static void init_idle_thread(int i)
{
   15240:	b510      	push	{r4, lr}
   15242:	b086      	sub	sp, #24
	struct k_thread *thread = &z_idle_threads[i];
   15244:	4c10      	ldr	r4, [pc, #64]	; (15288 <init_idle_thread+0x48>)
   15246:	23b0      	movs	r3, #176	; 0xb0
   15248:	fb03 4400 	mla	r4, r3, r0, r4
	k_thread_stack_t *stack = z_idle_stacks[i];
   1524c:	eb00 0c40 	add.w	ip, r0, r0, lsl #1
#else
	char *tname = NULL;
#endif /* CONFIG_THREAD_NAME */

	z_setup_new_thread(thread, stack,
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   15250:	4b0e      	ldr	r3, [pc, #56]	; (1528c <init_idle_thread+0x4c>)
   15252:	eb03 00cc 	add.w	r0, r3, ip, lsl #3
	z_setup_new_thread(thread, stack,
   15256:	4b0e      	ldr	r3, [pc, #56]	; (15290 <init_idle_thread+0x50>)
   15258:	9305      	str	r3, [sp, #20]
   1525a:	2301      	movs	r3, #1
   1525c:	9304      	str	r3, [sp, #16]
   1525e:	230f      	movs	r3, #15
   15260:	9303      	str	r3, [sp, #12]
   15262:	2300      	movs	r3, #0
   15264:	9302      	str	r3, [sp, #8]
   15266:	9301      	str	r3, [sp, #4]
   15268:	9000      	str	r0, [sp, #0]
   1526a:	4b0a      	ldr	r3, [pc, #40]	; (15294 <init_idle_thread+0x54>)
   1526c:	f44f 72a0 	mov.w	r2, #320	; 0x140
   15270:	4909      	ldr	r1, [pc, #36]	; (15298 <init_idle_thread+0x58>)
   15272:	eb01 11cc 	add.w	r1, r1, ip, lsl #7
   15276:	4620      	mov	r0, r4
   15278:	f000 f94c 	bl	15514 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   1527c:	7b63      	ldrb	r3, [r4, #13]
   1527e:	f023 0304 	bic.w	r3, r3, #4
   15282:	7363      	strb	r3, [r4, #13]
	z_mark_thread_as_started(thread);

#ifdef CONFIG_SMP
	thread->base.is_idle = 1U;
#endif
}
   15284:	b006      	add	sp, #24
   15286:	bd10      	pop	{r4, pc}
   15288:	20000240 	.word	0x20000240
   1528c:	20000ea8 	.word	0x20000ea8
   15290:	00019ebc 	.word	0x00019ebc
   15294:	00015671 	.word	0x00015671
   15298:	20001940 	.word	0x20001940

0001529c <bg_thread_main>:
{
   1529c:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
   1529e:	4b0a      	ldr	r3, [pc, #40]	; (152c8 <bg_thread_main+0x2c>)
   152a0:	2201      	movs	r2, #1
   152a2:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   152a4:	2002      	movs	r0, #2
   152a6:	f7ff ffa3 	bl	151f0 <z_sys_init_run_level>
	boot_banner();
   152aa:	f001 f8ab 	bl	16404 <boot_banner>
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
   152ae:	2003      	movs	r0, #3
   152b0:	f7ff ff9e 	bl	151f0 <z_sys_init_run_level>
	z_init_static_threads();
   152b4:	f000 f992 	bl	155dc <z_init_static_threads>
	main();
   152b8:	f7fb f9a4 	bl	10604 <main>
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   152bc:	4a03      	ldr	r2, [pc, #12]	; (152cc <bg_thread_main+0x30>)
   152be:	7b13      	ldrb	r3, [r2, #12]
   152c0:	f023 0301 	bic.w	r3, r3, #1
   152c4:	7313      	strb	r3, [r2, #12]
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   152c6:	bd08      	pop	{r3, pc}
   152c8:	200010c3 	.word	0x200010c3
   152cc:	200002f0 	.word	0x200002f0

000152d0 <switch_to_main_thread>:
	return stack_ptr;
}

__boot_func
static FUNC_NORETURN void switch_to_main_thread(char *stack_ptr)
{
   152d0:	b508      	push	{r3, lr}
   152d2:	4601      	mov	r1, r0
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   152d4:	4a01      	ldr	r2, [pc, #4]	; (152dc <switch_to_main_thread+0xc>)
   152d6:	4802      	ldr	r0, [pc, #8]	; (152e0 <switch_to_main_thread+0x10>)
   152d8:	f7fc fc92 	bl	11c00 <arch_switch_to_main_thread>
	 * current fake thread is not on a wait queue or ready queue, so it
	 * will never be rescheduled in.
	 */
	z_swap_unlocked();
#endif
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   152dc:	0001529d 	.word	0x0001529d
   152e0:	200002f0 	.word	0x200002f0

000152e4 <z_bss_zero>:
{
   152e4:	b508      	push	{r3, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
   152e6:	4803      	ldr	r0, [pc, #12]	; (152f4 <z_bss_zero+0x10>)
   152e8:	4a03      	ldr	r2, [pc, #12]	; (152f8 <z_bss_zero+0x14>)
   152ea:	1a12      	subs	r2, r2, r0
   152ec:	2100      	movs	r1, #0
   152ee:	f003 fe57 	bl	18fa0 <z_early_memset>
}
   152f2:	bd08      	pop	{r3, pc}
   152f4:	20000220 	.word	0x20000220
   152f8:	200010c4 	.word	0x200010c4

000152fc <z_init_cpu>:
{
   152fc:	b510      	push	{r4, lr}
   152fe:	4604      	mov	r4, r0
	init_idle_thread(id);
   15300:	f7ff ff9e 	bl	15240 <init_idle_thread>
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
   15304:	490b      	ldr	r1, [pc, #44]	; (15334 <z_init_cpu+0x38>)
   15306:	23b0      	movs	r3, #176	; 0xb0
   15308:	fb03 1104 	mla	r1, r3, r4, r1
   1530c:	4a0a      	ldr	r2, [pc, #40]	; (15338 <z_init_cpu+0x3c>)
   1530e:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   15312:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   15316:	60d9      	str	r1, [r3, #12]
	_kernel.cpus[id].id = id;
   15318:	751c      	strb	r4, [r3, #20]
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
   1531a:	eb04 1144 	add.w	r1, r4, r4, lsl #5
   1531e:	4b07      	ldr	r3, [pc, #28]	; (1533c <z_init_cpu+0x40>)
   15320:	eb03 1381 	add.w	r3, r3, r1, lsl #6
   15324:	f503 6304 	add.w	r3, r3, #2112	; 0x840
	_kernel.cpus[id].irq_stack =
   15328:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   1532c:	eb02 04c4 	add.w	r4, r2, r4, lsl #3
   15330:	6063      	str	r3, [r4, #4]
}
   15332:	bd10      	pop	{r4, pc}
   15334:	20000240 	.word	0x20000240
   15338:	20000ea8 	.word	0x20000ea8
   1533c:	20001ac0 	.word	0x20001ac0

00015340 <prepare_multithreading>:
{
   15340:	b570      	push	{r4, r5, r6, lr}
   15342:	b086      	sub	sp, #24
	z_sched_init();
   15344:	f000 fdd8 	bl	15ef8 <z_sched_init>
	_kernel.ready_q.cache = &z_main_thread;
   15348:	4d10      	ldr	r5, [pc, #64]	; (1538c <prepare_multithreading+0x4c>)
   1534a:	4b11      	ldr	r3, [pc, #68]	; (15390 <prepare_multithreading+0x50>)
   1534c:	61dd      	str	r5, [r3, #28]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   1534e:	4b11      	ldr	r3, [pc, #68]	; (15394 <prepare_multithreading+0x54>)
   15350:	9305      	str	r3, [sp, #20]
   15352:	2301      	movs	r3, #1
   15354:	9304      	str	r3, [sp, #16]
   15356:	2400      	movs	r4, #0
   15358:	9403      	str	r4, [sp, #12]
   1535a:	9402      	str	r4, [sp, #8]
   1535c:	9401      	str	r4, [sp, #4]
   1535e:	9400      	str	r4, [sp, #0]
   15360:	4b0d      	ldr	r3, [pc, #52]	; (15398 <prepare_multithreading+0x58>)
   15362:	f44f 6200 	mov.w	r2, #2048	; 0x800
   15366:	490d      	ldr	r1, [pc, #52]	; (1539c <prepare_multithreading+0x5c>)
   15368:	4628      	mov	r0, r5
   1536a:	f000 f8d3 	bl	15514 <z_setup_new_thread>
   1536e:	4606      	mov	r6, r0
   15370:	7b6b      	ldrb	r3, [r5, #13]
   15372:	f023 0304 	bic.w	r3, r3, #4
   15376:	736b      	strb	r3, [r5, #13]
	z_ready_thread(&z_main_thread);
   15378:	4628      	mov	r0, r5
   1537a:	f003 fef5 	bl	19168 <z_ready_thread>
	z_init_cpu(0);
   1537e:	4620      	mov	r0, r4
   15380:	f7ff ffbc 	bl	152fc <z_init_cpu>
}
   15384:	4630      	mov	r0, r6
   15386:	b006      	add	sp, #24
   15388:	bd70      	pop	{r4, r5, r6, pc}
   1538a:	bf00      	nop
   1538c:	200002f0 	.word	0x200002f0
   15390:	20000ea8 	.word	0x20000ea8
   15394:	00019ec4 	.word	0x00019ec4
   15398:	0001529d 	.word	0x0001529d
   1539c:	20001100 	.word	0x20001100

000153a0 <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
   153a0:	b500      	push	{lr}
   153a2:	b0ad      	sub	sp, #180	; 0xb4
 * pointer) register, and switched to automatically when taking an exception.
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
   153a4:	4b1e      	ldr	r3, [pc, #120]	; (15420 <z_cstart+0x80>)
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   153a6:	f383 8808 	msr	MSP, r3
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
   153aa:	4c1e      	ldr	r4, [pc, #120]	; (15424 <z_cstart+0x84>)
   153ac:	6963      	ldr	r3, [r4, #20]
   153ae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   153b2:	6163      	str	r3, [r4, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   153b4:	23e0      	movs	r3, #224	; 0xe0
   153b6:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
   153ba:	2500      	movs	r5, #0
   153bc:	77e5      	strb	r5, [r4, #31]
   153be:	7625      	strb	r5, [r4, #24]
   153c0:	7665      	strb	r5, [r4, #25]
   153c2:	76a5      	strb	r5, [r4, #26]
   153c4:	f884 5020 	strb.w	r5, [r4, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   153c8:	6a63      	ldr	r3, [r4, #36]	; 0x24
   153ca:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   153ce:	6263      	str	r3, [r4, #36]	; 0x24
   153d0:	f884 5023 	strb.w	r5, [r4, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   153d4:	f7fc fd6e 	bl	11eb4 <z_arm_fault_init>
	z_arm_cpu_idle_init();
   153d8:	f7fc faec 	bl	119b4 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   153dc:	f04f 33ff 	mov.w	r3, #4294967295
   153e0:	62a3      	str	r3, [r4, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   153e2:	62e3      	str	r3, [r4, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
   153e4:	f7fc fe88 	bl	120f8 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
   153e8:	f7fc fe18 	bl	1201c <z_arm_configure_static_mpu_regions>
 *
 * The memory of the dummy thread can be completely uninitialized.
 */
static inline void z_dummy_thread_init(struct k_thread *dummy_thread)
{
	dummy_thread->base.thread_state = _THREAD_DUMMY;
   153ec:	2401      	movs	r4, #1
   153ee:	f88d 400d 	strb.w	r4, [sp, #13]
#ifdef CONFIG_SCHED_CPU_MASK
	dummy_thread->base.cpu_mask = -1;
#endif
	dummy_thread->base.user_options = K_ESSENTIAL;
   153f2:	f88d 400c 	strb.w	r4, [sp, #12]
#ifdef CONFIG_THREAD_STACK_INFO
	dummy_thread->stack_info.start = 0U;
   153f6:	9526      	str	r5, [sp, #152]	; 0x98
	dummy_thread->stack_info.size = 0U;
   153f8:	9527      	str	r5, [sp, #156]	; 0x9c
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif
#if (CONFIG_HEAP_MEM_POOL_SIZE > 0)
	k_thread_system_pool_assign(dummy_thread);
   153fa:	4668      	mov	r0, sp
   153fc:	f000 fffc 	bl	163f8 <k_thread_system_pool_assign>
#else
	dummy_thread->resource_pool = NULL;
#endif

	_current_cpu->current = dummy_thread;
   15400:	4b09      	ldr	r3, [pc, #36]	; (15428 <z_cstart+0x88>)
   15402:	f8c3 d008 	str.w	sp, [r3, #8]
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
   15406:	f7ff fee7 	bl	151d8 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   1540a:	4628      	mov	r0, r5
   1540c:	f7ff fef0 	bl	151f0 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   15410:	4620      	mov	r0, r4
   15412:	f7ff feed 	bl	151f0 <z_sys_init_run_level>
	timing_init();
	timing_start();
#endif

#ifdef CONFIG_MULTITHREADING
	switch_to_main_thread(prepare_multithreading());
   15416:	f7ff ff93 	bl	15340 <prepare_multithreading>
   1541a:	f7ff ff59 	bl	152d0 <switch_to_main_thread>
   1541e:	bf00      	nop
   15420:	20002300 	.word	0x20002300
   15424:	e000ed00 	.word	0xe000ed00
   15428:	20000ea8 	.word	0x20000ea8

0001542c <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return 0 on success, fails otherwise.
 */
static int init_mem_slab_module(const struct device *dev)
{
   1542c:	b510      	push	{r4, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   1542e:	4c06      	ldr	r4, [pc, #24]	; (15448 <init_mem_slab_module+0x1c>)
	int rc = 0;
   15430:	2000      	movs	r0, #0
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   15432:	e000      	b.n	15436 <init_mem_slab_module+0xa>
   15434:	341c      	adds	r4, #28
   15436:	4b05      	ldr	r3, [pc, #20]	; (1544c <init_mem_slab_module+0x20>)
   15438:	429c      	cmp	r4, r3
   1543a:	d204      	bcs.n	15446 <init_mem_slab_module+0x1a>
		rc = create_free_list(slab);
   1543c:	4620      	mov	r0, r4
   1543e:	f003 fdb7 	bl	18fb0 <create_free_list>
		if (rc < 0) {
   15442:	2800      	cmp	r0, #0
   15444:	daf6      	bge.n	15434 <init_mem_slab_module+0x8>
		z_object_init(slab);
	}

out:
	return rc;
}
   15446:	bd10      	pop	{r4, pc}
   15448:	200001b8 	.word	0x200001b8
   1544c:	200001b8 	.word	0x200001b8

00015450 <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
   15450:	b530      	push	{r4, r5, lr}
   15452:	b083      	sub	sp, #12
   15454:	460d      	mov	r5, r1
	__asm__ volatile(
   15456:	f04f 0420 	mov.w	r4, #32
   1545a:	f3ef 8111 	mrs	r1, BASEPRI
   1545e:	f384 8812 	msr	BASEPRI_MAX, r4
   15462:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
   15466:	6944      	ldr	r4, [r0, #20]
   15468:	b16c      	cbz	r4, 15486 <k_mem_slab_alloc+0x36>
		/* take a free block */
		*mem = slab->free_list;
   1546a:	602c      	str	r4, [r5, #0]
		slab->free_list = *(char **)(slab->free_list);
   1546c:	6943      	ldr	r3, [r0, #20]
   1546e:	681b      	ldr	r3, [r3, #0]
   15470:	6143      	str	r3, [r0, #20]
		slab->num_used++;
   15472:	6983      	ldr	r3, [r0, #24]
   15474:	3301      	adds	r3, #1
   15476:	6183      	str	r3, [r0, #24]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
   15478:	2000      	movs	r0, #0
	__asm__ volatile(
   1547a:	f381 8811 	msr	BASEPRI, r1
   1547e:	f3bf 8f6f 	isb	sy
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
}
   15482:	b003      	add	sp, #12
   15484:	bd30      	pop	{r4, r5, pc}
   15486:	f100 0c08 	add.w	ip, r0, #8
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
   1548a:	ea53 0402 	orrs.w	r4, r3, r2
   1548e:	d104      	bne.n	1549a <k_mem_slab_alloc+0x4a>
		*mem = NULL;
   15490:	2300      	movs	r3, #0
   15492:	602b      	str	r3, [r5, #0]
		result = -ENOMEM;
   15494:	f06f 000b 	mvn.w	r0, #11
   15498:	e7ef      	b.n	1547a <k_mem_slab_alloc+0x2a>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
   1549a:	9200      	str	r2, [sp, #0]
   1549c:	9301      	str	r3, [sp, #4]
   1549e:	4602      	mov	r2, r0
   154a0:	4660      	mov	r0, ip
   154a2:	f000 fbfd 	bl	15ca0 <z_pend_curr>
		if (result == 0) {
   154a6:	2800      	cmp	r0, #0
   154a8:	d1eb      	bne.n	15482 <k_mem_slab_alloc+0x32>
			*mem = _current->base.swap_data;
   154aa:	4b02      	ldr	r3, [pc, #8]	; (154b4 <k_mem_slab_alloc+0x64>)
   154ac:	689b      	ldr	r3, [r3, #8]
   154ae:	695b      	ldr	r3, [r3, #20]
   154b0:	602b      	str	r3, [r5, #0]
		return result;
   154b2:	e7e6      	b.n	15482 <k_mem_slab_alloc+0x32>
   154b4:	20000ea8 	.word	0x20000ea8

000154b8 <z_thread_monitor_exit>:
	__asm__ volatile(
   154b8:	f04f 0320 	mov.w	r3, #32
   154bc:	f3ef 8111 	mrs	r1, BASEPRI
   154c0:	f383 8812 	msr	BASEPRI_MAX, r3
   154c4:	f3bf 8f6f 	isb	sy
 */
void z_thread_monitor_exit(struct k_thread *thread)
{
	k_spinlock_key_t key = k_spin_lock(&z_thread_monitor_lock);

	if (thread == _kernel.threads) {
   154c8:	4b0a      	ldr	r3, [pc, #40]	; (154f4 <z_thread_monitor_exit+0x3c>)
   154ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   154cc:	4283      	cmp	r3, r0
   154ce:	d104      	bne.n	154da <z_thread_monitor_exit+0x22>
		_kernel.threads = _kernel.threads->next_thread;
   154d0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   154d2:	4b08      	ldr	r3, [pc, #32]	; (154f4 <z_thread_monitor_exit+0x3c>)
   154d4:	629a      	str	r2, [r3, #40]	; 0x28
   154d6:	e007      	b.n	154e8 <z_thread_monitor_exit+0x30>
		struct k_thread *prev_thread;

		prev_thread = _kernel.threads;
		while ((prev_thread != NULL) &&
			(thread != prev_thread->next_thread)) {
			prev_thread = prev_thread->next_thread;
   154d8:	4613      	mov	r3, r2
		while ((prev_thread != NULL) &&
   154da:	b113      	cbz	r3, 154e2 <z_thread_monitor_exit+0x2a>
			(thread != prev_thread->next_thread)) {
   154dc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
		while ((prev_thread != NULL) &&
   154de:	4282      	cmp	r2, r0
   154e0:	d1fa      	bne.n	154d8 <z_thread_monitor_exit+0x20>
		}
		if (prev_thread != NULL) {
   154e2:	b10b      	cbz	r3, 154e8 <z_thread_monitor_exit+0x30>
			prev_thread->next_thread = thread->next_thread;
   154e4:	6f02      	ldr	r2, [r0, #112]	; 0x70
   154e6:	671a      	str	r2, [r3, #112]	; 0x70
	__asm__ volatile(
   154e8:	f381 8811 	msr	BASEPRI, r1
   154ec:	f3bf 8f6f 	isb	sy
		}
	}

	k_spin_unlock(&z_thread_monitor_lock, key);
}
   154f0:	4770      	bx	lr
   154f2:	bf00      	nop
   154f4:	20000ea8 	.word	0x20000ea8

000154f8 <schedule_new_thread>:
#endif
#endif

#ifdef CONFIG_MULTITHREADING
static void schedule_new_thread(struct k_thread *thread, k_timeout_t delay)
{
   154f8:	b508      	push	{r3, lr}
#ifdef CONFIG_SYS_CLOCK_EXISTS
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   154fa:	ea53 0102 	orrs.w	r1, r3, r2
   154fe:	d102      	bne.n	15506 <schedule_new_thread+0xe>
	z_impl_k_thread_start(thread);
   15500:	f003 fdbf 	bl	19082 <z_impl_k_thread_start>
	}
#else
	ARG_UNUSED(delay);
	k_thread_start(thread);
#endif
}
   15504:	bd08      	pop	{r3, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   15506:	4902      	ldr	r1, [pc, #8]	; (15510 <schedule_new_thread+0x18>)
   15508:	3018      	adds	r0, #24
   1550a:	f000 fe5d 	bl	161c8 <z_add_timeout>
   1550e:	e7f9      	b.n	15504 <schedule_new_thread+0xc>
   15510:	000191a1 	.word	0x000191a1

00015514 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
   15514:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15518:	b085      	sub	sp, #20
   1551a:	4604      	mov	r4, r0
   1551c:	460f      	mov	r7, r1
   1551e:	4615      	mov	r5, r2
   15520:	461e      	mov	r6, r3
   15522:	f8dd a038 	ldr.w	sl, [sp, #56]	; 0x38
   15526:	f8dd 903c 	ldr.w	r9, [sp, #60]	; 0x3c
   1552a:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
   1552e:	f8dd b04c 	ldr.w	fp, [sp, #76]	; 0x4c
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
   15532:	f100 0358 	add.w	r3, r0, #88	; 0x58
 * @param list the doubly-linked list
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
   15536:	6583      	str	r3, [r0, #88]	; 0x58
	list->tail = (sys_dnode_t *)list;
   15538:	65c3      	str	r3, [r0, #92]	; 0x5c
	k_object_access_grant(new_thread, new_thread);
#endif
	z_waitq_init(&new_thread->join_queue);

	/* Initialize various struct k_thread members */
	z_init_thread_base(&new_thread->base, prio, _THREAD_PRESTART, options);
   1553a:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1553c:	2204      	movs	r2, #4
   1553e:	9911      	ldr	r1, [sp, #68]	; 0x44
   15540:	f003 fda3 	bl	1908a <z_init_thread_base>
	stack_ptr = setup_thread_stack(new_thread, stack, stack_size);
   15544:	462a      	mov	r2, r5
   15546:	4639      	mov	r1, r7
   15548:	4620      	mov	r0, r4
   1554a:	f003 fd82 	bl	19052 <setup_thread_stack>
   1554e:	4605      	mov	r5, r0
	 */
	__ASSERT_NO_MSG(arch_mem_coherent(new_thread));
	__ASSERT_NO_MSG(!arch_mem_coherent(stack));
#endif

	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   15550:	f8cd 8008 	str.w	r8, [sp, #8]
   15554:	f8cd 9004 	str.w	r9, [sp, #4]
   15558:	f8cd a000 	str.w	sl, [sp]
   1555c:	4633      	mov	r3, r6
   1555e:	4602      	mov	r2, r0
   15560:	4639      	mov	r1, r7
   15562:	4620      	mov	r0, r4
   15564:	f7fc fb02 	bl	11b6c <arch_new_thread>

	/* static threads overwrite it afterwards with real value */
	new_thread->init_data = NULL;
   15568:	2300      	movs	r3, #0
   1556a:	6563      	str	r3, [r4, #84]	; 0x54
#ifdef CONFIG_THREAD_CUSTOM_DATA
	/* Initialize custom data field (value is opaque to kernel) */
	new_thread->custom_data = NULL;
#endif
#ifdef CONFIG_THREAD_MONITOR
	new_thread->entry.pEntry = entry;
   1556c:	6626      	str	r6, [r4, #96]	; 0x60
	new_thread->entry.parameter1 = p1;
   1556e:	f8c4 a064 	str.w	sl, [r4, #100]	; 0x64
	new_thread->entry.parameter2 = p2;
   15572:	f8c4 9068 	str.w	r9, [r4, #104]	; 0x68
	new_thread->entry.parameter3 = p3;
   15576:	f8c4 806c 	str.w	r8, [r4, #108]	; 0x6c
	__asm__ volatile(
   1557a:	f04f 0320 	mov.w	r3, #32
   1557e:	f3ef 8211 	mrs	r2, BASEPRI
   15582:	f383 8812 	msr	BASEPRI_MAX, r3
   15586:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&z_thread_monitor_lock);

	new_thread->next_thread = _kernel.threads;
   1558a:	4b13      	ldr	r3, [pc, #76]	; (155d8 <z_setup_new_thread+0xc4>)
   1558c:	6a99      	ldr	r1, [r3, #40]	; 0x28
   1558e:	6721      	str	r1, [r4, #112]	; 0x70
	_kernel.threads = new_thread;
   15590:	629c      	str	r4, [r3, #40]	; 0x28
	__asm__ volatile(
   15592:	f382 8811 	msr	BASEPRI, r2
   15596:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&z_thread_monitor_lock, key);
#endif
#ifdef CONFIG_THREAD_NAME
	if (name != NULL) {
   1559a:	f1bb 0f00 	cmp.w	fp, #0
   1559e:	d013      	beq.n	155c8 <z_setup_new_thread+0xb4>
		strncpy(new_thread->name, name,
   155a0:	221f      	movs	r2, #31
   155a2:	4659      	mov	r1, fp
   155a4:	f104 0074 	add.w	r0, r4, #116	; 0x74
   155a8:	f002 fac9 	bl	17b3e <strncpy>
			CONFIG_THREAD_MAX_NAME_LEN - 1);
		/* Ensure NULL termination, truncate if longer */
		new_thread->name[CONFIG_THREAD_MAX_NAME_LEN - 1] = '\0';
   155ac:	2300      	movs	r3, #0
   155ae:	f884 3093 	strb.w	r3, [r4, #147]	; 0x93
		new_thread->base.cpu_mask = -1; /* allow all cpus */
	}
#endif
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	/* _current may be null if the dummy thread is not used */
	if (!_current) {
   155b2:	4b09      	ldr	r3, [pc, #36]	; (155d8 <z_setup_new_thread+0xc4>)
   155b4:	689b      	ldr	r3, [r3, #8]
   155b6:	b15b      	cbz	r3, 155d0 <z_setup_new_thread+0xbc>
	}
#endif
#ifdef CONFIG_SCHED_DEADLINE
	new_thread->base.prio_deadline = 0;
#endif
	new_thread->resource_pool = _current->resource_pool;
   155b8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
   155bc:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
#endif

	SYS_PORT_TRACING_OBJ_FUNC(k_thread, create, new_thread);

	return stack_ptr;
}
   155c0:	4628      	mov	r0, r5
   155c2:	b005      	add	sp, #20
   155c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		new_thread->name[0] = '\0';
   155c8:	2300      	movs	r3, #0
   155ca:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
   155ce:	e7f0      	b.n	155b2 <z_setup_new_thread+0x9e>
		new_thread->resource_pool = NULL;
   155d0:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
		return stack_ptr;
   155d4:	e7f4      	b.n	155c0 <z_setup_new_thread+0xac>
   155d6:	bf00      	nop
   155d8:	20000ea8 	.word	0x20000ea8

000155dc <z_init_static_threads>:
	}
}
#endif /* CONFIG_USERSPACE */

void z_init_static_threads(void)
{
   155dc:	b530      	push	{r4, r5, lr}
   155de:	b087      	sub	sp, #28
	_FOREACH_STATIC_THREAD(thread_data) {
   155e0:	4c21      	ldr	r4, [pc, #132]	; (15668 <z_init_static_threads+0x8c>)
   155e2:	e014      	b.n	1560e <z_init_static_threads+0x32>
		z_setup_new_thread(
   155e4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   155e6:	9305      	str	r3, [sp, #20]
   155e8:	6a23      	ldr	r3, [r4, #32]
   155ea:	9304      	str	r3, [sp, #16]
   155ec:	69e3      	ldr	r3, [r4, #28]
   155ee:	9303      	str	r3, [sp, #12]
   155f0:	69a3      	ldr	r3, [r4, #24]
   155f2:	9302      	str	r3, [sp, #8]
   155f4:	6963      	ldr	r3, [r4, #20]
   155f6:	9301      	str	r3, [sp, #4]
   155f8:	6923      	ldr	r3, [r4, #16]
   155fa:	9300      	str	r3, [sp, #0]
   155fc:	68e3      	ldr	r3, [r4, #12]
   155fe:	68a2      	ldr	r2, [r4, #8]
   15600:	6861      	ldr	r1, [r4, #4]
   15602:	6820      	ldr	r0, [r4, #0]
   15604:	f7ff ff86 	bl	15514 <z_setup_new_thread>
			thread_data->init_p3,
			thread_data->init_prio,
			thread_data->init_options,
			thread_data->init_name);

		thread_data->init_thread->init_data = thread_data;
   15608:	6823      	ldr	r3, [r4, #0]
   1560a:	655c      	str	r4, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
   1560c:	3430      	adds	r4, #48	; 0x30
   1560e:	4b17      	ldr	r3, [pc, #92]	; (1566c <z_init_static_threads+0x90>)
   15610:	429c      	cmp	r4, r3
   15612:	d3e7      	bcc.n	155e4 <z_init_static_threads+0x8>
	 * until they are all started.
	 *
	 * Note that static threads defined using the legacy API have a
	 * delay of K_FOREVER.
	 */
	k_sched_lock();
   15614:	f000 f9d8 	bl	159c8 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
   15618:	4c13      	ldr	r4, [pc, #76]	; (15668 <z_init_static_threads+0x8c>)
   1561a:	e000      	b.n	1561e <z_init_static_threads+0x42>
   1561c:	3430      	adds	r4, #48	; 0x30
   1561e:	4b13      	ldr	r3, [pc, #76]	; (1566c <z_init_static_threads+0x90>)
   15620:	429c      	cmp	r4, r3
   15622:	d21c      	bcs.n	1565e <z_init_static_threads+0x82>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
   15624:	6a60      	ldr	r0, [r4, #36]	; 0x24
   15626:	f1b0 3fff 	cmp.w	r0, #4294967295
   1562a:	d0f7      	beq.n	1561c <z_init_static_threads+0x40>
			schedule_new_thread(thread_data->init_thread,
   1562c:	6825      	ldr	r5, [r4, #0]
					    K_MSEC(thread_data->init_delay));
   1562e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   15632:	17c1      	asrs	r1, r0, #31
			/* Faster algorithm but source is first multiplied by target frequency
			 * and it can overflow even though final result would not overflow.
			 * Kconfig option shall prevent use of this algorithm when there is a
			 * risk of overflow.
			 */
			return ((t * to_hz + off) / from_hz);
   15634:	03c9      	lsls	r1, r1, #15
   15636:	ea41 4150 	orr.w	r1, r1, r0, lsr #17
   1563a:	03c0      	lsls	r0, r0, #15
   1563c:	f240 33e7 	movw	r3, #999	; 0x3e7
   15640:	18c0      	adds	r0, r0, r3
   15642:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   15646:	f04f 0300 	mov.w	r3, #0
   1564a:	f141 0100 	adc.w	r1, r1, #0
   1564e:	f7fa fe57 	bl	10300 <__aeabi_uldivmod>
   15652:	4602      	mov	r2, r0
   15654:	460b      	mov	r3, r1
			schedule_new_thread(thread_data->init_thread,
   15656:	4628      	mov	r0, r5
   15658:	f7ff ff4e 	bl	154f8 <schedule_new_thread>
   1565c:	e7de      	b.n	1561c <z_init_static_threads+0x40>
		}
	}
	k_sched_unlock();
   1565e:	f000 fbd5 	bl	15e0c <k_sched_unlock>
}
   15662:	b007      	add	sp, #28
   15664:	bd30      	pop	{r4, r5, pc}
   15666:	bf00      	nop
   15668:	200001b8 	.word	0x200001b8
   1566c:	200001b8 	.word	0x200001b8

00015670 <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
   15670:	b508      	push	{r3, lr}
   15672:	e001      	b.n	15678 <idle+0x8>
	arch_cpu_idle();
   15674:	f7fc f9a4 	bl	119c0 <arch_cpu_idle>
	__asm__ volatile(
   15678:	f04f 0220 	mov.w	r2, #32
   1567c:	f3ef 8311 	mrs	r3, BASEPRI
   15680:	f382 8812 	msr	BASEPRI_MAX, r2
   15684:	f3bf 8f6f 	isb	sy
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
   15688:	f003 fe72 	bl	19370 <z_get_next_timeout_expiry>
   1568c:	4b05      	ldr	r3, [pc, #20]	; (156a4 <idle+0x34>)
   1568e:	6198      	str	r0, [r3, #24]
	return !z_sys_post_kernel;
   15690:	4b05      	ldr	r3, [pc, #20]	; (156a8 <idle+0x38>)
   15692:	781b      	ldrb	r3, [r3, #0]
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
   15694:	2b00      	cmp	r3, #0
   15696:	d0ed      	beq.n	15674 <idle+0x4>
   15698:	f7fb ffb8 	bl	1160c <pm_system_suspend>
   1569c:	2800      	cmp	r0, #0
   1569e:	d1eb      	bne.n	15678 <idle+0x8>
   156a0:	e7e8      	b.n	15674 <idle+0x4>
   156a2:	bf00      	nop
   156a4:	20000ea8 	.word	0x20000ea8
   156a8:	200010c3 	.word	0x200010c3

000156ac <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
   156ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   156b0:	b083      	sub	sp, #12
   156b2:	4604      	mov	r4, r0
   156b4:	461d      	mov	r5, r3
   156b6:	f04f 0320 	mov.w	r3, #32
   156ba:	f3ef 8711 	mrs	r7, BASEPRI
   156be:	f383 8812 	msr	BASEPRI_MAX, r3
   156c2:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   156c6:	68c1      	ldr	r1, [r0, #12]
   156c8:	b999      	cbnz	r1, 156f2 <z_impl_k_mutex_lock+0x46>

		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
					_current->base.prio :
   156ca:	2900      	cmp	r1, #0
   156cc:	d14f      	bne.n	1576e <z_impl_k_mutex_lock+0xc2>
   156ce:	4b3a      	ldr	r3, [pc, #232]	; (157b8 <z_impl_k_mutex_lock+0x10c>)
   156d0:	689b      	ldr	r3, [r3, #8]
   156d2:	f993 300e 	ldrsb.w	r3, [r3, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
   156d6:	6123      	str	r3, [r4, #16]
					mutex->owner_orig_prio;

		mutex->lock_count++;
   156d8:	3101      	adds	r1, #1
   156da:	60e1      	str	r1, [r4, #12]
		mutex->owner = _current;
   156dc:	4b36      	ldr	r3, [pc, #216]	; (157b8 <z_impl_k_mutex_lock+0x10c>)
   156de:	689b      	ldr	r3, [r3, #8]
   156e0:	60a3      	str	r3, [r4, #8]
	__asm__ volatile(
   156e2:	f387 8811 	msr	BASEPRI, r7
   156e6:	f3bf 8f6f 	isb	sy

		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
   156ea:	2000      	movs	r0, #0
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
   156ec:	b003      	add	sp, #12
   156ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   156f2:	4616      	mov	r6, r2
	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   156f4:	6882      	ldr	r2, [r0, #8]
   156f6:	4b30      	ldr	r3, [pc, #192]	; (157b8 <z_impl_k_mutex_lock+0x10c>)
   156f8:	689b      	ldr	r3, [r3, #8]
   156fa:	429a      	cmp	r2, r3
   156fc:	d0e5      	beq.n	156ca <z_impl_k_mutex_lock+0x1e>
	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
   156fe:	ea55 0106 	orrs.w	r1, r5, r6
   15702:	bf0c      	ite	eq
   15704:	f04f 0801 	moveq.w	r8, #1
   15708:	f04f 0800 	movne.w	r8, #0
   1570c:	d031      	beq.n	15772 <z_impl_k_mutex_lock+0xc6>
					    mutex->owner->base.prio);
   1570e:	f992 900e 	ldrsb.w	r9, [r2, #14]
	new_prio = new_prio_for_inheritance(_current->base.prio,
   15712:	4649      	mov	r1, r9
   15714:	f993 000e 	ldrsb.w	r0, [r3, #14]
   15718:	f003 fcc8 	bl	190ac <new_prio_for_inheritance>
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   1571c:	4581      	cmp	r9, r0
   1571e:	dc2f      	bgt.n	15780 <z_impl_k_mutex_lock+0xd4>
	bool resched = false;
   15720:	f04f 0900 	mov.w	r9, #0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
   15724:	9600      	str	r6, [sp, #0]
   15726:	9501      	str	r5, [sp, #4]
   15728:	4622      	mov	r2, r4
   1572a:	4639      	mov	r1, r7
   1572c:	4823      	ldr	r0, [pc, #140]	; (157bc <z_impl_k_mutex_lock+0x110>)
   1572e:	f000 fab7 	bl	15ca0 <z_pend_curr>
	if (got_mutex == 0) {
   15732:	2800      	cmp	r0, #0
   15734:	d0da      	beq.n	156ec <z_impl_k_mutex_lock+0x40>
	__asm__ volatile(
   15736:	f04f 0320 	mov.w	r3, #32
   1573a:	f3ef 8511 	mrs	r5, BASEPRI
   1573e:	f383 8812 	msr	BASEPRI_MAX, r3
   15742:	f3bf 8f6f 	isb	sy
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   15746:	6823      	ldr	r3, [r4, #0]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   15748:	429c      	cmp	r4, r3
   1574a:	d01f      	beq.n	1578c <z_impl_k_mutex_lock+0xe0>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   1574c:	b1f3      	cbz	r3, 1578c <z_impl_k_mutex_lock+0xe0>
   1574e:	6921      	ldr	r1, [r4, #16]
   15750:	f993 000e 	ldrsb.w	r0, [r3, #14]
   15754:	f003 fcaa 	bl	190ac <new_prio_for_inheritance>
   15758:	4601      	mov	r1, r0
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   1575a:	4620      	mov	r0, r4
   1575c:	f003 fcb1 	bl	190c2 <adjust_owner_prio>
   15760:	b9b0      	cbnz	r0, 15790 <z_impl_k_mutex_lock+0xe4>
   15762:	f1b9 0f00 	cmp.w	r9, #0
   15766:	d015      	beq.n	15794 <z_impl_k_mutex_lock+0xe8>
   15768:	f04f 0801 	mov.w	r8, #1
   1576c:	e012      	b.n	15794 <z_impl_k_mutex_lock+0xe8>
					_current->base.prio :
   1576e:	6923      	ldr	r3, [r4, #16]
   15770:	e7b1      	b.n	156d6 <z_impl_k_mutex_lock+0x2a>
	__asm__ volatile(
   15772:	f387 8811 	msr	BASEPRI, r7
   15776:	f3bf 8f6f 	isb	sy
		return -EBUSY;
   1577a:	f06f 000f 	mvn.w	r0, #15
   1577e:	e7b5      	b.n	156ec <z_impl_k_mutex_lock+0x40>
		resched = adjust_owner_prio(mutex, new_prio);
   15780:	4601      	mov	r1, r0
   15782:	4620      	mov	r0, r4
   15784:	f003 fc9d 	bl	190c2 <adjust_owner_prio>
   15788:	4681      	mov	r9, r0
   1578a:	e7cb      	b.n	15724 <z_impl_k_mutex_lock+0x78>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   1578c:	6921      	ldr	r1, [r4, #16]
   1578e:	e7e4      	b.n	1575a <z_impl_k_mutex_lock+0xae>
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   15790:	f04f 0801 	mov.w	r8, #1
	if (resched) {
   15794:	f1b8 0f00 	cmp.w	r8, #0
   15798:	d106      	bne.n	157a8 <z_impl_k_mutex_lock+0xfc>
   1579a:	f385 8811 	msr	BASEPRI, r5
   1579e:	f3bf 8f6f 	isb	sy
	return -EAGAIN;
   157a2:	f06f 000a 	mvn.w	r0, #10
   157a6:	e7a1      	b.n	156ec <z_impl_k_mutex_lock+0x40>
		z_reschedule(&lock, key);
   157a8:	4629      	mov	r1, r5
   157aa:	4804      	ldr	r0, [pc, #16]	; (157bc <z_impl_k_mutex_lock+0x110>)
   157ac:	f000 f8f0 	bl	15990 <z_reschedule>
	return -EAGAIN;
   157b0:	f06f 000a 	mvn.w	r0, #10
   157b4:	e79a      	b.n	156ec <z_impl_k_mutex_lock+0x40>
   157b6:	bf00      	nop
   157b8:	20000ea8 	.word	0x20000ea8
   157bc:	20000ed4 	.word	0x20000ed4

000157c0 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
   157c0:	b538      	push	{r3, r4, r5, lr}

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
   157c2:	6883      	ldr	r3, [r0, #8]
   157c4:	b383      	cbz	r3, 15828 <z_impl_k_mutex_unlock+0x68>
   157c6:	4604      	mov	r4, r0
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
   157c8:	4a1a      	ldr	r2, [pc, #104]	; (15834 <z_impl_k_mutex_unlock+0x74>)
   157ca:	6892      	ldr	r2, [r2, #8]
   157cc:	4293      	cmp	r3, r2
   157ce:	d12e      	bne.n	1582e <z_impl_k_mutex_unlock+0x6e>

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
   157d0:	68c3      	ldr	r3, [r0, #12]
   157d2:	2b01      	cmp	r3, #1
   157d4:	d903      	bls.n	157de <z_impl_k_mutex_unlock+0x1e>
		mutex->lock_count--;
   157d6:	3b01      	subs	r3, #1
   157d8:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	return 0;
   157da:	2000      	movs	r0, #0
}
   157dc:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
   157de:	f04f 0320 	mov.w	r3, #32
   157e2:	f3ef 8511 	mrs	r5, BASEPRI
   157e6:	f383 8812 	msr	BASEPRI_MAX, r3
   157ea:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   157ee:	6901      	ldr	r1, [r0, #16]
   157f0:	f003 fc67 	bl	190c2 <adjust_owner_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
   157f4:	4620      	mov	r0, r4
   157f6:	f003 fd57 	bl	192a8 <z_unpend_first_thread>
	mutex->owner = new_owner;
   157fa:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
   157fc:	b168      	cbz	r0, 1581a <z_impl_k_mutex_unlock+0x5a>
		mutex->owner_orig_prio = new_owner->base.prio;
   157fe:	f990 300e 	ldrsb.w	r3, [r0, #14]
   15802:	6123      	str	r3, [r4, #16]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   15804:	2400      	movs	r4, #0
   15806:	f8c0 40ac 	str.w	r4, [r0, #172]	; 0xac
		z_ready_thread(new_owner);
   1580a:	f003 fcad 	bl	19168 <z_ready_thread>
		z_reschedule(&lock, key);
   1580e:	4629      	mov	r1, r5
   15810:	4809      	ldr	r0, [pc, #36]	; (15838 <z_impl_k_mutex_unlock+0x78>)
   15812:	f000 f8bd 	bl	15990 <z_reschedule>
	return 0;
   15816:	4620      	mov	r0, r4
   15818:	e7e0      	b.n	157dc <z_impl_k_mutex_unlock+0x1c>
		mutex->lock_count = 0U;
   1581a:	2000      	movs	r0, #0
   1581c:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
   1581e:	f385 8811 	msr	BASEPRI, r5
   15822:	f3bf 8f6f 	isb	sy
   15826:	e7d9      	b.n	157dc <z_impl_k_mutex_unlock+0x1c>
		return -EINVAL;
   15828:	f06f 0015 	mvn.w	r0, #21
   1582c:	e7d6      	b.n	157dc <z_impl_k_mutex_unlock+0x1c>
		return -EPERM;
   1582e:	f04f 30ff 	mov.w	r0, #4294967295
   15832:	e7d3      	b.n	157dc <z_impl_k_mutex_unlock+0x1c>
   15834:	20000ea8 	.word	0x20000ea8
   15838:	20000ed4 	.word	0x20000ed4

0001583c <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   1583c:	b538      	push	{r3, r4, r5, lr}
   1583e:	4604      	mov	r4, r0
	__asm__ volatile(
   15840:	f04f 0320 	mov.w	r3, #32
   15844:	f3ef 8511 	mrs	r5, BASEPRI
   15848:	f383 8812 	msr	BASEPRI_MAX, r3
   1584c:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
   15850:	f003 fd2a 	bl	192a8 <z_unpend_first_thread>

	if (thread != NULL) {
   15854:	b148      	cbz	r0, 1586a <z_impl_k_sem_give+0x2e>
   15856:	2200      	movs	r2, #0
   15858:	f8c0 20ac 	str.w	r2, [r0, #172]	; 0xac
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
   1585c:	f003 fc84 	bl	19168 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
   15860:	4629      	mov	r1, r5
   15862:	4807      	ldr	r0, [pc, #28]	; (15880 <z_impl_k_sem_give+0x44>)
   15864:	f000 f894 	bl	15990 <z_reschedule>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
   15868:	bd38      	pop	{r3, r4, r5, pc}
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   1586a:	68a3      	ldr	r3, [r4, #8]
   1586c:	68e2      	ldr	r2, [r4, #12]
   1586e:	4293      	cmp	r3, r2
   15870:	d003      	beq.n	1587a <z_impl_k_sem_give+0x3e>
   15872:	2201      	movs	r2, #1
   15874:	4413      	add	r3, r2
   15876:	60a3      	str	r3, [r4, #8]
}
   15878:	e7f2      	b.n	15860 <z_impl_k_sem_give+0x24>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   1587a:	2200      	movs	r2, #0
   1587c:	e7fa      	b.n	15874 <z_impl_k_sem_give+0x38>
   1587e:	bf00      	nop
   15880:	20000ed4 	.word	0x20000ed4

00015884 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
   15884:	b510      	push	{r4, lr}
   15886:	b082      	sub	sp, #8
   15888:	f04f 0420 	mov.w	r4, #32
   1588c:	f3ef 8111 	mrs	r1, BASEPRI
   15890:	f384 8812 	msr	BASEPRI_MAX, r4
   15894:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
   15898:	6884      	ldr	r4, [r0, #8]
   1589a:	b144      	cbz	r4, 158ae <z_impl_k_sem_take+0x2a>
		sem->count--;
   1589c:	3c01      	subs	r4, #1
   1589e:	6084      	str	r4, [r0, #8]
	__asm__ volatile(
   158a0:	f381 8811 	msr	BASEPRI, r1
   158a4:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
   158a8:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
   158aa:	b002      	add	sp, #8
   158ac:	bd10      	pop	{r4, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   158ae:	ea53 0402 	orrs.w	r4, r3, r2
   158b2:	d006      	beq.n	158c2 <z_impl_k_sem_take+0x3e>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   158b4:	9200      	str	r2, [sp, #0]
   158b6:	9301      	str	r3, [sp, #4]
   158b8:	4602      	mov	r2, r0
   158ba:	4805      	ldr	r0, [pc, #20]	; (158d0 <z_impl_k_sem_take+0x4c>)
   158bc:	f000 f9f0 	bl	15ca0 <z_pend_curr>
	return ret;
   158c0:	e7f3      	b.n	158aa <z_impl_k_sem_take+0x26>
   158c2:	f381 8811 	msr	BASEPRI, r1
   158c6:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
   158ca:	f06f 000f 	mvn.w	r0, #15
   158ce:	e7ec      	b.n	158aa <z_impl_k_sem_take+0x26>
   158d0:	20000ed4 	.word	0x20000ed4

000158d4 <add_thread_timeout>:
	}
}

static void add_thread_timeout(struct k_thread *thread, k_timeout_t timeout)
{
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   158d4:	f1b3 3fff 	cmp.w	r3, #4294967295
   158d8:	bf08      	it	eq
   158da:	f1b2 3fff 	cmpeq.w	r2, #4294967295
   158de:	d100      	bne.n	158e2 <add_thread_timeout+0xe>
   158e0:	4770      	bx	lr
{
   158e2:	b508      	push	{r3, lr}
   158e4:	4902      	ldr	r1, [pc, #8]	; (158f0 <add_thread_timeout+0x1c>)
   158e6:	3018      	adds	r0, #24
   158e8:	f000 fc6e 	bl	161c8 <z_add_timeout>
		z_add_thread_timeout(thread, timeout);
	}
}
   158ec:	bd08      	pop	{r3, pc}
   158ee:	bf00      	nop
   158f0:	000191a1 	.word	0x000191a1

000158f4 <z_reset_time_slice>:
{
   158f4:	b510      	push	{r4, lr}
	int ret = slice_ticks;
   158f6:	4b07      	ldr	r3, [pc, #28]	; (15914 <z_reset_time_slice+0x20>)
   158f8:	681c      	ldr	r4, [r3, #0]
	if (slice_time(curr) != 0) {
   158fa:	b904      	cbnz	r4, 158fe <z_reset_time_slice+0xa>
}
   158fc:	bd10      	pop	{r4, pc}
		_current_cpu->slice_ticks = slice_time(curr) + sys_clock_elapsed();
   158fe:	f7fd ff11 	bl	13724 <sys_clock_elapsed>
   15902:	4404      	add	r4, r0
   15904:	4b04      	ldr	r3, [pc, #16]	; (15918 <z_reset_time_slice+0x24>)
   15906:	611c      	str	r4, [r3, #16]
		z_set_timeout_expiry(slice_time(curr), false);
   15908:	2100      	movs	r1, #0
   1590a:	4b02      	ldr	r3, [pc, #8]	; (15914 <z_reset_time_slice+0x20>)
   1590c:	6818      	ldr	r0, [r3, #0]
   1590e:	f003 fd46 	bl	1939e <z_set_timeout_expiry>
}
   15912:	e7f3      	b.n	158fc <z_reset_time_slice+0x8>
   15914:	20000edc 	.word	0x20000edc
   15918:	20000ea8 	.word	0x20000ea8

0001591c <k_sched_time_slice_set>:
{
   1591c:	b570      	push	{r4, r5, r6, lr}
   1591e:	4604      	mov	r4, r0
   15920:	460d      	mov	r5, r1
	LOCKED(&sched_spinlock) {
   15922:	2300      	movs	r3, #0
	__asm__ volatile(
   15924:	f04f 0220 	mov.w	r2, #32
   15928:	f3ef 8611 	mrs	r6, BASEPRI
   1592c:	f382 8812 	msr	BASEPRI_MAX, r2
   15930:	f3bf 8f6f 	isb	sy
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
   15934:	e00e      	b.n	15954 <k_sched_time_slice_set+0x38>
			slice_ticks = MAX(2, slice_ticks);
   15936:	2802      	cmp	r0, #2
   15938:	bfb8      	it	lt
   1593a:	2002      	movlt	r0, #2
   1593c:	6018      	str	r0, [r3, #0]
		slice_max_prio = prio;
   1593e:	4b11      	ldr	r3, [pc, #68]	; (15984 <k_sched_time_slice_set+0x68>)
   15940:	601d      	str	r5, [r3, #0]
		z_reset_time_slice(_current);
   15942:	4b11      	ldr	r3, [pc, #68]	; (15988 <k_sched_time_slice_set+0x6c>)
   15944:	6898      	ldr	r0, [r3, #8]
   15946:	f7ff ffd5 	bl	158f4 <z_reset_time_slice>
	__asm__ volatile(
   1594a:	f386 8811 	msr	BASEPRI, r6
   1594e:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   15952:	2301      	movs	r3, #1
   15954:	b9a3      	cbnz	r3, 15980 <k_sched_time_slice_set+0x64>
		_current_cpu->slice_ticks = 0;
   15956:	4b0c      	ldr	r3, [pc, #48]	; (15988 <k_sched_time_slice_set+0x6c>)
   15958:	2200      	movs	r2, #0
   1595a:	611a      	str	r2, [r3, #16]
			return (uint32_t)((t * to_hz + off) / from_hz);
   1595c:	0c61      	lsrs	r1, r4, #17
   1595e:	03e3      	lsls	r3, r4, #15
   15960:	f240 30e7 	movw	r0, #999	; 0x3e7
   15964:	1818      	adds	r0, r3, r0
   15966:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1596a:	f04f 0300 	mov.w	r3, #0
   1596e:	f141 0100 	adc.w	r1, r1, #0
   15972:	f7fa fcc5 	bl	10300 <__aeabi_uldivmod>
		slice_ticks = k_ms_to_ticks_ceil32(slice);
   15976:	4b05      	ldr	r3, [pc, #20]	; (1598c <k_sched_time_slice_set+0x70>)
   15978:	6018      	str	r0, [r3, #0]
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
   1597a:	2c00      	cmp	r4, #0
   1597c:	dcdb      	bgt.n	15936 <k_sched_time_slice_set+0x1a>
   1597e:	e7de      	b.n	1593e <k_sched_time_slice_set+0x22>
}
   15980:	bd70      	pop	{r4, r5, r6, pc}
   15982:	bf00      	nop
   15984:	20000ed8 	.word	0x20000ed8
   15988:	20000ea8 	.word	0x20000ea8
   1598c:	20000edc 	.word	0x20000edc

00015990 <z_reschedule>:
	return new_thread != _current;
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
   15990:	b508      	push	{r3, lr}
	if (resched(key.key) && need_swap()) {
   15992:	4608      	mov	r0, r1
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   15994:	b921      	cbnz	r1, 159a0 <z_reschedule+0x10>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   15996:	f3ef 8305 	mrs	r3, IPSR
   1599a:	b913      	cbnz	r3, 159a2 <z_reschedule+0x12>
   1599c:	2101      	movs	r1, #1
   1599e:	e000      	b.n	159a2 <z_reschedule+0x12>
   159a0:	2100      	movs	r1, #0
	if (resched(key.key) && need_swap()) {
   159a2:	f011 0f01 	tst.w	r1, #1
   159a6:	d007      	beq.n	159b8 <z_reschedule+0x28>
	new_thread = _kernel.ready_q.cache;
   159a8:	4b06      	ldr	r3, [pc, #24]	; (159c4 <z_reschedule+0x34>)
   159aa:	69da      	ldr	r2, [r3, #28]
	return new_thread != _current;
   159ac:	689b      	ldr	r3, [r3, #8]
	if (resched(key.key) && need_swap()) {
   159ae:	429a      	cmp	r2, r3
   159b0:	d002      	beq.n	159b8 <z_reschedule+0x28>
	ret = arch_swap(key);
   159b2:	f7fc f883 	bl	11abc <arch_swap>
		z_swap(lock, key);
   159b6:	e003      	b.n	159c0 <z_reschedule+0x30>
   159b8:	f380 8811 	msr	BASEPRI, r0
   159bc:	f3bf 8f6f 	isb	sy
	} else {
		k_spin_unlock(lock, key);
		signal_pending_ipi();
	}
}
   159c0:	bd08      	pop	{r3, pc}
   159c2:	bf00      	nop
   159c4:	20000ea8 	.word	0x20000ea8

000159c8 <k_sched_lock>:
	}
}

void k_sched_lock(void)
{
	LOCKED(&sched_spinlock) {
   159c8:	2300      	movs	r3, #0
	__asm__ volatile(
   159ca:	f04f 0220 	mov.w	r2, #32
   159ce:	f3ef 8111 	mrs	r1, BASEPRI
   159d2:	f382 8812 	msr	BASEPRI_MAX, r2
   159d6:	f3bf 8f6f 	isb	sy
   159da:	e009      	b.n	159f0 <k_sched_lock+0x28>
static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1U, "");

	--_current->base.sched_locked;
   159dc:	4b06      	ldr	r3, [pc, #24]	; (159f8 <k_sched_lock+0x30>)
   159de:	689a      	ldr	r2, [r3, #8]
   159e0:	7bd3      	ldrb	r3, [r2, #15]
   159e2:	3b01      	subs	r3, #1
   159e4:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
   159e6:	f381 8811 	msr	BASEPRI, r1
   159ea:	f3bf 8f6f 	isb	sy
   159ee:	2301      	movs	r3, #1
   159f0:	2b00      	cmp	r3, #0
   159f2:	d0f3      	beq.n	159dc <k_sched_lock+0x14>
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
   159f4:	4770      	bx	lr
   159f6:	bf00      	nop
   159f8:	20000ea8 	.word	0x20000ea8

000159fc <update_cache>:
{
   159fc:	b538      	push	{r3, r4, r5, lr}
   159fe:	4604      	mov	r4, r0
	return _priq_run_best(curr_cpu_runq());
   15a00:	4810      	ldr	r0, [pc, #64]	; (15a44 <update_cache+0x48>)
   15a02:	f003 fbaa 	bl	1915a <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
   15a06:	4605      	mov	r5, r0
   15a08:	b170      	cbz	r0, 15a28 <update_cache+0x2c>
	if (preempt_ok != 0) {
   15a0a:	b984      	cbnz	r4, 15a2e <update_cache+0x32>
	if (z_is_thread_prevented_from_running(_current)) {
   15a0c:	4b0e      	ldr	r3, [pc, #56]	; (15a48 <update_cache+0x4c>)
   15a0e:	689b      	ldr	r3, [r3, #8]
	uint8_t state = thread->base.thread_state;
   15a10:	7b5a      	ldrb	r2, [r3, #13]
   15a12:	f012 0f1f 	tst.w	r2, #31
   15a16:	d10a      	bne.n	15a2e <update_cache+0x32>
	return node->next != NULL;
   15a18:	69aa      	ldr	r2, [r5, #24]
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   15a1a:	b942      	cbnz	r2, 15a2e <update_cache+0x32>
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
   15a1c:	89da      	ldrh	r2, [r3, #14]
	if (is_preempt(_current) || is_metairq(thread)) {
   15a1e:	2a7f      	cmp	r2, #127	; 0x7f
   15a20:	d905      	bls.n	15a2e <update_cache+0x32>
		_kernel.ready_q.cache = _current;
   15a22:	4a09      	ldr	r2, [pc, #36]	; (15a48 <update_cache+0x4c>)
   15a24:	61d3      	str	r3, [r2, #28]
   15a26:	e00b      	b.n	15a40 <update_cache+0x44>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
   15a28:	4b07      	ldr	r3, [pc, #28]	; (15a48 <update_cache+0x4c>)
   15a2a:	68dd      	ldr	r5, [r3, #12]
   15a2c:	e7ed      	b.n	15a0a <update_cache+0xe>
		if (thread != _current) {
   15a2e:	4b06      	ldr	r3, [pc, #24]	; (15a48 <update_cache+0x4c>)
   15a30:	689b      	ldr	r3, [r3, #8]
   15a32:	42ab      	cmp	r3, r5
   15a34:	d002      	beq.n	15a3c <update_cache+0x40>
			z_reset_time_slice(thread);
   15a36:	4628      	mov	r0, r5
   15a38:	f7ff ff5c 	bl	158f4 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
   15a3c:	4b02      	ldr	r3, [pc, #8]	; (15a48 <update_cache+0x4c>)
   15a3e:	61dd      	str	r5, [r3, #28]
}
   15a40:	bd38      	pop	{r3, r4, r5, pc}
   15a42:	bf00      	nop
   15a44:	20000ec8 	.word	0x20000ec8
   15a48:	20000ea8 	.word	0x20000ea8

00015a4c <move_thread_to_end_of_prio_q>:
{
   15a4c:	b538      	push	{r3, r4, r5, lr}
   15a4e:	4605      	mov	r5, r0
	return (thread->base.thread_state & state) != 0U;
   15a50:	7b42      	ldrb	r2, [r0, #13]
	if (z_is_thread_queued(thread)) {
   15a52:	f990 300d 	ldrsb.w	r3, [r0, #13]
   15a56:	2b00      	cmp	r3, #0
   15a58:	db28      	blt.n	15aac <move_thread_to_end_of_prio_q+0x60>
	thread->base.thread_state |= _THREAD_QUEUED;
   15a5a:	7b6b      	ldrb	r3, [r5, #13]
   15a5c:	f063 037f 	orn	r3, r3, #127	; 0x7f
   15a60:	736b      	strb	r3, [r5, #13]
	return list->head == list;
   15a62:	4b1a      	ldr	r3, [pc, #104]	; (15acc <move_thread_to_end_of_prio_q+0x80>)
   15a64:	f853 4f20 	ldr.w	r4, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   15a68:	429c      	cmp	r4, r3
   15a6a:	d02d      	beq.n	15ac8 <move_thread_to_end_of_prio_q+0x7c>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   15a6c:	b16c      	cbz	r4, 15a8a <move_thread_to_end_of_prio_q+0x3e>
		if (z_sched_prio_cmp(thread, t) > 0) {
   15a6e:	4621      	mov	r1, r4
   15a70:	4628      	mov	r0, r5
   15a72:	f003 fb4b 	bl	1910c <z_sched_prio_cmp>
   15a76:	2800      	cmp	r0, #0
   15a78:	dc20      	bgt.n	15abc <move_thread_to_end_of_prio_q+0x70>
 */

static inline sys_dnode_t *sys_dlist_peek_next(sys_dlist_t *list,
					       sys_dnode_t *node)
{
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   15a7a:	b134      	cbz	r4, 15a8a <move_thread_to_end_of_prio_q+0x3e>
	return (node == list->tail) ? NULL : node->next;
   15a7c:	4b13      	ldr	r3, [pc, #76]	; (15acc <move_thread_to_end_of_prio_q+0x80>)
   15a7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   15a80:	429c      	cmp	r4, r3
   15a82:	d002      	beq.n	15a8a <move_thread_to_end_of_prio_q+0x3e>
   15a84:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   15a86:	2c00      	cmp	r4, #0
   15a88:	d1f0      	bne.n	15a6c <move_thread_to_end_of_prio_q+0x20>
 * @param node the element to append
 */

static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	sys_dnode_t *const tail = list->tail;
   15a8a:	4b10      	ldr	r3, [pc, #64]	; (15acc <move_thread_to_end_of_prio_q+0x80>)
   15a8c:	6a5a      	ldr	r2, [r3, #36]	; 0x24

	node->next = list;
   15a8e:	f103 0120 	add.w	r1, r3, #32
   15a92:	6029      	str	r1, [r5, #0]
	node->prev = tail;
   15a94:	606a      	str	r2, [r5, #4]

	tail->next = node;
   15a96:	6015      	str	r5, [r2, #0]
	list->tail = node;
   15a98:	625d      	str	r5, [r3, #36]	; 0x24
	update_cache(thread == _current);
   15a9a:	4b0c      	ldr	r3, [pc, #48]	; (15acc <move_thread_to_end_of_prio_q+0x80>)
   15a9c:	6898      	ldr	r0, [r3, #8]
   15a9e:	42a8      	cmp	r0, r5
   15aa0:	bf14      	ite	ne
   15aa2:	2000      	movne	r0, #0
   15aa4:	2001      	moveq	r0, #1
   15aa6:	f7ff ffa9 	bl	159fc <update_cache>
}
   15aaa:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_QUEUED;
   15aac:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   15ab0:	7342      	strb	r2, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
   15ab2:	4601      	mov	r1, r0
   15ab4:	4806      	ldr	r0, [pc, #24]	; (15ad0 <move_thread_to_end_of_prio_q+0x84>)
   15ab6:	f003 fb48 	bl	1914a <z_priq_dumb_remove>
}
   15aba:	e7ce      	b.n	15a5a <move_thread_to_end_of_prio_q+0xe>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
   15abc:	6863      	ldr	r3, [r4, #4]

	node->prev = prev;
   15abe:	606b      	str	r3, [r5, #4]
	node->next = successor;
   15ac0:	602c      	str	r4, [r5, #0]
	prev->next = node;
   15ac2:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   15ac4:	6065      	str	r5, [r4, #4]
}
   15ac6:	e7e8      	b.n	15a9a <move_thread_to_end_of_prio_q+0x4e>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   15ac8:	2400      	movs	r4, #0
   15aca:	e7cf      	b.n	15a6c <move_thread_to_end_of_prio_q+0x20>
   15acc:	20000ea8 	.word	0x20000ea8
   15ad0:	20000ec8 	.word	0x20000ec8

00015ad4 <slice_expired_locked>:
{
   15ad4:	b538      	push	{r3, r4, r5, lr}
   15ad6:	4604      	mov	r4, r0
	struct k_thread *curr = _current;
   15ad8:	4b07      	ldr	r3, [pc, #28]	; (15af8 <slice_expired_locked+0x24>)
   15ada:	689d      	ldr	r5, [r3, #8]
	uint8_t state = thread->base.thread_state;
   15adc:	7b6b      	ldrb	r3, [r5, #13]
	if (!z_is_thread_prevented_from_running(curr)) {
   15ade:	f013 0f1f 	tst.w	r3, #31
   15ae2:	d004      	beq.n	15aee <slice_expired_locked+0x1a>
	z_reset_time_slice(curr);
   15ae4:	4628      	mov	r0, r5
   15ae6:	f7ff ff05 	bl	158f4 <z_reset_time_slice>
}
   15aea:	4620      	mov	r0, r4
   15aec:	bd38      	pop	{r3, r4, r5, pc}
		move_thread_to_end_of_prio_q(curr);
   15aee:	4628      	mov	r0, r5
   15af0:	f7ff ffac 	bl	15a4c <move_thread_to_end_of_prio_q>
   15af4:	e7f6      	b.n	15ae4 <slice_expired_locked+0x10>
   15af6:	bf00      	nop
   15af8:	20000ea8 	.word	0x20000ea8

00015afc <z_time_slice>:
{
   15afc:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   15afe:	f04f 0320 	mov.w	r3, #32
   15b02:	f3ef 8411 	mrs	r4, BASEPRI
   15b06:	f383 8812 	msr	BASEPRI_MAX, r3
   15b0a:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
   15b0e:	4b22      	ldr	r3, [pc, #136]	; (15b98 <z_time_slice+0x9c>)
   15b10:	689b      	ldr	r3, [r3, #8]
   15b12:	4a22      	ldr	r2, [pc, #136]	; (15b9c <z_time_slice+0xa0>)
   15b14:	6812      	ldr	r2, [r2, #0]
   15b16:	4293      	cmp	r3, r2
   15b18:	d018      	beq.n	15b4c <z_time_slice+0x50>
   15b1a:	4621      	mov	r1, r4
	pending_current = NULL;
   15b1c:	4a1f      	ldr	r2, [pc, #124]	; (15b9c <z_time_slice+0xa0>)
   15b1e:	2500      	movs	r5, #0
   15b20:	6015      	str	r5, [r2, #0]
	int ret = slice_ticks;
   15b22:	4a1f      	ldr	r2, [pc, #124]	; (15ba0 <z_time_slice+0xa4>)
   15b24:	6812      	ldr	r2, [r2, #0]
	if (slice_time(_current) && sliceable(_current)) {
   15b26:	b372      	cbz	r2, 15b86 <z_time_slice+0x8a>
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
   15b28:	89da      	ldrh	r2, [r3, #14]
		&& !z_is_idle_thread_object(thread);
   15b2a:	2a7f      	cmp	r2, #127	; 0x7f
   15b2c:	d816      	bhi.n	15b5c <z_time_slice+0x60>
   15b2e:	7b5a      	ldrb	r2, [r3, #13]
		&& !z_is_thread_prevented_from_running(thread)
   15b30:	f012 0f1f 	tst.w	r2, #31
   15b34:	d11c      	bne.n	15b70 <z_time_slice+0x74>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
   15b36:	f993 500e 	ldrsb.w	r5, [r3, #14]
   15b3a:	4a1a      	ldr	r2, [pc, #104]	; (15ba4 <z_time_slice+0xa8>)
   15b3c:	6812      	ldr	r2, [r2, #0]
   15b3e:	4295      	cmp	r5, r2
   15b40:	db18      	blt.n	15b74 <z_time_slice+0x78>
		&& !z_is_idle_thread_object(thread);
   15b42:	4a19      	ldr	r2, [pc, #100]	; (15ba8 <z_time_slice+0xac>)
   15b44:	4293      	cmp	r3, r2
   15b46:	d017      	beq.n	15b78 <z_time_slice+0x7c>
   15b48:	2301      	movs	r3, #1
   15b4a:	e008      	b.n	15b5e <z_time_slice+0x62>
		z_reset_time_slice(_current);
   15b4c:	4618      	mov	r0, r3
   15b4e:	f7ff fed1 	bl	158f4 <z_reset_time_slice>
	__asm__ volatile(
   15b52:	f384 8811 	msr	BASEPRI, r4
   15b56:	f3bf 8f6f 	isb	sy
		return;
   15b5a:	e01b      	b.n	15b94 <z_time_slice+0x98>
		&& !z_is_idle_thread_object(thread);
   15b5c:	2300      	movs	r3, #0
	if (slice_time(_current) && sliceable(_current)) {
   15b5e:	b193      	cbz	r3, 15b86 <z_time_slice+0x8a>
		if (ticks >= _current_cpu->slice_ticks) {
   15b60:	4b0d      	ldr	r3, [pc, #52]	; (15b98 <z_time_slice+0x9c>)
   15b62:	691b      	ldr	r3, [r3, #16]
   15b64:	4283      	cmp	r3, r0
   15b66:	dd09      	ble.n	15b7c <z_time_slice+0x80>
			_current_cpu->slice_ticks -= ticks;
   15b68:	1a18      	subs	r0, r3, r0
   15b6a:	4b0b      	ldr	r3, [pc, #44]	; (15b98 <z_time_slice+0x9c>)
   15b6c:	6118      	str	r0, [r3, #16]
   15b6e:	e00d      	b.n	15b8c <z_time_slice+0x90>
		&& !z_is_idle_thread_object(thread);
   15b70:	2300      	movs	r3, #0
   15b72:	e7f4      	b.n	15b5e <z_time_slice+0x62>
   15b74:	2300      	movs	r3, #0
   15b76:	e7f2      	b.n	15b5e <z_time_slice+0x62>
   15b78:	2300      	movs	r3, #0
   15b7a:	e7f0      	b.n	15b5e <z_time_slice+0x62>
			key = slice_expired_locked(key);
   15b7c:	4620      	mov	r0, r4
   15b7e:	f7ff ffa9 	bl	15ad4 <slice_expired_locked>
   15b82:	4601      	mov	r1, r0
   15b84:	e002      	b.n	15b8c <z_time_slice+0x90>
		_current_cpu->slice_ticks = 0;
   15b86:	4b04      	ldr	r3, [pc, #16]	; (15b98 <z_time_slice+0x9c>)
   15b88:	2200      	movs	r2, #0
   15b8a:	611a      	str	r2, [r3, #16]
   15b8c:	f381 8811 	msr	BASEPRI, r1
   15b90:	f3bf 8f6f 	isb	sy
}
   15b94:	bd38      	pop	{r3, r4, r5, pc}
   15b96:	bf00      	nop
   15b98:	20000ea8 	.word	0x20000ea8
   15b9c:	20000ed4 	.word	0x20000ed4
   15ba0:	20000edc 	.word	0x20000edc
   15ba4:	20000ed8 	.word	0x20000ed8
   15ba8:	20000240 	.word	0x20000240

00015bac <ready_thread>:
{
   15bac:	b538      	push	{r3, r4, r5, lr}
	return (thread->base.thread_state & state) != 0U;
   15bae:	7b43      	ldrb	r3, [r0, #13]
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
   15bb0:	f990 200d 	ldrsb.w	r2, [r0, #13]
   15bb4:	2a00      	cmp	r2, #0
   15bb6:	db2d      	blt.n	15c14 <ready_thread+0x68>
   15bb8:	4604      	mov	r4, r0
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   15bba:	f013 0f1f 	tst.w	r3, #31
   15bbe:	d105      	bne.n	15bcc <ready_thread+0x20>
	return node->next != NULL;
   15bc0:	6982      	ldr	r2, [r0, #24]
   15bc2:	b10a      	cbz	r2, 15bc8 <ready_thread+0x1c>
   15bc4:	2200      	movs	r2, #0
   15bc6:	e002      	b.n	15bce <ready_thread+0x22>
   15bc8:	2201      	movs	r2, #1
   15bca:	e000      	b.n	15bce <ready_thread+0x22>
   15bcc:	2200      	movs	r2, #0
   15bce:	b30a      	cbz	r2, 15c14 <ready_thread+0x68>
	thread->base.thread_state |= _THREAD_QUEUED;
   15bd0:	f063 037f 	orn	r3, r3, #127	; 0x7f
   15bd4:	7363      	strb	r3, [r4, #13]
	return list->head == list;
   15bd6:	4b14      	ldr	r3, [pc, #80]	; (15c28 <ready_thread+0x7c>)
   15bd8:	f853 5f20 	ldr.w	r5, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   15bdc:	429d      	cmp	r5, r3
   15bde:	d020      	beq.n	15c22 <ready_thread+0x76>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   15be0:	b16d      	cbz	r5, 15bfe <ready_thread+0x52>
		if (z_sched_prio_cmp(thread, t) > 0) {
   15be2:	4629      	mov	r1, r5
   15be4:	4620      	mov	r0, r4
   15be6:	f003 fa91 	bl	1910c <z_sched_prio_cmp>
   15bea:	2800      	cmp	r0, #0
   15bec:	dc13      	bgt.n	15c16 <ready_thread+0x6a>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   15bee:	b135      	cbz	r5, 15bfe <ready_thread+0x52>
	return (node == list->tail) ? NULL : node->next;
   15bf0:	4b0d      	ldr	r3, [pc, #52]	; (15c28 <ready_thread+0x7c>)
   15bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   15bf4:	429d      	cmp	r5, r3
   15bf6:	d002      	beq.n	15bfe <ready_thread+0x52>
   15bf8:	682d      	ldr	r5, [r5, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   15bfa:	2d00      	cmp	r5, #0
   15bfc:	d1f0      	bne.n	15be0 <ready_thread+0x34>
	sys_dnode_t *const tail = list->tail;
   15bfe:	4b0a      	ldr	r3, [pc, #40]	; (15c28 <ready_thread+0x7c>)
   15c00:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
   15c02:	f103 0120 	add.w	r1, r3, #32
   15c06:	6021      	str	r1, [r4, #0]
	node->prev = tail;
   15c08:	6062      	str	r2, [r4, #4]
	tail->next = node;
   15c0a:	6014      	str	r4, [r2, #0]
	list->tail = node;
   15c0c:	625c      	str	r4, [r3, #36]	; 0x24
		update_cache(0);
   15c0e:	2000      	movs	r0, #0
   15c10:	f7ff fef4 	bl	159fc <update_cache>
}
   15c14:	bd38      	pop	{r3, r4, r5, pc}
	sys_dnode_t *const prev = successor->prev;
   15c16:	686b      	ldr	r3, [r5, #4]
	node->prev = prev;
   15c18:	6063      	str	r3, [r4, #4]
	node->next = successor;
   15c1a:	6025      	str	r5, [r4, #0]
	prev->next = node;
   15c1c:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   15c1e:	606c      	str	r4, [r5, #4]
}
   15c20:	e7f5      	b.n	15c0e <ready_thread+0x62>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   15c22:	2500      	movs	r5, #0
   15c24:	e7dc      	b.n	15be0 <ready_thread+0x34>
   15c26:	bf00      	nop
   15c28:	20000ea8 	.word	0x20000ea8

00015c2c <z_sched_start>:
{
   15c2c:	b510      	push	{r4, lr}
	__asm__ volatile(
   15c2e:	f04f 0320 	mov.w	r3, #32
   15c32:	f3ef 8411 	mrs	r4, BASEPRI
   15c36:	f383 8812 	msr	BASEPRI_MAX, r3
   15c3a:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
   15c3e:	7b43      	ldrb	r3, [r0, #13]
	if (z_has_thread_started(thread)) {
   15c40:	f013 0f04 	tst.w	r3, #4
   15c44:	d104      	bne.n	15c50 <z_sched_start+0x24>
	__asm__ volatile(
   15c46:	f384 8811 	msr	BASEPRI, r4
   15c4a:	f3bf 8f6f 	isb	sy
}
   15c4e:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   15c50:	f023 0304 	bic.w	r3, r3, #4
   15c54:	7343      	strb	r3, [r0, #13]
	ready_thread(thread);
   15c56:	f7ff ffa9 	bl	15bac <ready_thread>
	z_reschedule(&sched_spinlock, key);
   15c5a:	4621      	mov	r1, r4
   15c5c:	4801      	ldr	r0, [pc, #4]	; (15c64 <z_sched_start+0x38>)
   15c5e:	f7ff fe97 	bl	15990 <z_reschedule>
   15c62:	e7f4      	b.n	15c4e <z_sched_start+0x22>
   15c64:	20000ed8 	.word	0x20000ed8

00015c68 <unready_thread>:
{
   15c68:	b510      	push	{r4, lr}
   15c6a:	4604      	mov	r4, r0
	return (thread->base.thread_state & state) != 0U;
   15c6c:	7b42      	ldrb	r2, [r0, #13]
	if (z_is_thread_queued(thread)) {
   15c6e:	f990 300d 	ldrsb.w	r3, [r0, #13]
   15c72:	2b00      	cmp	r3, #0
   15c74:	db08      	blt.n	15c88 <unready_thread+0x20>
	update_cache(thread == _current);
   15c76:	4b08      	ldr	r3, [pc, #32]	; (15c98 <unready_thread+0x30>)
   15c78:	6898      	ldr	r0, [r3, #8]
   15c7a:	42a0      	cmp	r0, r4
   15c7c:	bf14      	ite	ne
   15c7e:	2000      	movne	r0, #0
   15c80:	2001      	moveq	r0, #1
   15c82:	f7ff febb 	bl	159fc <update_cache>
}
   15c86:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_QUEUED;
   15c88:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   15c8c:	7342      	strb	r2, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
   15c8e:	4601      	mov	r1, r0
   15c90:	4802      	ldr	r0, [pc, #8]	; (15c9c <unready_thread+0x34>)
   15c92:	f003 fa5a 	bl	1914a <z_priq_dumb_remove>
}
   15c96:	e7ee      	b.n	15c76 <unready_thread+0xe>
   15c98:	20000ea8 	.word	0x20000ea8
   15c9c:	20000ec8 	.word	0x20000ec8

00015ca0 <z_pend_curr>:
{
   15ca0:	b510      	push	{r4, lr}
   15ca2:	460c      	mov	r4, r1
   15ca4:	4611      	mov	r1, r2
	pending_current = _current;
   15ca6:	4b06      	ldr	r3, [pc, #24]	; (15cc0 <z_pend_curr+0x20>)
   15ca8:	6898      	ldr	r0, [r3, #8]
   15caa:	4b06      	ldr	r3, [pc, #24]	; (15cc4 <z_pend_curr+0x24>)
   15cac:	6018      	str	r0, [r3, #0]
	pend(_current, wait_q, timeout);
   15cae:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   15cb2:	f003 fad7 	bl	19264 <pend>
   15cb6:	4620      	mov	r0, r4
   15cb8:	f7fb ff00 	bl	11abc <arch_swap>
}
   15cbc:	bd10      	pop	{r4, pc}
   15cbe:	bf00      	nop
   15cc0:	20000ea8 	.word	0x20000ea8
   15cc4:	20000ed4 	.word	0x20000ed4

00015cc8 <z_set_prio>:
{
   15cc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   15ccc:	4604      	mov	r4, r0
   15cce:	460e      	mov	r6, r1
	LOCKED(&sched_spinlock) {
   15cd0:	2300      	movs	r3, #0
	__asm__ volatile(
   15cd2:	f04f 0220 	mov.w	r2, #32
   15cd6:	f3ef 8811 	mrs	r8, BASEPRI
   15cda:	f382 8812 	msr	BASEPRI_MAX, r2
   15cde:	f3bf 8f6f 	isb	sy
	bool need_sched = 0;
   15ce2:	461f      	mov	r7, r3
   15ce4:	e008      	b.n	15cf8 <z_set_prio+0x30>
		if (need_sched) {
   15ce6:	f012 0701 	ands.w	r7, r2, #1
   15cea:	d111      	bne.n	15d10 <z_set_prio+0x48>
			thread->base.prio = prio;
   15cec:	73a6      	strb	r6, [r4, #14]
	__asm__ volatile(
   15cee:	f388 8811 	msr	BASEPRI, r8
   15cf2:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   15cf6:	2301      	movs	r3, #1
   15cf8:	461a      	mov	r2, r3
   15cfa:	2b00      	cmp	r3, #0
   15cfc:	d13d      	bne.n	15d7a <z_set_prio+0xb2>
	uint8_t state = thread->base.thread_state;
   15cfe:	7b63      	ldrb	r3, [r4, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   15d00:	f013 0f1f 	tst.w	r3, #31
   15d04:	d1ef      	bne.n	15ce6 <z_set_prio+0x1e>
	return node->next != NULL;
   15d06:	69a1      	ldr	r1, [r4, #24]
   15d08:	2900      	cmp	r1, #0
   15d0a:	d1ec      	bne.n	15ce6 <z_set_prio+0x1e>
   15d0c:	2201      	movs	r2, #1
   15d0e:	e7ea      	b.n	15ce6 <z_set_prio+0x1e>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   15d10:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   15d14:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
   15d16:	f8df 9068 	ldr.w	r9, [pc, #104]	; 15d80 <z_set_prio+0xb8>
   15d1a:	4621      	mov	r1, r4
   15d1c:	4648      	mov	r0, r9
   15d1e:	f003 fa14 	bl	1914a <z_priq_dumb_remove>
				thread->base.prio = prio;
   15d22:	73a6      	strb	r6, [r4, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
   15d24:	7b63      	ldrb	r3, [r4, #13]
   15d26:	f063 037f 	orn	r3, r3, #127	; 0x7f
   15d2a:	7363      	strb	r3, [r4, #13]
	return list->head == list;
   15d2c:	f8d9 5000 	ldr.w	r5, [r9]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   15d30:	454d      	cmp	r5, r9
   15d32:	d020      	beq.n	15d76 <z_set_prio+0xae>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   15d34:	b16d      	cbz	r5, 15d52 <z_set_prio+0x8a>
		if (z_sched_prio_cmp(thread, t) > 0) {
   15d36:	4629      	mov	r1, r5
   15d38:	4620      	mov	r0, r4
   15d3a:	f003 f9e7 	bl	1910c <z_sched_prio_cmp>
   15d3e:	2800      	cmp	r0, #0
   15d40:	dc13      	bgt.n	15d6a <z_set_prio+0xa2>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   15d42:	b135      	cbz	r5, 15d52 <z_set_prio+0x8a>
	return (node == list->tail) ? NULL : node->next;
   15d44:	4b0f      	ldr	r3, [pc, #60]	; (15d84 <z_set_prio+0xbc>)
   15d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   15d48:	429d      	cmp	r5, r3
   15d4a:	d002      	beq.n	15d52 <z_set_prio+0x8a>
   15d4c:	682d      	ldr	r5, [r5, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   15d4e:	2d00      	cmp	r5, #0
   15d50:	d1f0      	bne.n	15d34 <z_set_prio+0x6c>
	sys_dnode_t *const tail = list->tail;
   15d52:	4b0c      	ldr	r3, [pc, #48]	; (15d84 <z_set_prio+0xbc>)
   15d54:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
   15d56:	f103 0120 	add.w	r1, r3, #32
   15d5a:	6021      	str	r1, [r4, #0]
	node->prev = tail;
   15d5c:	6062      	str	r2, [r4, #4]
	tail->next = node;
   15d5e:	6014      	str	r4, [r2, #0]
	list->tail = node;
   15d60:	625c      	str	r4, [r3, #36]	; 0x24
			update_cache(1);
   15d62:	2001      	movs	r0, #1
   15d64:	f7ff fe4a 	bl	159fc <update_cache>
   15d68:	e7c1      	b.n	15cee <z_set_prio+0x26>
	sys_dnode_t *const prev = successor->prev;
   15d6a:	686b      	ldr	r3, [r5, #4]
	node->prev = prev;
   15d6c:	6063      	str	r3, [r4, #4]
	node->next = successor;
   15d6e:	6025      	str	r5, [r4, #0]
	prev->next = node;
   15d70:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   15d72:	606c      	str	r4, [r5, #4]
}
   15d74:	e7f5      	b.n	15d62 <z_set_prio+0x9a>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   15d76:	2500      	movs	r5, #0
   15d78:	e7dc      	b.n	15d34 <z_set_prio+0x6c>
}
   15d7a:	4638      	mov	r0, r7
   15d7c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   15d80:	20000ec8 	.word	0x20000ec8
   15d84:	20000ea8 	.word	0x20000ea8

00015d88 <z_impl_k_thread_suspend>:
{
   15d88:	b538      	push	{r3, r4, r5, lr}
   15d8a:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   15d8c:	3018      	adds	r0, #24
   15d8e:	f003 fad1 	bl	19334 <z_abort_timeout>
	LOCKED(&sched_spinlock) {
   15d92:	2300      	movs	r3, #0
	__asm__ volatile(
   15d94:	f04f 0220 	mov.w	r2, #32
   15d98:	f3ef 8511 	mrs	r5, BASEPRI
   15d9c:	f382 8812 	msr	BASEPRI_MAX, r2
   15da0:	f3bf 8f6f 	isb	sy
   15da4:	e010      	b.n	15dc8 <z_impl_k_thread_suspend+0x40>
	thread->base.thread_state |= _THREAD_SUSPENDED;
   15da6:	7b63      	ldrb	r3, [r4, #13]
   15da8:	f043 0310 	orr.w	r3, r3, #16
   15dac:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
   15dae:	4b15      	ldr	r3, [pc, #84]	; (15e04 <z_impl_k_thread_suspend+0x7c>)
   15db0:	6898      	ldr	r0, [r3, #8]
   15db2:	42a0      	cmp	r0, r4
   15db4:	bf14      	ite	ne
   15db6:	2000      	movne	r0, #0
   15db8:	2001      	moveq	r0, #1
   15dba:	f7ff fe1f 	bl	159fc <update_cache>
	__asm__ volatile(
   15dbe:	f385 8811 	msr	BASEPRI, r5
   15dc2:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   15dc6:	2301      	movs	r3, #1
   15dc8:	b963      	cbnz	r3, 15de4 <z_impl_k_thread_suspend+0x5c>
	return (thread->base.thread_state & state) != 0U;
   15dca:	7b62      	ldrb	r2, [r4, #13]
		if (z_is_thread_queued(thread)) {
   15dcc:	f994 300d 	ldrsb.w	r3, [r4, #13]
   15dd0:	2b00      	cmp	r3, #0
   15dd2:	dae8      	bge.n	15da6 <z_impl_k_thread_suspend+0x1e>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   15dd4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   15dd8:	7362      	strb	r2, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
   15dda:	4621      	mov	r1, r4
   15ddc:	480a      	ldr	r0, [pc, #40]	; (15e08 <z_impl_k_thread_suspend+0x80>)
   15dde:	f003 f9b4 	bl	1914a <z_priq_dumb_remove>
}
   15de2:	e7e0      	b.n	15da6 <z_impl_k_thread_suspend+0x1e>
	if (thread == _current) {
   15de4:	4b07      	ldr	r3, [pc, #28]	; (15e04 <z_impl_k_thread_suspend+0x7c>)
   15de6:	689b      	ldr	r3, [r3, #8]
   15de8:	42a3      	cmp	r3, r4
   15dea:	d000      	beq.n	15dee <z_impl_k_thread_suspend+0x66>
}
   15dec:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
   15dee:	f04f 0320 	mov.w	r3, #32
   15df2:	f3ef 8011 	mrs	r0, BASEPRI
   15df6:	f383 8812 	msr	BASEPRI_MAX, r3
   15dfa:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   15dfe:	f003 f98f 	bl	19120 <z_reschedule_irqlock>
   15e02:	e7f3      	b.n	15dec <z_impl_k_thread_suspend+0x64>
   15e04:	20000ea8 	.word	0x20000ea8
   15e08:	20000ec8 	.word	0x20000ec8

00015e0c <k_sched_unlock>:

void k_sched_unlock(void)
{
   15e0c:	b510      	push	{r4, lr}
	LOCKED(&sched_spinlock) {
   15e0e:	2300      	movs	r3, #0
   15e10:	f04f 0220 	mov.w	r2, #32
   15e14:	f3ef 8411 	mrs	r4, BASEPRI
   15e18:	f382 8812 	msr	BASEPRI_MAX, r2
   15e1c:	f3bf 8f6f 	isb	sy
   15e20:	e00c      	b.n	15e3c <k_sched_unlock+0x30>
		__ASSERT(_current->base.sched_locked != 0U, "");
		__ASSERT(!arch_is_in_isr(), "");

		++_current->base.sched_locked;
   15e22:	4b0d      	ldr	r3, [pc, #52]	; (15e58 <k_sched_unlock+0x4c>)
   15e24:	689a      	ldr	r2, [r3, #8]
   15e26:	7bd3      	ldrb	r3, [r2, #15]
   15e28:	3301      	adds	r3, #1
   15e2a:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   15e2c:	2000      	movs	r0, #0
   15e2e:	f7ff fde5 	bl	159fc <update_cache>
	__asm__ volatile(
   15e32:	f384 8811 	msr	BASEPRI, r4
   15e36:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   15e3a:	2301      	movs	r3, #1
   15e3c:	2b00      	cmp	r3, #0
   15e3e:	d0f0      	beq.n	15e22 <k_sched_unlock+0x16>
	__asm__ volatile(
   15e40:	f04f 0320 	mov.w	r3, #32
   15e44:	f3ef 8011 	mrs	r0, BASEPRI
   15e48:	f383 8812 	msr	BASEPRI_MAX, r3
   15e4c:	f3bf 8f6f 	isb	sy
   15e50:	f003 f966 	bl	19120 <z_reschedule_irqlock>
		_current, _current->base.sched_locked);

	SYS_PORT_TRACING_FUNC(k_thread, sched_unlock);

	z_reschedule_unlocked();
}
   15e54:	bd10      	pop	{r4, pc}
   15e56:	bf00      	nop
   15e58:	20000ea8 	.word	0x20000ea8

00015e5c <end_thread>:
#ifdef CONFIG_CMSIS_RTOS_V1
extern void z_thread_cmsis_status_mask_clear(struct k_thread *thread);
#endif

static void end_thread(struct k_thread *thread)
{
   15e5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* We hold the lock, and the thread is known not to be running
	 * anywhere.
	 */
	if ((thread->base.thread_state & _THREAD_DEAD) == 0U) {
   15e5e:	7b43      	ldrb	r3, [r0, #13]
   15e60:	f013 0f08 	tst.w	r3, #8
   15e64:	d145      	bne.n	15ef2 <end_thread+0x96>
   15e66:	4605      	mov	r5, r0
		thread->base.thread_state |= _THREAD_DEAD;
   15e68:	f043 0308 	orr.w	r3, r3, #8
   15e6c:	7343      	strb	r3, [r0, #13]
		thread->base.thread_state &= ~_THREAD_ABORTING;
   15e6e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   15e72:	7343      	strb	r3, [r0, #13]
		if (z_is_thread_queued(thread)) {
   15e74:	f013 0f80 	tst.w	r3, #128	; 0x80
   15e78:	d12d      	bne.n	15ed6 <end_thread+0x7a>
			dequeue_thread(thread);
		}
		if (thread->base.pended_on != NULL) {
   15e7a:	68ab      	ldr	r3, [r5, #8]
   15e7c:	b15b      	cbz	r3, 15e96 <end_thread+0x3a>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
   15e7e:	4628      	mov	r0, r5
   15e80:	f003 f942 	bl	19108 <pended_on_thread>
   15e84:	4629      	mov	r1, r5
   15e86:	f003 f960 	bl	1914a <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   15e8a:	7b6b      	ldrb	r3, [r5, #13]
   15e8c:	f023 0302 	bic.w	r3, r3, #2
   15e90:	736b      	strb	r3, [r5, #13]
	thread->base.pended_on = NULL;
   15e92:	2300      	movs	r3, #0
   15e94:	60ab      	str	r3, [r5, #8]
   15e96:	f105 0018 	add.w	r0, r5, #24
   15e9a:	f003 fa4b 	bl	19334 <z_abort_timeout>
			unpend_thread_no_timeout(thread);
		}
		(void)z_abort_thread_timeout(thread);
		unpend_all(&thread->join_queue);
   15e9e:	f105 0758 	add.w	r7, r5, #88	; 0x58
	return list->head == list;
   15ea2:	683c      	ldr	r4, [r7, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   15ea4:	42bc      	cmp	r4, r7
   15ea6:	d01e      	beq.n	15ee6 <end_thread+0x8a>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   15ea8:	b1ec      	cbz	r4, 15ee6 <end_thread+0x8a>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
   15eaa:	4620      	mov	r0, r4
   15eac:	f003 f92c 	bl	19108 <pended_on_thread>
   15eb0:	4621      	mov	r1, r4
   15eb2:	f003 f94a 	bl	1914a <z_priq_dumb_remove>
   15eb6:	7b63      	ldrb	r3, [r4, #13]
   15eb8:	f023 0302 	bic.w	r3, r3, #2
   15ebc:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
   15ebe:	2600      	movs	r6, #0
   15ec0:	60a6      	str	r6, [r4, #8]
   15ec2:	f104 0018 	add.w	r0, r4, #24
   15ec6:	f003 fa35 	bl	19334 <z_abort_timeout>
   15eca:	f8c4 60ac 	str.w	r6, [r4, #172]	; 0xac
		ready_thread(thread);
   15ece:	4620      	mov	r0, r4
   15ed0:	f7ff fe6c 	bl	15bac <ready_thread>
   15ed4:	e7e5      	b.n	15ea2 <end_thread+0x46>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   15ed6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   15eda:	7343      	strb	r3, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
   15edc:	4601      	mov	r1, r0
   15ede:	4805      	ldr	r0, [pc, #20]	; (15ef4 <end_thread+0x98>)
   15ee0:	f003 f933 	bl	1914a <z_priq_dumb_remove>
}
   15ee4:	e7c9      	b.n	15e7a <end_thread+0x1e>
		update_cache(1);
   15ee6:	2001      	movs	r0, #1
   15ee8:	f7ff fd88 	bl	159fc <update_cache>

		SYS_PORT_TRACING_FUNC(k_thread, sched_abort, thread);

		z_thread_monitor_exit(thread);
   15eec:	4628      	mov	r0, r5
   15eee:	f7ff fae3 	bl	154b8 <z_thread_monitor_exit>
		z_thread_perms_all_clear(thread);
		z_object_uninit(thread->stack_obj);
		z_object_uninit(thread);
#endif
	}
}
   15ef2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   15ef4:	20000ec8 	.word	0x20000ec8

00015ef8 <z_sched_init>:
{
   15ef8:	b508      	push	{r3, lr}
	init_ready_q(&_kernel.ready_q);
   15efa:	4804      	ldr	r0, [pc, #16]	; (15f0c <z_sched_init+0x14>)
   15efc:	f003 f9ff 	bl	192fe <init_ready_q>
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
   15f00:	2100      	movs	r1, #0
   15f02:	4608      	mov	r0, r1
   15f04:	f7ff fd0a 	bl	1591c <k_sched_time_slice_set>
}
   15f08:	bd08      	pop	{r3, pc}
   15f0a:	bf00      	nop
   15f0c:	20000ec4 	.word	0x20000ec4

00015f10 <z_impl_k_yield>:
{
   15f10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   15f12:	f04f 0320 	mov.w	r3, #32
   15f16:	f3ef 8611 	mrs	r6, BASEPRI
   15f1a:	f383 8812 	msr	BASEPRI_MAX, r3
   15f1e:	f3bf 8f6f 	isb	sy
		dequeue_thread(_current);
   15f22:	4c1c      	ldr	r4, [pc, #112]	; (15f94 <z_impl_k_yield+0x84>)
   15f24:	68a1      	ldr	r1, [r4, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
   15f26:	7b4b      	ldrb	r3, [r1, #13]
   15f28:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   15f2c:	734b      	strb	r3, [r1, #13]
	_priq_run_remove(thread_runq(thread), thread);
   15f2e:	f104 0720 	add.w	r7, r4, #32
   15f32:	4638      	mov	r0, r7
   15f34:	f003 f909 	bl	1914a <z_priq_dumb_remove>
	queue_thread(_current);
   15f38:	68a5      	ldr	r5, [r4, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
   15f3a:	7b6b      	ldrb	r3, [r5, #13]
   15f3c:	f063 037f 	orn	r3, r3, #127	; 0x7f
   15f40:	736b      	strb	r3, [r5, #13]
	return list->head == list;
   15f42:	6a24      	ldr	r4, [r4, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   15f44:	42bc      	cmp	r4, r7
   15f46:	d023      	beq.n	15f90 <z_impl_k_yield+0x80>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   15f48:	b16c      	cbz	r4, 15f66 <z_impl_k_yield+0x56>
		if (z_sched_prio_cmp(thread, t) > 0) {
   15f4a:	4621      	mov	r1, r4
   15f4c:	4628      	mov	r0, r5
   15f4e:	f003 f8dd 	bl	1910c <z_sched_prio_cmp>
   15f52:	2800      	cmp	r0, #0
   15f54:	dc16      	bgt.n	15f84 <z_impl_k_yield+0x74>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   15f56:	b134      	cbz	r4, 15f66 <z_impl_k_yield+0x56>
	return (node == list->tail) ? NULL : node->next;
   15f58:	4b0e      	ldr	r3, [pc, #56]	; (15f94 <z_impl_k_yield+0x84>)
   15f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   15f5c:	429c      	cmp	r4, r3
   15f5e:	d002      	beq.n	15f66 <z_impl_k_yield+0x56>
   15f60:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   15f62:	2c00      	cmp	r4, #0
   15f64:	d1f0      	bne.n	15f48 <z_impl_k_yield+0x38>
	sys_dnode_t *const tail = list->tail;
   15f66:	4b0b      	ldr	r3, [pc, #44]	; (15f94 <z_impl_k_yield+0x84>)
   15f68:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
   15f6a:	f103 0120 	add.w	r1, r3, #32
   15f6e:	6029      	str	r1, [r5, #0]
	node->prev = tail;
   15f70:	606a      	str	r2, [r5, #4]
	tail->next = node;
   15f72:	6015      	str	r5, [r2, #0]
	list->tail = node;
   15f74:	625d      	str	r5, [r3, #36]	; 0x24
	update_cache(1);
   15f76:	2001      	movs	r0, #1
   15f78:	f7ff fd40 	bl	159fc <update_cache>
   15f7c:	4630      	mov	r0, r6
   15f7e:	f7fb fd9d 	bl	11abc <arch_swap>
}
   15f82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	sys_dnode_t *const prev = successor->prev;
   15f84:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
   15f86:	606b      	str	r3, [r5, #4]
	node->next = successor;
   15f88:	602c      	str	r4, [r5, #0]
	prev->next = node;
   15f8a:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   15f8c:	6065      	str	r5, [r4, #4]
}
   15f8e:	e7f2      	b.n	15f76 <z_impl_k_yield+0x66>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   15f90:	2400      	movs	r4, #0
   15f92:	e7d9      	b.n	15f48 <z_impl_k_yield+0x38>
   15f94:	20000ea8 	.word	0x20000ea8

00015f98 <z_tick_sleep>:
{
   15f98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (ticks == 0) {
   15f9c:	ea50 0301 	orrs.w	r3, r0, r1
   15fa0:	d038      	beq.n	16014 <z_tick_sleep+0x7c>
   15fa2:	4604      	mov	r4, r0
   15fa4:	460e      	mov	r6, r1
	if (Z_TICK_ABS(ticks) <= 0) {
   15fa6:	f06f 0301 	mvn.w	r3, #1
   15faa:	1a1b      	subs	r3, r3, r0
   15fac:	f04f 32ff 	mov.w	r2, #4294967295
   15fb0:	eb62 0201 	sbc.w	r2, r2, r1
   15fb4:	2b01      	cmp	r3, #1
   15fb6:	f172 0300 	sbcs.w	r3, r2, #0
   15fba:	db2f      	blt.n	1601c <z_tick_sleep+0x84>
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
   15fbc:	f06f 0501 	mvn.w	r5, #1
   15fc0:	1a2d      	subs	r5, r5, r0
   15fc2:	f04f 0320 	mov.w	r3, #32
   15fc6:	f3ef 8811 	mrs	r8, BASEPRI
   15fca:	f383 8812 	msr	BASEPRI_MAX, r3
   15fce:	f3bf 8f6f 	isb	sy
	pending_current = _current;
   15fd2:	4f14      	ldr	r7, [pc, #80]	; (16024 <z_tick_sleep+0x8c>)
   15fd4:	68b8      	ldr	r0, [r7, #8]
   15fd6:	4b14      	ldr	r3, [pc, #80]	; (16028 <z_tick_sleep+0x90>)
   15fd8:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
   15fda:	f7ff fe45 	bl	15c68 <unready_thread>
	z_add_thread_timeout(_current, timeout);
   15fde:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   15fe0:	4622      	mov	r2, r4
   15fe2:	4633      	mov	r3, r6
   15fe4:	4911      	ldr	r1, [pc, #68]	; (1602c <z_tick_sleep+0x94>)
   15fe6:	3018      	adds	r0, #24
   15fe8:	f000 f8ee 	bl	161c8 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
   15fec:	68ba      	ldr	r2, [r7, #8]
	thread->base.thread_state |= _THREAD_SUSPENDED;
   15fee:	7b53      	ldrb	r3, [r2, #13]
   15ff0:	f043 0310 	orr.w	r3, r3, #16
   15ff4:	7353      	strb	r3, [r2, #13]
   15ff6:	4640      	mov	r0, r8
   15ff8:	f7fb fd60 	bl	11abc <arch_swap>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
   15ffc:	f003 f9fa 	bl	193f4 <sys_clock_tick_get_32>
   16000:	1a28      	subs	r0, r5, r0
   16002:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
   16006:	2801      	cmp	r0, #1
   16008:	f173 0300 	sbcs.w	r3, r3, #0
   1600c:	da00      	bge.n	16010 <z_tick_sleep+0x78>
	return 0;
   1600e:	2000      	movs	r0, #0
}
   16010:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	z_impl_k_yield();
   16014:	f7ff ff7c 	bl	15f10 <z_impl_k_yield>
		return 0;
   16018:	2000      	movs	r0, #0
   1601a:	e7f9      	b.n	16010 <z_tick_sleep+0x78>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
   1601c:	f003 f9ea 	bl	193f4 <sys_clock_tick_get_32>
   16020:	1905      	adds	r5, r0, r4
   16022:	e7ce      	b.n	15fc2 <z_tick_sleep+0x2a>
   16024:	20000ea8 	.word	0x20000ea8
   16028:	20000ed4 	.word	0x20000ed4
   1602c:	000191a1 	.word	0x000191a1

00016030 <z_impl_k_sleep>:
{
   16030:	b508      	push	{r3, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   16032:	f1b1 3fff 	cmp.w	r1, #4294967295
   16036:	bf08      	it	eq
   16038:	f1b0 3fff 	cmpeq.w	r0, #4294967295
   1603c:	d01a      	beq.n	16074 <z_impl_k_sleep+0x44>
	ticks = z_tick_sleep(ticks);
   1603e:	f7ff ffab 	bl	15f98 <z_tick_sleep>
   16042:	4684      	mov	ip, r0
	int32_t ret = k_ticks_to_ms_floor64(ticks);
   16044:	17c2      	asrs	r2, r0, #31
			return ((t * to_hz + off) / from_hz);
   16046:	0151      	lsls	r1, r2, #5
   16048:	ea41 61d0 	orr.w	r1, r1, r0, lsr #27
   1604c:	0143      	lsls	r3, r0, #5
   1604e:	1a1b      	subs	r3, r3, r0
   16050:	eb61 0102 	sbc.w	r1, r1, r2
   16054:	0088      	lsls	r0, r1, #2
   16056:	ea40 7093 	orr.w	r0, r0, r3, lsr #30
   1605a:	009b      	lsls	r3, r3, #2
   1605c:	eb13 030c 	adds.w	r3, r3, ip
   16060:	eb42 0000 	adc.w	r0, r2, r0
   16064:	00c0      	lsls	r0, r0, #3
   16066:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
   1606a:	f3c3 3310 	ubfx	r3, r3, #12, #17
   1606e:	ea43 4040 	orr.w	r0, r3, r0, lsl #17
}
   16072:	bd08      	pop	{r3, pc}
		k_thread_suspend(_current);
   16074:	4b03      	ldr	r3, [pc, #12]	; (16084 <z_impl_k_sleep+0x54>)
   16076:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   16078:	f7ff fe86 	bl	15d88 <z_impl_k_thread_suspend>
		return (int32_t) K_TICKS_FOREVER;
   1607c:	f04f 30ff 	mov.w	r0, #4294967295
   16080:	e7f7      	b.n	16072 <z_impl_k_sleep+0x42>
   16082:	bf00      	nop
   16084:	20000ea8 	.word	0x20000ea8

00016088 <z_impl_z_current_get>:
}
   16088:	4b01      	ldr	r3, [pc, #4]	; (16090 <z_impl_z_current_get+0x8>)
   1608a:	6898      	ldr	r0, [r3, #8]
   1608c:	4770      	bx	lr
   1608e:	bf00      	nop
   16090:	20000ea8 	.word	0x20000ea8

00016094 <z_thread_abort>:

void z_thread_abort(struct k_thread *thread)
{
   16094:	b538      	push	{r3, r4, r5, lr}
   16096:	f04f 0320 	mov.w	r3, #32
   1609a:	f3ef 8511 	mrs	r5, BASEPRI
   1609e:	f383 8812 	msr	BASEPRI_MAX, r3
   160a2:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.user_options & K_ESSENTIAL) != 0) {
   160a6:	7b03      	ldrb	r3, [r0, #12]
   160a8:	f013 0f01 	tst.w	r3, #1
   160ac:	d109      	bne.n	160c2 <z_thread_abort+0x2e>
   160ae:	4604      	mov	r4, r0
		__ASSERT(false, "aborting essential thread %p", thread);
		k_panic();
		return;
	}

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
   160b0:	7b43      	ldrb	r3, [r0, #13]
   160b2:	f013 0f08 	tst.w	r3, #8
   160b6:	d00f      	beq.n	160d8 <z_thread_abort+0x44>
	__asm__ volatile(
   160b8:	f385 8811 	msr	BASEPRI, r5
   160bc:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&sched_spinlock, key);
		return;
   160c0:	e009      	b.n	160d6 <z_thread_abort+0x42>
   160c2:	f385 8811 	msr	BASEPRI, r5
   160c6:	f3bf 8f6f 	isb	sy
		k_panic();
   160ca:	4040      	eors	r0, r0
   160cc:	f380 8811 	msr	BASEPRI, r0
   160d0:	f04f 0004 	mov.w	r0, #4
   160d4:	df02      	svc	2
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
   160d6:	bd38      	pop	{r3, r4, r5, pc}
	end_thread(thread);
   160d8:	f7ff fec0 	bl	15e5c <end_thread>
	if (thread == _current && !arch_is_in_isr()) {
   160dc:	4b08      	ldr	r3, [pc, #32]	; (16100 <z_thread_abort+0x6c>)
   160de:	689b      	ldr	r3, [r3, #8]
   160e0:	42a3      	cmp	r3, r4
   160e2:	d004      	beq.n	160ee <z_thread_abort+0x5a>
   160e4:	f385 8811 	msr	BASEPRI, r5
   160e8:	f3bf 8f6f 	isb	sy
   160ec:	e7f3      	b.n	160d6 <z_thread_abort+0x42>
   160ee:	f3ef 8305 	mrs	r3, IPSR
   160f2:	2b00      	cmp	r3, #0
   160f4:	d1f6      	bne.n	160e4 <z_thread_abort+0x50>
   160f6:	4628      	mov	r0, r5
   160f8:	f7fb fce0 	bl	11abc <arch_swap>
	return ret;
   160fc:	e7f2      	b.n	160e4 <z_thread_abort+0x50>
   160fe:	bf00      	nop
   16100:	20000ea8 	.word	0x20000ea8

00016104 <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
   16104:	b508      	push	{r3, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
   16106:	4806      	ldr	r0, [pc, #24]	; (16120 <z_data_copy+0x1c>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
   16108:	4a06      	ldr	r2, [pc, #24]	; (16124 <z_data_copy+0x20>)
   1610a:	1a12      	subs	r2, r2, r0
   1610c:	4906      	ldr	r1, [pc, #24]	; (16128 <z_data_copy+0x24>)
   1610e:	f002 ff4b 	bl	18fa8 <z_early_memcpy>
#ifdef CONFIG_ARCH_HAS_RAMFUNC_SUPPORT
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
   16112:	4a06      	ldr	r2, [pc, #24]	; (1612c <z_data_copy+0x28>)
   16114:	4906      	ldr	r1, [pc, #24]	; (16130 <z_data_copy+0x2c>)
   16116:	4807      	ldr	r0, [pc, #28]	; (16134 <z_data_copy+0x30>)
   16118:	f002 ff46 	bl	18fa8 <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   1611c:	bd08      	pop	{r3, pc}
   1611e:	bf00      	nop
   16120:	20000000 	.word	0x20000000
   16124:	2000021c 	.word	0x2000021c
   16128:	00019f8c 	.word	0x00019f8c
   1612c:	00000000 	.word	0x00000000
   16130:	00019f8c 	.word	0x00019f8c
   16134:	20000000 	.word	0x20000000

00016138 <first>:
	return list->head == list;
   16138:	4b03      	ldr	r3, [pc, #12]	; (16148 <first+0x10>)
   1613a:	6818      	ldr	r0, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1613c:	4298      	cmp	r0, r3
   1613e:	d000      	beq.n	16142 <first+0xa>
static struct _timeout *first(void)
{
	sys_dnode_t *t = sys_dlist_peek_head(&timeout_list);

	return t == NULL ? NULL : CONTAINER_OF(t, struct _timeout, node);
}
   16140:	4770      	bx	lr
   16142:	2000      	movs	r0, #0
	return t == NULL ? NULL : CONTAINER_OF(t, struct _timeout, node);
   16144:	e7fc      	b.n	16140 <first+0x8>
   16146:	bf00      	nop
   16148:	20000134 	.word	0x20000134

0001614c <next>:
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1614c:	b130      	cbz	r0, 1615c <next+0x10>
	return (node == list->tail) ? NULL : node->next;
   1614e:	4a04      	ldr	r2, [pc, #16]	; (16160 <next+0x14>)
   16150:	6852      	ldr	r2, [r2, #4]
   16152:	4290      	cmp	r0, r2
   16154:	d001      	beq.n	1615a <next+0xe>
   16156:	6800      	ldr	r0, [r0, #0]
   16158:	4770      	bx	lr
   1615a:	2000      	movs	r0, #0
static struct _timeout *next(struct _timeout *t)
{
	sys_dnode_t *n = sys_dlist_peek_next(&timeout_list, &t->node);

	return n == NULL ? NULL : CONTAINER_OF(n, struct _timeout, node);
}
   1615c:	4770      	bx	lr
   1615e:	bf00      	nop
   16160:	20000134 	.word	0x20000134

00016164 <elapsed>:

	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
   16164:	b508      	push	{r3, lr}
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
   16166:	4b04      	ldr	r3, [pc, #16]	; (16178 <elapsed+0x14>)
   16168:	681b      	ldr	r3, [r3, #0]
   1616a:	b10b      	cbz	r3, 16170 <elapsed+0xc>
   1616c:	2000      	movs	r0, #0
}
   1616e:	bd08      	pop	{r3, pc}
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
   16170:	f7fd fad8 	bl	13724 <sys_clock_elapsed>
   16174:	e7fb      	b.n	1616e <elapsed+0xa>
   16176:	bf00      	nop
   16178:	20000ee0 	.word	0x20000ee0

0001617c <next_timeout>:

static int32_t next_timeout(void)
{
   1617c:	b510      	push	{r4, lr}
	struct _timeout *to = first();
   1617e:	f7ff ffdb 	bl	16138 <first>
   16182:	4604      	mov	r4, r0
	int32_t ticks_elapsed = elapsed();
   16184:	f7ff ffee 	bl	16164 <elapsed>
	int32_t ret;

	if ((to == NULL) ||
   16188:	b17c      	cbz	r4, 161aa <next_timeout+0x2e>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
   1618a:	6923      	ldr	r3, [r4, #16]
   1618c:	6962      	ldr	r2, [r4, #20]
   1618e:	1a1b      	subs	r3, r3, r0
   16190:	eb62 70e0 	sbc.w	r0, r2, r0, asr #31
	if ((to == NULL) ||
   16194:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   16198:	f170 0200 	sbcs.w	r2, r0, #0
   1619c:	da08      	bge.n	161b0 <next_timeout+0x34>
		ret = MAX_WAIT;
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
   1619e:	2800      	cmp	r0, #0
   161a0:	db01      	blt.n	161a6 <next_timeout+0x2a>
   161a2:	4618      	mov	r0, r3
   161a4:	e006      	b.n	161b4 <next_timeout+0x38>
   161a6:	2300      	movs	r3, #0
   161a8:	e7fb      	b.n	161a2 <next_timeout+0x26>
		ret = MAX_WAIT;
   161aa:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   161ae:	e001      	b.n	161b4 <next_timeout+0x38>
   161b0:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
	}

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
   161b4:	4b03      	ldr	r3, [pc, #12]	; (161c4 <next_timeout+0x48>)
   161b6:	691b      	ldr	r3, [r3, #16]
   161b8:	b113      	cbz	r3, 161c0 <next_timeout+0x44>
   161ba:	4283      	cmp	r3, r0
   161bc:	da00      	bge.n	161c0 <next_timeout+0x44>
		ret = _current_cpu->slice_ticks;
   161be:	4618      	mov	r0, r3
	}
#endif
	return ret;
}
   161c0:	bd10      	pop	{r4, pc}
   161c2:	bf00      	nop
   161c4:	20000ea8 	.word	0x20000ea8

000161c8 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   161c8:	f1b3 3fff 	cmp.w	r3, #4294967295
   161cc:	bf08      	it	eq
   161ce:	f1b2 3fff 	cmpeq.w	r2, #4294967295
   161d2:	d07d      	beq.n	162d0 <z_add_timeout+0x108>
{
   161d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   161d8:	4604      	mov	r4, r0
   161da:	4692      	mov	sl, r2
   161dc:	461d      	mov	r5, r3
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
   161de:	6081      	str	r1, [r0, #8]

	LOCKED(&timeout_lock) {
   161e0:	2300      	movs	r3, #0
	__asm__ volatile(
   161e2:	f04f 0220 	mov.w	r2, #32
   161e6:	f3ef 8711 	mrs	r7, BASEPRI
   161ea:	f382 8812 	msr	BASEPRI_MAX, r2
   161ee:	f3bf 8f6f 	isb	sy
   161f2:	e021      	b.n	16238 <z_add_timeout+0x70>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;

			to->dticks = MAX(1, ticks);
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
   161f4:	f11a 0801 	adds.w	r8, sl, #1
   161f8:	f145 0900 	adc.w	r9, r5, #0
   161fc:	f7ff ffb2 	bl	16164 <elapsed>
   16200:	eb18 0300 	adds.w	r3, r8, r0
   16204:	eb49 70e0 	adc.w	r0, r9, r0, asr #31
   16208:	6123      	str	r3, [r4, #16]
   1620a:	6160      	str	r0, [r4, #20]
   1620c:	e036      	b.n	1627c <z_add_timeout+0xb4>
		}

		for (t = first(); t != NULL; t = next(t)) {
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
   1620e:	1a51      	subs	r1, r2, r1
   16210:	eb66 0303 	sbc.w	r3, r6, r3
   16214:	6101      	str	r1, [r0, #16]
   16216:	6143      	str	r3, [r0, #20]
	sys_dnode_t *const prev = successor->prev;
   16218:	6843      	ldr	r3, [r0, #4]
	node->prev = prev;
   1621a:	6063      	str	r3, [r4, #4]
	node->next = successor;
   1621c:	6020      	str	r0, [r4, #0]
	prev->next = node;
   1621e:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   16220:	6044      	str	r4, [r0, #4]
				break;
			}
			to->dticks -= t->dticks;
		}

		if (t == NULL) {
   16222:	2800      	cmp	r0, #0
   16224:	d03e      	beq.n	162a4 <z_add_timeout+0xdc>
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
   16226:	f7ff ff87 	bl	16138 <first>
   1622a:	4284      	cmp	r4, r0
   1622c:	d041      	beq.n	162b2 <z_add_timeout+0xea>
	__asm__ volatile(
   1622e:	f387 8811 	msr	BASEPRI, r7
   16232:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
   16236:	2301      	movs	r3, #1
   16238:	2b00      	cmp	r3, #0
   1623a:	d147      	bne.n	162cc <z_add_timeout+0x104>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
   1623c:	4653      	mov	r3, sl
   1623e:	f06f 0101 	mvn.w	r1, #1
   16242:	ebb1 010a 	subs.w	r1, r1, sl
   16246:	f04f 30ff 	mov.w	r0, #4294967295
   1624a:	eb60 0205 	sbc.w	r2, r0, r5
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
   1624e:	2a00      	cmp	r2, #0
   16250:	dbd0      	blt.n	161f4 <z_add_timeout+0x2c>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
   16252:	4a20      	ldr	r2, [pc, #128]	; (162d4 <z_add_timeout+0x10c>)
   16254:	6811      	ldr	r1, [r2, #0]
   16256:	6852      	ldr	r2, [r2, #4]
   16258:	185b      	adds	r3, r3, r1
   1625a:	eb42 0205 	adc.w	r2, r2, r5
   1625e:	f06f 0101 	mvn.w	r1, #1
   16262:	1acb      	subs	r3, r1, r3
   16264:	eb60 0202 	sbc.w	r2, r0, r2
			to->dticks = MAX(1, ticks);
   16268:	4618      	mov	r0, r3
   1626a:	4611      	mov	r1, r2
   1626c:	2b01      	cmp	r3, #1
   1626e:	f172 0300 	sbcs.w	r3, r2, #0
   16272:	da01      	bge.n	16278 <z_add_timeout+0xb0>
   16274:	2001      	movs	r0, #1
   16276:	2100      	movs	r1, #0
   16278:	6120      	str	r0, [r4, #16]
   1627a:	6161      	str	r1, [r4, #20]
		for (t = first(); t != NULL; t = next(t)) {
   1627c:	f7ff ff5c 	bl	16138 <first>
   16280:	2800      	cmp	r0, #0
   16282:	d0ce      	beq.n	16222 <z_add_timeout+0x5a>
			if (t->dticks > to->dticks) {
   16284:	6902      	ldr	r2, [r0, #16]
   16286:	6946      	ldr	r6, [r0, #20]
   16288:	6921      	ldr	r1, [r4, #16]
   1628a:	6963      	ldr	r3, [r4, #20]
   1628c:	4291      	cmp	r1, r2
   1628e:	eb73 0c06 	sbcs.w	ip, r3, r6
   16292:	dbbc      	blt.n	1620e <z_add_timeout+0x46>
			to->dticks -= t->dticks;
   16294:	1a89      	subs	r1, r1, r2
   16296:	eb63 0306 	sbc.w	r3, r3, r6
   1629a:	6121      	str	r1, [r4, #16]
   1629c:	6163      	str	r3, [r4, #20]
		for (t = first(); t != NULL; t = next(t)) {
   1629e:	f7ff ff55 	bl	1614c <next>
   162a2:	e7ed      	b.n	16280 <z_add_timeout+0xb8>
	sys_dnode_t *const tail = list->tail;
   162a4:	4b0c      	ldr	r3, [pc, #48]	; (162d8 <z_add_timeout+0x110>)
   162a6:	685a      	ldr	r2, [r3, #4]
	node->next = list;
   162a8:	6023      	str	r3, [r4, #0]
	node->prev = tail;
   162aa:	6062      	str	r2, [r4, #4]
	tail->next = node;
   162ac:	6014      	str	r4, [r2, #0]
	list->tail = node;
   162ae:	605c      	str	r4, [r3, #4]
}
   162b0:	e7b9      	b.n	16226 <z_add_timeout+0x5e>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
   162b2:	f7ff ff63 	bl	1617c <next_timeout>

			if (next_time == 0 ||
   162b6:	4603      	mov	r3, r0
   162b8:	b118      	cbz	r0, 162c2 <z_add_timeout+0xfa>
			    _current_cpu->slice_ticks != next_time) {
   162ba:	4a08      	ldr	r2, [pc, #32]	; (162dc <z_add_timeout+0x114>)
   162bc:	6912      	ldr	r2, [r2, #16]
			if (next_time == 0 ||
   162be:	4282      	cmp	r2, r0
   162c0:	d0b5      	beq.n	1622e <z_add_timeout+0x66>
				sys_clock_set_timeout(next_time, false);
   162c2:	2100      	movs	r1, #0
   162c4:	4618      	mov	r0, r3
   162c6:	f7fd f9fb 	bl	136c0 <sys_clock_set_timeout>
   162ca:	e7b0      	b.n	1622e <z_add_timeout+0x66>
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
   162cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   162d0:	4770      	bx	lr
   162d2:	bf00      	nop
   162d4:	200003a0 	.word	0x200003a0
   162d8:	20000134 	.word	0x20000134
   162dc:	20000ea8 	.word	0x20000ea8

000162e0 <sys_clock_announce>:
		}
	}
}

void sys_clock_announce(int32_t ticks)
{
   162e0:	b570      	push	{r4, r5, r6, lr}
   162e2:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
   162e4:	f7ff fc0a 	bl	15afc <z_time_slice>
	__asm__ volatile(
   162e8:	f04f 0320 	mov.w	r3, #32
   162ec:	f3ef 8611 	mrs	r6, BASEPRI
   162f0:	f383 8812 	msr	BASEPRI_MAX, r3
   162f4:	f3bf 8f6f 	isb	sy
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
   162f8:	4b28      	ldr	r3, [pc, #160]	; (1639c <sys_clock_announce+0xbc>)
   162fa:	601c      	str	r4, [r3, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
   162fc:	e021      	b.n	16342 <sys_clock_announce+0x62>
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
   162fe:	4a28      	ldr	r2, [pc, #160]	; (163a0 <sys_clock_announce+0xc0>)
   16300:	6813      	ldr	r3, [r2, #0]
   16302:	6851      	ldr	r1, [r2, #4]
   16304:	195b      	adds	r3, r3, r5
   16306:	eb41 71e5 	adc.w	r1, r1, r5, asr #31
   1630a:	6013      	str	r3, [r2, #0]
   1630c:	6051      	str	r1, [r2, #4]
		t->dticks = 0;
   1630e:	2200      	movs	r2, #0
   16310:	2300      	movs	r3, #0
   16312:	e9c4 2304 	strd	r2, r3, [r4, #16]
		remove_timeout(t);
   16316:	4620      	mov	r0, r4
   16318:	f002 fff5 	bl	19306 <remove_timeout>
	__asm__ volatile(
   1631c:	f386 8811 	msr	BASEPRI, r6
   16320:	f3bf 8f6f 	isb	sy

		k_spin_unlock(&timeout_lock, key);
		t->fn(t);
   16324:	68a3      	ldr	r3, [r4, #8]
   16326:	4620      	mov	r0, r4
   16328:	4798      	blx	r3
	__asm__ volatile(
   1632a:	f04f 0320 	mov.w	r3, #32
   1632e:	f3ef 8611 	mrs	r6, BASEPRI
   16332:	f383 8812 	msr	BASEPRI_MAX, r3
   16336:	f3bf 8f6f 	isb	sy
		key = k_spin_lock(&timeout_lock);
		announce_remaining -= dt;
   1633a:	4a18      	ldr	r2, [pc, #96]	; (1639c <sys_clock_announce+0xbc>)
   1633c:	6813      	ldr	r3, [r2, #0]
   1633e:	1b5b      	subs	r3, r3, r5
   16340:	6013      	str	r3, [r2, #0]
	while (first() != NULL && first()->dticks <= announce_remaining) {
   16342:	f7ff fef9 	bl	16138 <first>
   16346:	4604      	mov	r4, r0
   16348:	b140      	cbz	r0, 1635c <sys_clock_announce+0x7c>
   1634a:	6905      	ldr	r5, [r0, #16]
   1634c:	6942      	ldr	r2, [r0, #20]
   1634e:	4b13      	ldr	r3, [pc, #76]	; (1639c <sys_clock_announce+0xbc>)
   16350:	681b      	ldr	r3, [r3, #0]
   16352:	17d9      	asrs	r1, r3, #31
   16354:	42ab      	cmp	r3, r5
   16356:	eb71 0302 	sbcs.w	r3, r1, r2
   1635a:	dad0      	bge.n	162fe <sys_clock_announce+0x1e>
	}

	if (first() != NULL) {
   1635c:	b144      	cbz	r4, 16370 <sys_clock_announce+0x90>
		first()->dticks -= announce_remaining;
   1635e:	4b0f      	ldr	r3, [pc, #60]	; (1639c <sys_clock_announce+0xbc>)
   16360:	6819      	ldr	r1, [r3, #0]
   16362:	6923      	ldr	r3, [r4, #16]
   16364:	6962      	ldr	r2, [r4, #20]
   16366:	1a5b      	subs	r3, r3, r1
   16368:	eb62 72e1 	sbc.w	r2, r2, r1, asr #31
   1636c:	6123      	str	r3, [r4, #16]
   1636e:	6162      	str	r2, [r4, #20]
	}

	curr_tick += announce_remaining;
   16370:	4a0b      	ldr	r2, [pc, #44]	; (163a0 <sys_clock_announce+0xc0>)
   16372:	4d0a      	ldr	r5, [pc, #40]	; (1639c <sys_clock_announce+0xbc>)
   16374:	6828      	ldr	r0, [r5, #0]
   16376:	6813      	ldr	r3, [r2, #0]
   16378:	6851      	ldr	r1, [r2, #4]
   1637a:	181b      	adds	r3, r3, r0
   1637c:	eb41 71e0 	adc.w	r1, r1, r0, asr #31
   16380:	6013      	str	r3, [r2, #0]
   16382:	6051      	str	r1, [r2, #4]
	announce_remaining = 0;
   16384:	2400      	movs	r4, #0
   16386:	602c      	str	r4, [r5, #0]

	sys_clock_set_timeout(next_timeout(), false);
   16388:	f7ff fef8 	bl	1617c <next_timeout>
   1638c:	4621      	mov	r1, r4
   1638e:	f7fd f997 	bl	136c0 <sys_clock_set_timeout>
	__asm__ volatile(
   16392:	f386 8811 	msr	BASEPRI, r6
   16396:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
   1639a:	bd70      	pop	{r4, r5, r6, pc}
   1639c:	20000ee0 	.word	0x20000ee0
   163a0:	200003a0 	.word	0x200003a0

000163a4 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
   163a4:	b510      	push	{r4, lr}
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
   163a6:	2200      	movs	r2, #0
	__asm__ volatile(
   163a8:	f04f 0320 	mov.w	r3, #32
   163ac:	f3ef 8411 	mrs	r4, BASEPRI
   163b0:	f383 8812 	msr	BASEPRI_MAX, r3
   163b4:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;
   163b8:	4613      	mov	r3, r2
   163ba:	4611      	mov	r1, r2
   163bc:	e00c      	b.n	163d8 <sys_clock_tick_get+0x34>
		t = curr_tick + elapsed();
   163be:	f7ff fed1 	bl	16164 <elapsed>
   163c2:	4a07      	ldr	r2, [pc, #28]	; (163e0 <sys_clock_tick_get+0x3c>)
   163c4:	6813      	ldr	r3, [r2, #0]
   163c6:	6851      	ldr	r1, [r2, #4]
   163c8:	18c3      	adds	r3, r0, r3
   163ca:	eb41 71e0 	adc.w	r1, r1, r0, asr #31
	__asm__ volatile(
   163ce:	f384 8811 	msr	BASEPRI, r4
   163d2:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
   163d6:	2201      	movs	r2, #1
   163d8:	2a00      	cmp	r2, #0
   163da:	d0f0      	beq.n	163be <sys_clock_tick_get+0x1a>
	}
	return t;
}
   163dc:	4618      	mov	r0, r3
   163de:	bd10      	pop	{r4, pc}
   163e0:	200003a0 	.word	0x200003a0

000163e4 <k_aligned_alloc>:

K_HEAP_DEFINE(_system_heap, CONFIG_HEAP_MEM_POOL_SIZE);
#define _SYSTEM_HEAP (&_system_heap)

void *k_aligned_alloc(size_t align, size_t size)
{
   163e4:	b508      	push	{r3, lr}
   163e6:	460a      	mov	r2, r1
	__ASSERT((align & (align - 1)) == 0,
		"align must be a power of 2");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_heap_sys, k_aligned_alloc, _SYSTEM_HEAP);

	void *ret = z_heap_aligned_alloc(_SYSTEM_HEAP, align, size);
   163e8:	4601      	mov	r1, r0
   163ea:	4802      	ldr	r0, [pc, #8]	; (163f4 <k_aligned_alloc+0x10>)
   163ec:	f003 f838 	bl	19460 <z_heap_aligned_alloc>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap_sys, k_aligned_alloc, _SYSTEM_HEAP, ret);

	return ret;
}
   163f0:	bd08      	pop	{r3, pc}
   163f2:	bf00      	nop
   163f4:	200001b8 	.word	0x200001b8

000163f8 <k_thread_system_pool_assign>:
	return ret;
}

void k_thread_system_pool_assign(struct k_thread *thread)
{
	thread->resource_pool = _SYSTEM_HEAP;
   163f8:	4b01      	ldr	r3, [pc, #4]	; (16400 <k_thread_system_pool_assign+0x8>)
   163fa:	f8c0 30a4 	str.w	r3, [r0, #164]	; 0xa4
}
   163fe:	4770      	bx	lr
   16400:	200001b8 	.word	0x200001b8

00016404 <boot_banner>:
#define BOOT_DELAY_BANNER ""
#endif

#if defined(CONFIG_BOOT_DELAY) || CONFIG_BOOT_DELAY > 0
void boot_banner(void)
{
   16404:	b508      	push	{r3, lr}
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
   16406:	4a03      	ldr	r2, [pc, #12]	; (16414 <boot_banner+0x10>)
   16408:	4903      	ldr	r1, [pc, #12]	; (16418 <boot_banner+0x14>)
   1640a:	4804      	ldr	r0, [pc, #16]	; (1641c <boot_banner+0x18>)
   1640c:	f000 fee3 	bl	171d6 <printk>
#else
	printk("*** Booting Zephyr OS version %s %s ***\n",
	       KERNEL_VERSION_STRING, BOOT_DELAY_BANNER);
#endif
#endif
}
   16410:	bd08      	pop	{r3, pc}
   16412:	bf00      	nop
   16414:	00019a10 	.word	0x00019a10
   16418:	00019ecc 	.word	0x00019ecc
   1641c:	00019edc 	.word	0x00019edc

00016420 <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(const struct device *unused)
{
   16420:	b510      	push	{r4, lr}
	ARG_UNUSED(unused);
	STRUCT_SECTION_FOREACH(k_heap, h) {
   16422:	4c06      	ldr	r4, [pc, #24]	; (1643c <statics_init+0x1c>)
   16424:	e005      	b.n	16432 <statics_init+0x12>
		}

		if (do_clear)
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */
		{
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
   16426:	68a2      	ldr	r2, [r4, #8]
   16428:	6861      	ldr	r1, [r4, #4]
   1642a:	4620      	mov	r0, r4
   1642c:	f003 f837 	bl	1949e <k_heap_init>
	STRUCT_SECTION_FOREACH(k_heap, h) {
   16430:	3414      	adds	r4, #20
   16432:	4b03      	ldr	r3, [pc, #12]	; (16440 <statics_init+0x20>)
   16434:	429c      	cmp	r4, r3
   16436:	d3f6      	bcc.n	16426 <statics_init+0x6>
		}
	}
	return 0;
}
   16438:	2000      	movs	r0, #0
   1643a:	bd10      	pop	{r4, pc}
   1643c:	200001b8 	.word	0x200001b8
   16440:	200001cc 	.word	0x200001cc

00016444 <nrf_cc3xx_platform_init_no_rng>:
   16444:	b510      	push	{r4, lr}
   16446:	4c0a      	ldr	r4, [pc, #40]	; (16470 <nrf_cc3xx_platform_init_no_rng+0x2c>)
   16448:	6823      	ldr	r3, [r4, #0]
   1644a:	b11b      	cbz	r3, 16454 <nrf_cc3xx_platform_init_no_rng+0x10>
   1644c:	2301      	movs	r3, #1
   1644e:	6023      	str	r3, [r4, #0]
   16450:	2000      	movs	r0, #0
   16452:	bd10      	pop	{r4, pc}
   16454:	f000 f8ce 	bl	165f4 <CC_LibInitNoRng>
   16458:	2800      	cmp	r0, #0
   1645a:	d0f7      	beq.n	1644c <nrf_cc3xx_platform_init_no_rng+0x8>
   1645c:	3801      	subs	r0, #1
   1645e:	2806      	cmp	r0, #6
   16460:	d803      	bhi.n	1646a <nrf_cc3xx_platform_init_no_rng+0x26>
   16462:	4b04      	ldr	r3, [pc, #16]	; (16474 <nrf_cc3xx_platform_init_no_rng+0x30>)
   16464:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   16468:	bd10      	pop	{r4, pc}
   1646a:	4803      	ldr	r0, [pc, #12]	; (16478 <nrf_cc3xx_platform_init_no_rng+0x34>)
   1646c:	bd10      	pop	{r4, pc}
   1646e:	bf00      	nop
   16470:	20000ee4 	.word	0x20000ee4
   16474:	00019f04 	.word	0x00019f04
   16478:	ffff8ffe 	.word	0xffff8ffe

0001647c <nrf_cc3xx_platform_abort>:
   1647c:	f3bf 8f4f 	dsb	sy
   16480:	4905      	ldr	r1, [pc, #20]	; (16498 <nrf_cc3xx_platform_abort+0x1c>)
   16482:	4b06      	ldr	r3, [pc, #24]	; (1649c <nrf_cc3xx_platform_abort+0x20>)
   16484:	68ca      	ldr	r2, [r1, #12]
   16486:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   1648a:	4313      	orrs	r3, r2
   1648c:	60cb      	str	r3, [r1, #12]
   1648e:	f3bf 8f4f 	dsb	sy
   16492:	bf00      	nop
   16494:	e7fd      	b.n	16492 <nrf_cc3xx_platform_abort+0x16>
   16496:	bf00      	nop
   16498:	e000ed00 	.word	0xe000ed00
   1649c:	05fa0004 	.word	0x05fa0004

000164a0 <CC_PalAbort>:
   164a0:	b410      	push	{r4}
   164a2:	4b09      	ldr	r3, [pc, #36]	; (164c8 <CC_PalAbort+0x28>)
   164a4:	4909      	ldr	r1, [pc, #36]	; (164cc <CC_PalAbort+0x2c>)
   164a6:	4c0a      	ldr	r4, [pc, #40]	; (164d0 <CC_PalAbort+0x30>)
   164a8:	f04f 32fe 	mov.w	r2, #4278124286	; 0xfefefefe
   164ac:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
   164b0:	6849      	ldr	r1, [r1, #4]
   164b2:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
   164b6:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
   164ba:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
   164be:	2300      	movs	r3, #0
   164c0:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
   164c4:	bc10      	pop	{r4}
   164c6:	4708      	bx	r1
   164c8:	5002b000 	.word	0x5002b000
   164cc:	2000013c 	.word	0x2000013c
   164d0:	5002a000 	.word	0x5002a000

000164d4 <nrf_cc3xx_platform_set_abort>:
   164d4:	e9d0 1200 	ldrd	r1, r2, [r0]
   164d8:	4b01      	ldr	r3, [pc, #4]	; (164e0 <nrf_cc3xx_platform_set_abort+0xc>)
   164da:	e9c3 1200 	strd	r1, r2, [r3]
   164de:	4770      	bx	lr
   164e0:	2000013c 	.word	0x2000013c

000164e4 <mutex_free>:
   164e4:	b510      	push	{r4, lr}
   164e6:	4604      	mov	r4, r0
   164e8:	b130      	cbz	r0, 164f8 <mutex_free+0x14>
   164ea:	6863      	ldr	r3, [r4, #4]
   164ec:	06db      	lsls	r3, r3, #27
   164ee:	d502      	bpl.n	164f6 <mutex_free+0x12>
   164f0:	2300      	movs	r3, #0
   164f2:	6023      	str	r3, [r4, #0]
   164f4:	6063      	str	r3, [r4, #4]
   164f6:	bd10      	pop	{r4, pc}
   164f8:	4b02      	ldr	r3, [pc, #8]	; (16504 <mutex_free+0x20>)
   164fa:	4803      	ldr	r0, [pc, #12]	; (16508 <mutex_free+0x24>)
   164fc:	685b      	ldr	r3, [r3, #4]
   164fe:	4798      	blx	r3
   16500:	e7f3      	b.n	164ea <mutex_free+0x6>
   16502:	bf00      	nop
   16504:	2000013c 	.word	0x2000013c
   16508:	00019f20 	.word	0x00019f20

0001650c <mutex_lock>:
   1650c:	b1b0      	cbz	r0, 1653c <mutex_lock+0x30>
   1650e:	6843      	ldr	r3, [r0, #4]
   16510:	b193      	cbz	r3, 16538 <mutex_lock+0x2c>
   16512:	06db      	lsls	r3, r3, #27
   16514:	d50e      	bpl.n	16534 <mutex_lock+0x28>
   16516:	2301      	movs	r3, #1
   16518:	e850 2f00 	ldrex	r2, [r0]
   1651c:	4619      	mov	r1, r3
   1651e:	e840 1c00 	strex	ip, r1, [r0]
   16522:	f09c 0f00 	teq	ip, #0
   16526:	d1f7      	bne.n	16518 <mutex_lock+0xc>
   16528:	2a01      	cmp	r2, #1
   1652a:	d0f5      	beq.n	16518 <mutex_lock+0xc>
   1652c:	f3bf 8f5f 	dmb	sy
   16530:	2000      	movs	r0, #0
   16532:	4770      	bx	lr
   16534:	4803      	ldr	r0, [pc, #12]	; (16544 <mutex_lock+0x38>)
   16536:	4770      	bx	lr
   16538:	4803      	ldr	r0, [pc, #12]	; (16548 <mutex_lock+0x3c>)
   1653a:	4770      	bx	lr
   1653c:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
   16540:	4770      	bx	lr
   16542:	bf00      	nop
   16544:	ffff8fe9 	.word	0xffff8fe9
   16548:	ffff8fea 	.word	0xffff8fea

0001654c <mutex_unlock>:
   1654c:	b168      	cbz	r0, 1656a <mutex_unlock+0x1e>
   1654e:	6843      	ldr	r3, [r0, #4]
   16550:	b13b      	cbz	r3, 16562 <mutex_unlock+0x16>
   16552:	06db      	lsls	r3, r3, #27
   16554:	d507      	bpl.n	16566 <mutex_unlock+0x1a>
   16556:	f3bf 8f5f 	dmb	sy
   1655a:	2300      	movs	r3, #0
   1655c:	6003      	str	r3, [r0, #0]
   1655e:	4618      	mov	r0, r3
   16560:	4770      	bx	lr
   16562:	4803      	ldr	r0, [pc, #12]	; (16570 <mutex_unlock+0x24>)
   16564:	4770      	bx	lr
   16566:	4803      	ldr	r0, [pc, #12]	; (16574 <mutex_unlock+0x28>)
   16568:	4770      	bx	lr
   1656a:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
   1656e:	4770      	bx	lr
   16570:	ffff8fea 	.word	0xffff8fea
   16574:	ffff8fe9 	.word	0xffff8fe9

00016578 <mutex_init>:
   16578:	b510      	push	{r4, lr}
   1657a:	4604      	mov	r4, r0
   1657c:	b120      	cbz	r0, 16588 <mutex_init+0x10>
   1657e:	2200      	movs	r2, #0
   16580:	2311      	movs	r3, #17
   16582:	6022      	str	r2, [r4, #0]
   16584:	6063      	str	r3, [r4, #4]
   16586:	bd10      	pop	{r4, pc}
   16588:	4801      	ldr	r0, [pc, #4]	; (16590 <mutex_init+0x18>)
   1658a:	f7ff ff89 	bl	164a0 <CC_PalAbort>
   1658e:	e7f6      	b.n	1657e <mutex_init+0x6>
   16590:	00019f48 	.word	0x00019f48

00016594 <nrf_cc3xx_platform_set_mutexes>:
   16594:	b570      	push	{r4, r5, r6, lr}
   16596:	e9d0 2300 	ldrd	r2, r3, [r0]
   1659a:	4c13      	ldr	r4, [pc, #76]	; (165e8 <nrf_cc3xx_platform_set_mutexes+0x54>)
   1659c:	4d13      	ldr	r5, [pc, #76]	; (165ec <nrf_cc3xx_platform_set_mutexes+0x58>)
   1659e:	6063      	str	r3, [r4, #4]
   165a0:	e9d0 3002 	ldrd	r3, r0, [r0, #8]
   165a4:	e9c4 3002 	strd	r3, r0, [r4, #8]
   165a8:	6022      	str	r2, [r4, #0]
   165aa:	4b11      	ldr	r3, [pc, #68]	; (165f0 <nrf_cc3xx_platform_set_mutexes+0x5c>)
   165ac:	6808      	ldr	r0, [r1, #0]
   165ae:	6018      	str	r0, [r3, #0]
   165b0:	6848      	ldr	r0, [r1, #4]
   165b2:	6058      	str	r0, [r3, #4]
   165b4:	6888      	ldr	r0, [r1, #8]
   165b6:	6098      	str	r0, [r3, #8]
   165b8:	e9d1 0103 	ldrd	r0, r1, [r1, #12]
   165bc:	60d8      	str	r0, [r3, #12]
   165be:	6119      	str	r1, [r3, #16]
   165c0:	f8d5 3118 	ldr.w	r3, [r5, #280]	; 0x118
   165c4:	06db      	lsls	r3, r3, #27
   165c6:	d50d      	bpl.n	165e4 <nrf_cc3xx_platform_set_mutexes+0x50>
   165c8:	2300      	movs	r3, #0
   165ca:	e9c5 3345 	strd	r3, r3, [r5, #276]	; 0x114
   165ce:	e9c5 336e 	strd	r3, r3, [r5, #440]	; 0x1b8
   165d2:	f505 708a 	add.w	r0, r5, #276	; 0x114
   165d6:	4790      	blx	r2
   165d8:	6823      	ldr	r3, [r4, #0]
   165da:	f505 70dc 	add.w	r0, r5, #440	; 0x1b8
   165de:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   165e2:	4718      	bx	r3
   165e4:	bd70      	pop	{r4, r5, r6, pc}
   165e6:	bf00      	nop
   165e8:	2000014c 	.word	0x2000014c
   165ec:	20000efc 	.word	0x20000efc
   165f0:	2000015c 	.word	0x2000015c

000165f4 <CC_LibInitNoRng>:
   165f4:	b538      	push	{r3, r4, r5, lr}
   165f6:	f000 f82f 	bl	16658 <CC_HalInit>
   165fa:	b120      	cbz	r0, 16606 <CC_LibInitNoRng+0x12>
   165fc:	2403      	movs	r4, #3
   165fe:	f000 f863 	bl	166c8 <CC_PalTerminate>
   16602:	4620      	mov	r0, r4
   16604:	bd38      	pop	{r3, r4, r5, pc}
   16606:	f000 f831 	bl	1666c <CC_PalInit>
   1660a:	b998      	cbnz	r0, 16634 <CC_LibInitNoRng+0x40>
   1660c:	f000 f8ac 	bl	16768 <CC_PalPowerSaveModeSelect>
   16610:	b998      	cbnz	r0, 1663a <CC_LibInitNoRng+0x46>
   16612:	4d0f      	ldr	r5, [pc, #60]	; (16650 <CC_LibInitNoRng+0x5c>)
   16614:	f8d5 3928 	ldr.w	r3, [r5, #2344]	; 0x928
   16618:	0e1b      	lsrs	r3, r3, #24
   1661a:	2bf0      	cmp	r3, #240	; 0xf0
   1661c:	d108      	bne.n	16630 <CC_LibInitNoRng+0x3c>
   1661e:	f8d5 2a24 	ldr.w	r2, [r5, #2596]	; 0xa24
   16622:	4b0c      	ldr	r3, [pc, #48]	; (16654 <CC_LibInitNoRng+0x60>)
   16624:	429a      	cmp	r2, r3
   16626:	d00a      	beq.n	1663e <CC_LibInitNoRng+0x4a>
   16628:	2407      	movs	r4, #7
   1662a:	f000 f817 	bl	1665c <CC_HalTerminate>
   1662e:	e7e6      	b.n	165fe <CC_LibInitNoRng+0xa>
   16630:	2406      	movs	r4, #6
   16632:	e7fa      	b.n	1662a <CC_LibInitNoRng+0x36>
   16634:	2404      	movs	r4, #4
   16636:	4620      	mov	r0, r4
   16638:	bd38      	pop	{r3, r4, r5, pc}
   1663a:	2400      	movs	r4, #0
   1663c:	e7f5      	b.n	1662a <CC_LibInitNoRng+0x36>
   1663e:	2001      	movs	r0, #1
   16640:	f000 f892 	bl	16768 <CC_PalPowerSaveModeSelect>
   16644:	4604      	mov	r4, r0
   16646:	2800      	cmp	r0, #0
   16648:	d1f7      	bne.n	1663a <CC_LibInitNoRng+0x46>
   1664a:	f8c5 0a0c 	str.w	r0, [r5, #2572]	; 0xa0c
   1664e:	e7d8      	b.n	16602 <CC_LibInitNoRng+0xe>
   16650:	5002b000 	.word	0x5002b000
   16654:	20e00000 	.word	0x20e00000

00016658 <CC_HalInit>:
   16658:	2000      	movs	r0, #0
   1665a:	4770      	bx	lr

0001665c <CC_HalTerminate>:
   1665c:	2000      	movs	r0, #0
   1665e:	4770      	bx	lr

00016660 <CC_HalMaskInterrupt>:
   16660:	4b01      	ldr	r3, [pc, #4]	; (16668 <CC_HalMaskInterrupt+0x8>)
   16662:	f8c3 0a04 	str.w	r0, [r3, #2564]	; 0xa04
   16666:	4770      	bx	lr
   16668:	5002b000 	.word	0x5002b000

0001666c <CC_PalInit>:
   1666c:	b510      	push	{r4, lr}
   1666e:	4811      	ldr	r0, [pc, #68]	; (166b4 <CC_PalInit+0x48>)
   16670:	f000 f848 	bl	16704 <CC_PalMutexCreate>
   16674:	b100      	cbz	r0, 16678 <CC_PalInit+0xc>
   16676:	bd10      	pop	{r4, pc}
   16678:	480f      	ldr	r0, [pc, #60]	; (166b8 <CC_PalInit+0x4c>)
   1667a:	f000 f843 	bl	16704 <CC_PalMutexCreate>
   1667e:	2800      	cmp	r0, #0
   16680:	d1f9      	bne.n	16676 <CC_PalInit+0xa>
   16682:	4c0e      	ldr	r4, [pc, #56]	; (166bc <CC_PalInit+0x50>)
   16684:	4620      	mov	r0, r4
   16686:	f000 f83d 	bl	16704 <CC_PalMutexCreate>
   1668a:	2800      	cmp	r0, #0
   1668c:	d1f3      	bne.n	16676 <CC_PalInit+0xa>
   1668e:	4b0c      	ldr	r3, [pc, #48]	; (166c0 <CC_PalInit+0x54>)
   16690:	480c      	ldr	r0, [pc, #48]	; (166c4 <CC_PalInit+0x58>)
   16692:	601c      	str	r4, [r3, #0]
   16694:	f000 f836 	bl	16704 <CC_PalMutexCreate>
   16698:	4601      	mov	r1, r0
   1669a:	2800      	cmp	r0, #0
   1669c:	d1eb      	bne.n	16676 <CC_PalInit+0xa>
   1669e:	f000 f82d 	bl	166fc <CC_PalDmaInit>
   166a2:	4604      	mov	r4, r0
   166a4:	b108      	cbz	r0, 166aa <CC_PalInit+0x3e>
   166a6:	4620      	mov	r0, r4
   166a8:	bd10      	pop	{r4, pc}
   166aa:	f000 f83f 	bl	1672c <CC_PalPowerSaveModeInit>
   166ae:	4620      	mov	r0, r4
   166b0:	e7fa      	b.n	166a8 <CC_PalInit+0x3c>
   166b2:	bf00      	nop
   166b4:	20000194 	.word	0x20000194
   166b8:	20000188 	.word	0x20000188
   166bc:	20000190 	.word	0x20000190
   166c0:	20000198 	.word	0x20000198
   166c4:	2000018c 	.word	0x2000018c

000166c8 <CC_PalTerminate>:
   166c8:	b508      	push	{r3, lr}
   166ca:	4808      	ldr	r0, [pc, #32]	; (166ec <CC_PalTerminate+0x24>)
   166cc:	f000 f824 	bl	16718 <CC_PalMutexDestroy>
   166d0:	4807      	ldr	r0, [pc, #28]	; (166f0 <CC_PalTerminate+0x28>)
   166d2:	f000 f821 	bl	16718 <CC_PalMutexDestroy>
   166d6:	4807      	ldr	r0, [pc, #28]	; (166f4 <CC_PalTerminate+0x2c>)
   166d8:	f000 f81e 	bl	16718 <CC_PalMutexDestroy>
   166dc:	4806      	ldr	r0, [pc, #24]	; (166f8 <CC_PalTerminate+0x30>)
   166de:	f000 f81b 	bl	16718 <CC_PalMutexDestroy>
   166e2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   166e6:	f000 b80b 	b.w	16700 <CC_PalDmaTerminate>
   166ea:	bf00      	nop
   166ec:	20000194 	.word	0x20000194
   166f0:	20000188 	.word	0x20000188
   166f4:	20000190 	.word	0x20000190
   166f8:	2000018c 	.word	0x2000018c

000166fc <CC_PalDmaInit>:
   166fc:	2000      	movs	r0, #0
   166fe:	4770      	bx	lr

00016700 <CC_PalDmaTerminate>:
   16700:	4770      	bx	lr
   16702:	bf00      	nop

00016704 <CC_PalMutexCreate>:
   16704:	b508      	push	{r3, lr}
   16706:	4b03      	ldr	r3, [pc, #12]	; (16714 <CC_PalMutexCreate+0x10>)
   16708:	6802      	ldr	r2, [r0, #0]
   1670a:	681b      	ldr	r3, [r3, #0]
   1670c:	6810      	ldr	r0, [r2, #0]
   1670e:	4798      	blx	r3
   16710:	2000      	movs	r0, #0
   16712:	bd08      	pop	{r3, pc}
   16714:	2000014c 	.word	0x2000014c

00016718 <CC_PalMutexDestroy>:
   16718:	b508      	push	{r3, lr}
   1671a:	4b03      	ldr	r3, [pc, #12]	; (16728 <CC_PalMutexDestroy+0x10>)
   1671c:	6802      	ldr	r2, [r0, #0]
   1671e:	685b      	ldr	r3, [r3, #4]
   16720:	6810      	ldr	r0, [r2, #0]
   16722:	4798      	blx	r3
   16724:	2000      	movs	r0, #0
   16726:	bd08      	pop	{r3, pc}
   16728:	2000014c 	.word	0x2000014c

0001672c <CC_PalPowerSaveModeInit>:
   1672c:	b570      	push	{r4, r5, r6, lr}
   1672e:	4c09      	ldr	r4, [pc, #36]	; (16754 <CC_PalPowerSaveModeInit+0x28>)
   16730:	4d09      	ldr	r5, [pc, #36]	; (16758 <CC_PalPowerSaveModeInit+0x2c>)
   16732:	6920      	ldr	r0, [r4, #16]
   16734:	68ab      	ldr	r3, [r5, #8]
   16736:	4798      	blx	r3
   16738:	b118      	cbz	r0, 16742 <CC_PalPowerSaveModeInit+0x16>
   1673a:	4b08      	ldr	r3, [pc, #32]	; (1675c <CC_PalPowerSaveModeInit+0x30>)
   1673c:	4808      	ldr	r0, [pc, #32]	; (16760 <CC_PalPowerSaveModeInit+0x34>)
   1673e:	685b      	ldr	r3, [r3, #4]
   16740:	4798      	blx	r3
   16742:	4a08      	ldr	r2, [pc, #32]	; (16764 <CC_PalPowerSaveModeInit+0x38>)
   16744:	68eb      	ldr	r3, [r5, #12]
   16746:	6920      	ldr	r0, [r4, #16]
   16748:	2100      	movs	r1, #0
   1674a:	6011      	str	r1, [r2, #0]
   1674c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   16750:	4718      	bx	r3
   16752:	bf00      	nop
   16754:	2000015c 	.word	0x2000015c
   16758:	2000014c 	.word	0x2000014c
   1675c:	2000013c 	.word	0x2000013c
   16760:	00019f6c 	.word	0x00019f6c
   16764:	20000ef8 	.word	0x20000ef8

00016768 <CC_PalPowerSaveModeSelect>:
   16768:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1676a:	4d1a      	ldr	r5, [pc, #104]	; (167d4 <CC_PalPowerSaveModeSelect+0x6c>)
   1676c:	4e1a      	ldr	r6, [pc, #104]	; (167d8 <CC_PalPowerSaveModeSelect+0x70>)
   1676e:	4604      	mov	r4, r0
   16770:	68b2      	ldr	r2, [r6, #8]
   16772:	6928      	ldr	r0, [r5, #16]
   16774:	4790      	blx	r2
   16776:	b9e8      	cbnz	r0, 167b4 <CC_PalPowerSaveModeSelect+0x4c>
   16778:	4f18      	ldr	r7, [pc, #96]	; (167dc <CC_PalPowerSaveModeSelect+0x74>)
   1677a:	683b      	ldr	r3, [r7, #0]
   1677c:	b14c      	cbz	r4, 16792 <CC_PalPowerSaveModeSelect+0x2a>
   1677e:	b1a3      	cbz	r3, 167aa <CC_PalPowerSaveModeSelect+0x42>
   16780:	2b01      	cmp	r3, #1
   16782:	d019      	beq.n	167b8 <CC_PalPowerSaveModeSelect+0x50>
   16784:	3b01      	subs	r3, #1
   16786:	603b      	str	r3, [r7, #0]
   16788:	6928      	ldr	r0, [r5, #16]
   1678a:	68f3      	ldr	r3, [r6, #12]
   1678c:	4798      	blx	r3
   1678e:	2000      	movs	r0, #0
   16790:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   16792:	b943      	cbnz	r3, 167a6 <CC_PalPowerSaveModeSelect+0x3e>
   16794:	4a12      	ldr	r2, [pc, #72]	; (167e0 <CC_PalPowerSaveModeSelect+0x78>)
   16796:	2101      	movs	r1, #1
   16798:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
   1679c:	4911      	ldr	r1, [pc, #68]	; (167e4 <CC_PalPowerSaveModeSelect+0x7c>)
   1679e:	f8d1 2910 	ldr.w	r2, [r1, #2320]	; 0x910
   167a2:	2a00      	cmp	r2, #0
   167a4:	d1fb      	bne.n	1679e <CC_PalPowerSaveModeSelect+0x36>
   167a6:	3301      	adds	r3, #1
   167a8:	603b      	str	r3, [r7, #0]
   167aa:	68f3      	ldr	r3, [r6, #12]
   167ac:	6928      	ldr	r0, [r5, #16]
   167ae:	4798      	blx	r3
   167b0:	2000      	movs	r0, #0
   167b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   167b4:	480c      	ldr	r0, [pc, #48]	; (167e8 <CC_PalPowerSaveModeSelect+0x80>)
   167b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   167b8:	4a0a      	ldr	r2, [pc, #40]	; (167e4 <CC_PalPowerSaveModeSelect+0x7c>)
   167ba:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   167be:	2b00      	cmp	r3, #0
   167c0:	d1fb      	bne.n	167ba <CC_PalPowerSaveModeSelect+0x52>
   167c2:	4a07      	ldr	r2, [pc, #28]	; (167e0 <CC_PalPowerSaveModeSelect+0x78>)
   167c4:	f06f 407e 	mvn.w	r0, #4261412864	; 0xfe000000
   167c8:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
   167cc:	f7ff ff48 	bl	16660 <CC_HalMaskInterrupt>
   167d0:	683b      	ldr	r3, [r7, #0]
   167d2:	e7d7      	b.n	16784 <CC_PalPowerSaveModeSelect+0x1c>
   167d4:	2000015c 	.word	0x2000015c
   167d8:	2000014c 	.word	0x2000014c
   167dc:	20000ef8 	.word	0x20000ef8
   167e0:	5002a000 	.word	0x5002a000
   167e4:	5002b000 	.word	0x5002b000
   167e8:	ffff8fe9 	.word	0xffff8fe9

000167ec <gpio_pin_configure_dt>:
{
   167ec:	b510      	push	{r4, lr}
   167ee:	4602      	mov	r2, r0
	return gpio_pin_configure(spec->port,
   167f0:	6800      	ldr	r0, [r0, #0]
   167f2:	f892 c004 	ldrb.w	ip, [r2, #4]
				  spec->dt_flags | extra_flags);
   167f6:	88d3      	ldrh	r3, [r2, #6]
	return gpio_pin_configure(spec->port,
   167f8:	430b      	orrs	r3, r1
	const struct gpio_driver_api *api =
   167fa:	6884      	ldr	r4, [r0, #8]
	struct gpio_driver_data *data =
   167fc:	6901      	ldr	r1, [r0, #16]
	if (((flags & GPIO_OUTPUT_INIT_LOGICAL) != 0)
   167fe:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   16802:	d007      	beq.n	16814 <gpio_pin_configure_dt+0x28>
	    && ((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH)) != 0)
   16804:	f413 2f40 	tst.w	r3, #786432	; 0xc0000
   16808:	d004      	beq.n	16814 <gpio_pin_configure_dt+0x28>
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
   1680a:	f013 0f01 	tst.w	r3, #1
   1680e:	d001      	beq.n	16814 <gpio_pin_configure_dt+0x28>
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
   16810:	f483 2340 	eor.w	r3, r3, #786432	; 0xc0000
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
   16814:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
   16818:	f013 0f01 	tst.w	r3, #1
   1681c:	d00a      	beq.n	16834 <gpio_pin_configure_dt+0x48>
		data->invert |= (gpio_port_pins_t)BIT(pin);
   1681e:	2301      	movs	r3, #1
   16820:	fa03 fe0c 	lsl.w	lr, r3, ip
   16824:	680b      	ldr	r3, [r1, #0]
   16826:	ea43 030e 	orr.w	r3, r3, lr
   1682a:	600b      	str	r3, [r1, #0]
	return api->pin_configure(port, pin, flags);
   1682c:	6823      	ldr	r3, [r4, #0]
   1682e:	4661      	mov	r1, ip
   16830:	4798      	blx	r3
}
   16832:	bd10      	pop	{r4, pc}
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   16834:	2301      	movs	r3, #1
   16836:	fa03 fe0c 	lsl.w	lr, r3, ip
   1683a:	680b      	ldr	r3, [r1, #0]
   1683c:	ea23 030e 	bic.w	r3, r3, lr
   16840:	600b      	str	r3, [r1, #0]
   16842:	e7f3      	b.n	1682c <gpio_pin_configure_dt+0x40>

00016844 <chunk_left>:
    return (self_p->size - self_p->offset);
   16844:	6842      	ldr	r2, [r0, #4]
   16846:	6880      	ldr	r0, [r0, #8]
}
   16848:	1a10      	subs	r0, r2, r0
   1684a:	4770      	bx	lr

0001684c <chunk_available>:
{
   1684c:	b508      	push	{r3, lr}
    return (chunk_left(self_p) > 0);
   1684e:	f7ff fff9 	bl	16844 <chunk_left>
}
   16852:	3800      	subs	r0, #0
   16854:	bf18      	it	ne
   16856:	2001      	movne	r0, #1
   16858:	bd08      	pop	{r3, pc}

0001685a <chunk_get_no_check>:
{
   1685a:	4603      	mov	r3, r0
    data = self_p->buf_p[self_p->offset];
   1685c:	6801      	ldr	r1, [r0, #0]
   1685e:	6882      	ldr	r2, [r0, #8]
   16860:	5c88      	ldrb	r0, [r1, r2]
    self_p->offset++;
   16862:	3201      	adds	r2, #1
   16864:	609a      	str	r2, [r3, #8]
}
   16866:	4770      	bx	lr

00016868 <chunk_get>:
{
   16868:	b538      	push	{r3, r4, r5, lr}
   1686a:	4605      	mov	r5, r0
   1686c:	460c      	mov	r4, r1
    if (!chunk_available(self_p)) {
   1686e:	f7ff ffed 	bl	1684c <chunk_available>
   16872:	b908      	cbnz	r0, 16878 <chunk_get+0x10>
        return (1);
   16874:	2001      	movs	r0, #1
}
   16876:	bd38      	pop	{r3, r4, r5, pc}
    *data_p = chunk_get_no_check(self_p);
   16878:	4628      	mov	r0, r5
   1687a:	f7ff ffee 	bl	1685a <chunk_get_no_check>
   1687e:	7020      	strb	r0, [r4, #0]
    return (0);
   16880:	2000      	movs	r0, #0
   16882:	e7f8      	b.n	16876 <chunk_get+0xe>

00016884 <is_overflow>:
}
   16884:	2819      	cmp	r0, #25
   16886:	bfd4      	ite	le
   16888:	2000      	movle	r0, #0
   1688a:	2001      	movgt	r0, #1
   1688c:	4770      	bx	lr

0001688e <chunk_unpack_header_size>:
{
   1688e:	b5f0      	push	{r4, r5, r6, r7, lr}
   16890:	b083      	sub	sp, #12
   16892:	4606      	mov	r6, r0
   16894:	460d      	mov	r5, r1
    res = chunk_get(self_p, &byte);
   16896:	f10d 0107 	add.w	r1, sp, #7
   1689a:	f7ff ffe5 	bl	16868 <chunk_get>
    if (res != 0) {
   1689e:	b9f0      	cbnz	r0, 168de <chunk_unpack_header_size+0x50>
   168a0:	4607      	mov	r7, r0
    *size_p = (byte & 0x3f);
   168a2:	f89d 3007 	ldrb.w	r3, [sp, #7]
   168a6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   168aa:	602b      	str	r3, [r5, #0]
    offset = 6;
   168ac:	2406      	movs	r4, #6
    while ((byte & 0x80) != 0) {
   168ae:	f99d 3007 	ldrsb.w	r3, [sp, #7]
   168b2:	2b00      	cmp	r3, #0
   168b4:	da18      	bge.n	168e8 <chunk_unpack_header_size+0x5a>
        res = chunk_get(self_p, &byte);
   168b6:	f10d 0107 	add.w	r1, sp, #7
   168ba:	4630      	mov	r0, r6
   168bc:	f7ff ffd4 	bl	16868 <chunk_get>
        if (res != 0) {
   168c0:	b980      	cbnz	r0, 168e4 <chunk_unpack_header_size+0x56>
        if (is_overflow(offset)) {
   168c2:	4620      	mov	r0, r4
   168c4:	f7ff ffde 	bl	16884 <is_overflow>
   168c8:	b988      	cbnz	r0, 168ee <chunk_unpack_header_size+0x60>
        *size_p |= ((byte & 0x7f) << offset);
   168ca:	f89d 3007 	ldrb.w	r3, [sp, #7]
   168ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   168d2:	40a3      	lsls	r3, r4
   168d4:	682a      	ldr	r2, [r5, #0]
   168d6:	4313      	orrs	r3, r2
   168d8:	602b      	str	r3, [r5, #0]
        offset += 7;
   168da:	3407      	adds	r4, #7
   168dc:	e7e7      	b.n	168ae <chunk_unpack_header_size+0x20>
        return (-DETOOLS_SHORT_HEADER);
   168de:	f06f 0711 	mvn.w	r7, #17
   168e2:	e001      	b.n	168e8 <chunk_unpack_header_size+0x5a>
            return (-DETOOLS_SHORT_HEADER);
   168e4:	f06f 0711 	mvn.w	r7, #17
}
   168e8:	4638      	mov	r0, r7
   168ea:	b003      	add	sp, #12
   168ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
            return (-DETOOLS_CORRUPT_PATCH_OVERFLOW);
   168ee:	f06f 0718 	mvn.w	r7, #24
   168f2:	e7f9      	b.n	168e8 <chunk_unpack_header_size+0x5a>

000168f4 <unpack_heatshrink_header>:
    *window_sz2_p = (((byte >> 4) & 0xf) + 4);
   168f4:	0903      	lsrs	r3, r0, #4
   168f6:	3304      	adds	r3, #4
   168f8:	700b      	strb	r3, [r1, #0]
    *lookahead_sz2_p = ((byte & 0xf) + 3);
   168fa:	f000 000f 	and.w	r0, r0, #15
   168fe:	3003      	adds	r0, #3
   16900:	7010      	strb	r0, [r2, #0]
}
   16902:	4770      	bx	lr

00016904 <patch_reader_decompress>:
{
   16904:	b508      	push	{r3, lr}
    return (self_p->decompress(self_p, buf_p, size_p));
   16906:	f8d0 3228 	ldr.w	r3, [r0, #552]	; 0x228
   1690a:	4798      	blx	r3
}
   1690c:	bd08      	pop	{r3, pc}

0001690e <patch_reader_unpack_size>:
{
   1690e:	b5f0      	push	{r4, r5, r6, r7, lr}
   16910:	b083      	sub	sp, #12
   16912:	4604      	mov	r4, r0
   16914:	460e      	mov	r6, r1
    size = 1;
   16916:	2301      	movs	r3, #1
   16918:	9300      	str	r3, [sp, #0]
   1691a:	e017      	b.n	1694c <patch_reader_unpack_size+0x3e>
            res = patch_reader_decompress(self_p, &byte, &size);
   1691c:	466a      	mov	r2, sp
   1691e:	f10d 0107 	add.w	r1, sp, #7
   16922:	4620      	mov	r0, r4
   16924:	f7ff ffee 	bl	16904 <patch_reader_decompress>
            if (res != 0) {
   16928:	4607      	mov	r7, r0
   1692a:	b9b0      	cbnz	r0, 1695a <patch_reader_unpack_size+0x4c>
            self_p->size.is_signed = ((byte & 0x40) == 0x40);
   1692c:	f89d 3007 	ldrb.w	r3, [sp, #7]
   16930:	f3c3 1280 	ubfx	r2, r3, #6, #1
   16934:	7422      	strb	r2, [r4, #16]
            self_p->size.value = (byte & 0x3f);
   16936:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   1693a:	60a3      	str	r3, [r4, #8]
            self_p->size.offset = 6;
   1693c:	2306      	movs	r3, #6
   1693e:	60e3      	str	r3, [r4, #12]
            self_p->size.state = detools_unpack_usize_state_consecutive_t;
   16940:	2301      	movs	r3, #1
   16942:	6063      	str	r3, [r4, #4]
    } while ((byte & 0x80) != 0);
   16944:	f99d 3007 	ldrsb.w	r3, [sp, #7]
   16948:	2b00      	cmp	r3, #0
   1694a:	da22      	bge.n	16992 <patch_reader_unpack_size+0x84>
        switch (self_p->size.state) {
   1694c:	6863      	ldr	r3, [r4, #4]
   1694e:	2b00      	cmp	r3, #0
   16950:	d0e4      	beq.n	1691c <patch_reader_unpack_size+0xe>
   16952:	2b01      	cmp	r3, #1
   16954:	d004      	beq.n	16960 <patch_reader_unpack_size+0x52>
   16956:	f06f 0704 	mvn.w	r7, #4
}
   1695a:	4638      	mov	r0, r7
   1695c:	b003      	add	sp, #12
   1695e:	bdf0      	pop	{r4, r5, r6, r7, pc}
            res = patch_reader_decompress(self_p, &byte, &size);
   16960:	466a      	mov	r2, sp
   16962:	f10d 0107 	add.w	r1, sp, #7
   16966:	4620      	mov	r0, r4
   16968:	f7ff ffcc 	bl	16904 <patch_reader_decompress>
            if (res != 0) {
   1696c:	4607      	mov	r7, r0
   1696e:	2800      	cmp	r0, #0
   16970:	d1f3      	bne.n	1695a <patch_reader_unpack_size+0x4c>
            if (is_overflow(self_p->size.offset)) {
   16972:	68e5      	ldr	r5, [r4, #12]
   16974:	4628      	mov	r0, r5
   16976:	f7ff ff85 	bl	16884 <is_overflow>
   1697a:	b9a0      	cbnz	r0, 169a6 <patch_reader_unpack_size+0x98>
            self_p->size.value |= ((byte & 0x7f) << self_p->size.offset);
   1697c:	f89d 3007 	ldrb.w	r3, [sp, #7]
   16980:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   16984:	40ab      	lsls	r3, r5
   16986:	68a2      	ldr	r2, [r4, #8]
   16988:	4313      	orrs	r3, r2
   1698a:	60a3      	str	r3, [r4, #8]
            self_p->size.offset += 7;
   1698c:	3507      	adds	r5, #7
   1698e:	60e5      	str	r5, [r4, #12]
            break;
   16990:	e7d8      	b.n	16944 <patch_reader_unpack_size+0x36>
    self_p->size.state = detools_unpack_usize_state_first_t;
   16992:	2300      	movs	r3, #0
   16994:	6063      	str	r3, [r4, #4]
    if (self_p->size.is_signed) {
   16996:	7c23      	ldrb	r3, [r4, #16]
   16998:	b113      	cbz	r3, 169a0 <patch_reader_unpack_size+0x92>
        self_p->size.value *= -1;
   1699a:	68a3      	ldr	r3, [r4, #8]
   1699c:	425b      	negs	r3, r3
   1699e:	60a3      	str	r3, [r4, #8]
    *size_p = self_p->size.value;
   169a0:	68a3      	ldr	r3, [r4, #8]
   169a2:	6033      	str	r3, [r6, #0]
    return (res);
   169a4:	e7d9      	b.n	1695a <patch_reader_unpack_size+0x4c>
                return (-DETOOLS_CORRUPT_PATCH_OVERFLOW);
   169a6:	f06f 0718 	mvn.w	r7, #24
   169aa:	e7d6      	b.n	1695a <patch_reader_unpack_size+0x4c>

000169ac <common_process_size>:
{
   169ac:	b570      	push	{r4, r5, r6, lr}
   169ae:	460e      	mov	r6, r1
   169b0:	4615      	mov	r5, r2
   169b2:	461c      	mov	r4, r3
    res = patch_reader_unpack_size(patch_reader_p, size_p);
   169b4:	4619      	mov	r1, r3
   169b6:	f7ff ffaa 	bl	1690e <patch_reader_unpack_size>
    if (res != 0) {
   169ba:	b918      	cbnz	r0, 169c4 <common_process_size+0x18>
    if (to_pos + (size_t)*size_p > to_size) {
   169bc:	6821      	ldr	r1, [r4, #0]
   169be:	4431      	add	r1, r6
   169c0:	42a9      	cmp	r1, r5
   169c2:	d800      	bhi.n	169c6 <common_process_size+0x1a>
}
   169c4:	bd70      	pop	{r4, r5, r6, pc}
        return (-DETOOLS_CORRUPT_PATCH);
   169c6:	f06f 0008 	mvn.w	r0, #8
   169ca:	e7fb      	b.n	169c4 <common_process_size+0x18>

000169cc <process_dfpatch_size>:
{
   169cc:	b510      	push	{r4, lr}
   169ce:	b082      	sub	sp, #8
   169d0:	4604      	mov	r4, r0
    res = patch_reader_unpack_size(&self_p->patch_reader, &size);
   169d2:	a901      	add	r1, sp, #4
   169d4:	3030      	adds	r0, #48	; 0x30
   169d6:	f7ff ff9a 	bl	1690e <patch_reader_unpack_size>
    if (res != 0) {
   169da:	b920      	cbnz	r0, 169e6 <process_dfpatch_size+0x1a>
    if (size > 0) {
   169dc:	9b01      	ldr	r3, [sp, #4]
   169de:	2b00      	cmp	r3, #0
   169e0:	dc03      	bgt.n	169ea <process_dfpatch_size+0x1e>
    self_p->state = detools_apply_patch_state_diff_size_t;
   169e2:	2302      	movs	r3, #2
   169e4:	7523      	strb	r3, [r4, #20]
}
   169e6:	b002      	add	sp, #8
   169e8:	bd10      	pop	{r4, pc}
        return (-DETOOLS_NOT_IMPLEMENTED);
   169ea:	f04f 30ff 	mov.w	r0, #4294967295
   169ee:	e7fa      	b.n	169e6 <process_dfpatch_size+0x1a>

000169f0 <process_size>:
{
   169f0:	b530      	push	{r4, r5, lr}
   169f2:	b083      	sub	sp, #12
   169f4:	4604      	mov	r4, r0
   169f6:	460d      	mov	r5, r1
    res = common_process_size(&self_p->patch_reader,
   169f8:	ab01      	add	r3, sp, #4
   169fa:	6a42      	ldr	r2, [r0, #36]	; 0x24
   169fc:	6a01      	ldr	r1, [r0, #32]
   169fe:	3030      	adds	r0, #48	; 0x30
   16a00:	f7ff ffd4 	bl	169ac <common_process_size>
    if (res != 0) {
   16a04:	b910      	cbnz	r0, 16a0c <process_size+0x1c>
    self_p->state = next_state;
   16a06:	7525      	strb	r5, [r4, #20]
    self_p->chunk_size = (size_t)size;
   16a08:	9b01      	ldr	r3, [sp, #4]
   16a0a:	62e3      	str	r3, [r4, #44]	; 0x2c
}
   16a0c:	b003      	add	sp, #12
   16a0e:	bd30      	pop	{r4, r5, pc}

00016a10 <process_data>:
{
   16a10:	b530      	push	{r4, r5, lr}
   16a12:	b0c3      	sub	sp, #268	; 0x10c
   16a14:	4604      	mov	r4, r0
   16a16:	460d      	mov	r5, r1
    to_size = MIN(sizeof(to), self_p->chunk_size);
   16a18:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   16a1a:	2b80      	cmp	r3, #128	; 0x80
   16a1c:	bf28      	it	cs
   16a1e:	2380      	movcs	r3, #128	; 0x80
   16a20:	9321      	str	r3, [sp, #132]	; 0x84
    if (to_size == 0) {
   16a22:	b91b      	cbnz	r3, 16a2c <process_data+0x1c>
        self_p->state = next_state;
   16a24:	7521      	strb	r1, [r4, #20]
        return (0);
   16a26:	2000      	movs	r0, #0
}
   16a28:	b043      	add	sp, #268	; 0x10c
   16a2a:	bd30      	pop	{r4, r5, pc}
    res = patch_reader_decompress(&self_p->patch_reader,
   16a2c:	aa21      	add	r2, sp, #132	; 0x84
   16a2e:	a922      	add	r1, sp, #136	; 0x88
   16a30:	3030      	adds	r0, #48	; 0x30
   16a32:	f7ff ff67 	bl	16904 <patch_reader_decompress>
    if (res != 0) {
   16a36:	2800      	cmp	r0, #0
   16a38:	d1f6      	bne.n	16a28 <process_data+0x18>
    if (next_state == detools_apply_patch_state_extra_size_t) {
   16a3a:	2d04      	cmp	r5, #4
   16a3c:	d00f      	beq.n	16a5e <process_data+0x4e>
    self_p->to_offset += to_size;
   16a3e:	9a21      	ldr	r2, [sp, #132]	; 0x84
   16a40:	6a23      	ldr	r3, [r4, #32]
   16a42:	4413      	add	r3, r2
   16a44:	6223      	str	r3, [r4, #32]
    self_p->chunk_size -= to_size;
   16a46:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   16a48:	1a9b      	subs	r3, r3, r2
   16a4a:	62e3      	str	r3, [r4, #44]	; 0x2c
    res = self_p->to_write(self_p->arg_p, &to[0], to_size);
   16a4c:	68e3      	ldr	r3, [r4, #12]
   16a4e:	a922      	add	r1, sp, #136	; 0x88
   16a50:	6920      	ldr	r0, [r4, #16]
   16a52:	4798      	blx	r3
    if (res != 0) {
   16a54:	2800      	cmp	r0, #0
   16a56:	d0e7      	beq.n	16a28 <process_data+0x18>
        return (-DETOOLS_IO_FAILED);
   16a58:	f06f 0009 	mvn.w	r0, #9
   16a5c:	e7e4      	b.n	16a28 <process_data+0x18>
        res = self_p->from_read(self_p->arg_p, &from[0], to_size);
   16a5e:	6823      	ldr	r3, [r4, #0]
   16a60:	9a21      	ldr	r2, [sp, #132]	; 0x84
   16a62:	a901      	add	r1, sp, #4
   16a64:	6920      	ldr	r0, [r4, #16]
   16a66:	4798      	blx	r3
        if (res != 0) {
   16a68:	b990      	cbnz	r0, 16a90 <process_data+0x80>
        self_p->from_offset += to_size;
   16a6a:	9d21      	ldr	r5, [sp, #132]	; 0x84
   16a6c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   16a6e:	442b      	add	r3, r5
   16a70:	62a3      	str	r3, [r4, #40]	; 0x28
        for (i = 0; i < to_size; i++) {
   16a72:	2300      	movs	r3, #0
   16a74:	e009      	b.n	16a8a <process_data+0x7a>
            to[i] = (uint8_t)(to[i] + from[i]);
   16a76:	aa42      	add	r2, sp, #264	; 0x108
   16a78:	18d1      	adds	r1, r2, r3
   16a7a:	f811 2c80 	ldrb.w	r2, [r1, #-128]
   16a7e:	a801      	add	r0, sp, #4
   16a80:	5cc0      	ldrb	r0, [r0, r3]
   16a82:	4402      	add	r2, r0
   16a84:	f801 2c80 	strb.w	r2, [r1, #-128]
        for (i = 0; i < to_size; i++) {
   16a88:	3301      	adds	r3, #1
   16a8a:	429d      	cmp	r5, r3
   16a8c:	d8f3      	bhi.n	16a76 <process_data+0x66>
   16a8e:	e7d6      	b.n	16a3e <process_data+0x2e>
            return (-DETOOLS_IO_FAILED);
   16a90:	f06f 0009 	mvn.w	r0, #9
   16a94:	e7c8      	b.n	16a28 <process_data+0x18>

00016a96 <process_diff_size>:
{
   16a96:	b508      	push	{r3, lr}
    return (process_size(self_p, detools_apply_patch_state_diff_data_t));
   16a98:	2103      	movs	r1, #3
   16a9a:	f7ff ffa9 	bl	169f0 <process_size>
}
   16a9e:	bd08      	pop	{r3, pc}

00016aa0 <process_diff_data>:
{
   16aa0:	b508      	push	{r3, lr}
    return (process_data(self_p, detools_apply_patch_state_extra_size_t));
   16aa2:	2104      	movs	r1, #4
   16aa4:	f7ff ffb4 	bl	16a10 <process_data>
}
   16aa8:	bd08      	pop	{r3, pc}

00016aaa <process_extra_size>:
{
   16aaa:	b508      	push	{r3, lr}
    return (process_size(self_p, detools_apply_patch_state_extra_data_t));
   16aac:	2105      	movs	r1, #5
   16aae:	f7ff ff9f 	bl	169f0 <process_size>
}
   16ab2:	bd08      	pop	{r3, pc}

00016ab4 <process_extra_data>:
{
   16ab4:	b508      	push	{r3, lr}
    return (process_data(self_p, detools_apply_patch_state_adjustment_t));
   16ab6:	2106      	movs	r1, #6
   16ab8:	f7ff ffaa 	bl	16a10 <process_data>
}
   16abc:	bd08      	pop	{r3, pc}

00016abe <process_adjustment>:
{
   16abe:	b510      	push	{r4, lr}
   16ac0:	b082      	sub	sp, #8
   16ac2:	4604      	mov	r4, r0
    res = patch_reader_unpack_size(&self_p->patch_reader, &offset);
   16ac4:	a901      	add	r1, sp, #4
   16ac6:	3030      	adds	r0, #48	; 0x30
   16ac8:	f7ff ff21 	bl	1690e <patch_reader_unpack_size>
    if (res != 0) {
   16acc:	b970      	cbnz	r0, 16aec <process_adjustment+0x2e>
    res = self_p->from_seek(self_p->arg_p, offset);
   16ace:	6863      	ldr	r3, [r4, #4]
   16ad0:	9901      	ldr	r1, [sp, #4]
   16ad2:	6920      	ldr	r0, [r4, #16]
   16ad4:	4798      	blx	r3
    if (res != 0) {
   16ad6:	b970      	cbnz	r0, 16af6 <process_adjustment+0x38>
    self_p->from_offset += offset;
   16ad8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   16ada:	9a01      	ldr	r2, [sp, #4]
   16adc:	4413      	add	r3, r2
   16ade:	62a3      	str	r3, [r4, #40]	; 0x28
    if (self_p->to_offset == self_p->to_size) {
   16ae0:	6a22      	ldr	r2, [r4, #32]
   16ae2:	6a63      	ldr	r3, [r4, #36]	; 0x24
   16ae4:	429a      	cmp	r2, r3
   16ae6:	d003      	beq.n	16af0 <process_adjustment+0x32>
        self_p->state = detools_apply_patch_state_diff_size_t;
   16ae8:	2302      	movs	r3, #2
   16aea:	7523      	strb	r3, [r4, #20]
}
   16aec:	b002      	add	sp, #8
   16aee:	bd10      	pop	{r4, pc}
        self_p->state = detools_apply_patch_state_done_t;
   16af0:	2307      	movs	r3, #7
   16af2:	7523      	strb	r3, [r4, #20]
   16af4:	e7fa      	b.n	16aec <process_adjustment+0x2e>
        return (-DETOOLS_IO_FAILED);
   16af6:	f06f 0009 	mvn.w	r0, #9
   16afa:	e7f7      	b.n	16aec <process_adjustment+0x2e>

00016afc <apply_patch_common_finalize>:
{
   16afc:	b538      	push	{r3, r4, r5, lr}
   16afe:	4604      	mov	r4, r0
   16b00:	4608      	mov	r0, r1
   16b02:	4615      	mov	r5, r2
    if (res == 1) {
   16b04:	2c01      	cmp	r4, #1
   16b06:	d00c      	beq.n	16b22 <apply_patch_common_finalize+0x26>
    if (res == -DETOOLS_ALREADY_DONE) {
   16b08:	f114 0f0b 	cmn.w	r4, #11
   16b0c:	d00c      	beq.n	16b28 <apply_patch_common_finalize+0x2c>
    if (patch_reader_p->destroy != NULL) {
   16b0e:	f8d0 3224 	ldr.w	r3, [r0, #548]	; 0x224
   16b12:	b113      	cbz	r3, 16b1a <apply_patch_common_finalize+0x1e>
        if (res == 0) {
   16b14:	b954      	cbnz	r4, 16b2c <apply_patch_common_finalize+0x30>
            res = patch_reader_p->destroy(patch_reader_p);
   16b16:	4798      	blx	r3
   16b18:	4604      	mov	r4, r0
    if (res == 0) {
   16b1a:	b904      	cbnz	r4, 16b1e <apply_patch_common_finalize+0x22>
        res = (int)to_size;
   16b1c:	462c      	mov	r4, r5
}
   16b1e:	4620      	mov	r0, r4
   16b20:	bd38      	pop	{r3, r4, r5, pc}
        res = -DETOOLS_NOT_ENOUGH_PATCH_DATA;
   16b22:	f06f 0412 	mvn.w	r4, #18
   16b26:	e7f2      	b.n	16b0e <apply_patch_common_finalize+0x12>
        res = 0;
   16b28:	2400      	movs	r4, #0
   16b2a:	e7f0      	b.n	16b0e <apply_patch_common_finalize+0x12>
            (void)patch_reader_p->destroy(patch_reader_p);
   16b2c:	4798      	blx	r3
   16b2e:	e7f4      	b.n	16b1a <apply_patch_common_finalize+0x1e>

00016b30 <patch_reader_heatshrink_decompress>:
{
   16b30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   16b34:	b082      	sub	sp, #8
   16b36:	4680      	mov	r8, r0
   16b38:	460e      	mov	r6, r1
   16b3a:	4691      	mov	r9, r2
    left = *size_p;
   16b3c:	6814      	ldr	r4, [r2, #0]
    if (heatshrink_p->window_sz2 == -1) {
   16b3e:	f990 3014 	ldrsb.w	r3, [r0, #20]
   16b42:	f1b3 3fff 	cmp.w	r3, #4294967295
   16b46:	d023      	beq.n	16b90 <patch_reader_heatshrink_decompress+0x60>
        pres = heatshrink_decoder_poll(&heatshrink_p->decoder,
   16b48:	f108 0716 	add.w	r7, r8, #22
   16b4c:	ab01      	add	r3, sp, #4
   16b4e:	4622      	mov	r2, r4
   16b50:	4631      	mov	r1, r6
   16b52:	4638      	mov	r0, r7
   16b54:	f7f9 fe76 	bl	10844 <heatshrink_decoder_poll>
        if (pres < 0) {
   16b58:	2800      	cmp	r0, #0
   16b5a:	db3b      	blt.n	16bd4 <patch_reader_heatshrink_decompress+0xa4>
        buf_p += size;
   16b5c:	9d01      	ldr	r5, [sp, #4]
   16b5e:	442e      	add	r6, r5
        if (left == 0) {
   16b60:	ebb4 0a05 	subs.w	sl, r4, r5
   16b64:	d03b      	beq.n	16bde <patch_reader_heatshrink_decompress+0xae>
        res = chunk_get(self_p->patch_chunk_p, &byte);
   16b66:	f10d 0103 	add.w	r1, sp, #3
   16b6a:	f8d8 0000 	ldr.w	r0, [r8]
   16b6e:	f7ff fe7b 	bl	16868 <chunk_get>
        if (res == 0) {
   16b72:	bb28      	cbnz	r0, 16bc0 <patch_reader_heatshrink_decompress+0x90>
            sres = heatshrink_decoder_sink(&heatshrink_p->decoder,
   16b74:	ab01      	add	r3, sp, #4
   16b76:	2201      	movs	r2, #1
   16b78:	f10d 0103 	add.w	r1, sp, #3
   16b7c:	4638      	mov	r0, r7
   16b7e:	f000 fa20 	bl	16fc2 <heatshrink_decoder_sink>
            if ((sres < 0) || (size != sizeof(byte))) {
   16b82:	2800      	cmp	r0, #0
   16b84:	db2d      	blt.n	16be2 <patch_reader_heatshrink_decompress+0xb2>
   16b86:	9b01      	ldr	r3, [sp, #4]
   16b88:	2b01      	cmp	r3, #1
   16b8a:	d12d      	bne.n	16be8 <patch_reader_heatshrink_decompress+0xb8>
        left -= size;
   16b8c:	4654      	mov	r4, sl
   16b8e:	e7db      	b.n	16b48 <patch_reader_heatshrink_decompress+0x18>
        res = chunk_get(self_p->patch_chunk_p, &byte);
   16b90:	f10d 0103 	add.w	r1, sp, #3
   16b94:	6800      	ldr	r0, [r0, #0]
   16b96:	f7ff fe67 	bl	16868 <chunk_get>
        if (res != 0) {
   16b9a:	b108      	cbz	r0, 16ba0 <patch_reader_heatshrink_decompress+0x70>
            return (1);
   16b9c:	2001      	movs	r0, #1
   16b9e:	e01b      	b.n	16bd8 <patch_reader_heatshrink_decompress+0xa8>
        unpack_heatshrink_header(byte,
   16ba0:	f108 0215 	add.w	r2, r8, #21
   16ba4:	f108 0114 	add.w	r1, r8, #20
   16ba8:	f89d 0003 	ldrb.w	r0, [sp, #3]
   16bac:	f7ff fea2 	bl	168f4 <unpack_heatshrink_header>
            || (heatshrink_p->lookahead_sz2 != HEATSHRINK_STATIC_LOOKAHEAD_BITS)) {
   16bb0:	f9b8 3014 	ldrsh.w	r3, [r8, #20]
        if ((heatshrink_p->window_sz2 != HEATSHRINK_STATIC_WINDOW_BITS)
   16bb4:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
   16bb8:	d0c6      	beq.n	16b48 <patch_reader_heatshrink_decompress+0x18>
            return (-DETOOLS_HEATSHRINK_HEADER);
   16bba:	f06f 001a 	mvn.w	r0, #26
   16bbe:	e00b      	b.n	16bd8 <patch_reader_heatshrink_decompress+0xa8>
            if (left != *size_p) {
   16bc0:	f8d9 2000 	ldr.w	r2, [r9]
   16bc4:	4552      	cmp	r2, sl
   16bc6:	d012      	beq.n	16bee <patch_reader_heatshrink_decompress+0xbe>
                *size_p -= left;
   16bc8:	1b2b      	subs	r3, r5, r4
   16bca:	4413      	add	r3, r2
   16bcc:	f8c9 3000 	str.w	r3, [r9]
                return (0);
   16bd0:	2000      	movs	r0, #0
   16bd2:	e001      	b.n	16bd8 <patch_reader_heatshrink_decompress+0xa8>
            return (-DETOOLS_HEATSHRINK_POLL);
   16bd4:	f06f 0014 	mvn.w	r0, #20
}
   16bd8:	b002      	add	sp, #8
   16bda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            return (0);
   16bde:	2000      	movs	r0, #0
   16be0:	e7fa      	b.n	16bd8 <patch_reader_heatshrink_decompress+0xa8>
                return (-DETOOLS_HEATSHRINK_SINK);
   16be2:	f06f 0013 	mvn.w	r0, #19
   16be6:	e7f7      	b.n	16bd8 <patch_reader_heatshrink_decompress+0xa8>
   16be8:	f06f 0013 	mvn.w	r0, #19
   16bec:	e7f4      	b.n	16bd8 <patch_reader_heatshrink_decompress+0xa8>
                return (1);
   16bee:	2001      	movs	r0, #1
   16bf0:	e7f2      	b.n	16bd8 <patch_reader_heatshrink_decompress+0xa8>

00016bf2 <patch_reader_heatshrink_destroy>:
{
   16bf2:	b508      	push	{r3, lr}
    fres = heatshrink_decoder_finish(&heatshrink_p->decoder);
   16bf4:	3016      	adds	r0, #22
   16bf6:	f000 fa0a 	bl	1700e <heatshrink_decoder_finish>
    if (fres == HSDR_FINISH_DONE) {
   16bfa:	b900      	cbnz	r0, 16bfe <patch_reader_heatshrink_destroy+0xc>
}
   16bfc:	bd08      	pop	{r3, pc}
        return (-DETOOLS_CORRUPT_PATCH);
   16bfe:	f06f 0008 	mvn.w	r0, #8
   16c02:	e7fb      	b.n	16bfc <patch_reader_heatshrink_destroy+0xa>

00016c04 <patch_reader_init>:
{
   16c04:	b508      	push	{r3, lr}
    self_p->patch_chunk_p = patch_chunk_p;
   16c06:	6001      	str	r1, [r0, #0]
    self_p->size.state = detools_unpack_usize_state_first_t;
   16c08:	2200      	movs	r2, #0
   16c0a:	6042      	str	r2, [r0, #4]
    res = patch_reader_heatshrink_init(self_p);
   16c0c:	f7f9 fdc4 	bl	10798 <patch_reader_heatshrink_init>
}
   16c10:	bd08      	pop	{r3, pc}

00016c12 <process_init>:
{
   16c12:	b530      	push	{r4, r5, lr}
   16c14:	b083      	sub	sp, #12
   16c16:	4604      	mov	r4, r0
    if (chunk_get(&self_p->chunk, &byte) != 0) {
   16c18:	f500 7517 	add.w	r5, r0, #604	; 0x25c
   16c1c:	f10d 0107 	add.w	r1, sp, #7
   16c20:	4628      	mov	r0, r5
   16c22:	f7ff fe21 	bl	16868 <chunk_get>
   16c26:	bb40      	cbnz	r0, 16c7a <process_init+0x68>
    patch_type = ((byte >> 4) & 0x7);
   16c28:	f89d 3007 	ldrb.w	r3, [sp, #7]
    self_p->compression = (byte & 0xf);
   16c2c:	f003 020f 	and.w	r2, r3, #15
   16c30:	61a2      	str	r2, [r4, #24]
    if (patch_type != PATCH_TYPE_SEQUENTIAL) {
   16c32:	f013 0f70 	tst.w	r3, #112	; 0x70
   16c36:	d123      	bne.n	16c80 <process_init+0x6e>
    res = chunk_unpack_header_size(&self_p->chunk, &to_size);
   16c38:	4669      	mov	r1, sp
   16c3a:	4628      	mov	r0, r5
   16c3c:	f7ff fe27 	bl	1688e <chunk_unpack_header_size>
    if (res != 0) {
   16c40:	b108      	cbz	r0, 16c46 <process_init+0x34>
}
   16c42:	b003      	add	sp, #12
   16c44:	bd30      	pop	{r4, r5, pc}
                            self_p->patch_size - self_p->chunk.offset,
   16c46:	68a1      	ldr	r1, [r4, #8]
   16c48:	f8d4 2264 	ldr.w	r2, [r4, #612]	; 0x264
    res = patch_reader_init(&self_p->patch_reader,
   16c4c:	69a3      	ldr	r3, [r4, #24]
   16c4e:	1a8a      	subs	r2, r1, r2
   16c50:	4629      	mov	r1, r5
   16c52:	f104 0030 	add.w	r0, r4, #48	; 0x30
   16c56:	f7ff ffd5 	bl	16c04 <patch_reader_init>
    if (res != 0) {
   16c5a:	2800      	cmp	r0, #0
   16c5c:	d1f1      	bne.n	16c42 <process_init+0x30>
    if (to_size < 0) {
   16c5e:	9b00      	ldr	r3, [sp, #0]
   16c60:	2b00      	cmp	r3, #0
   16c62:	db10      	blt.n	16c86 <process_init+0x74>
    self_p->to_offset = 0;
   16c64:	f04f 0200 	mov.w	r2, #0
   16c68:	6222      	str	r2, [r4, #32]
    self_p->to_size = (size_t)to_size;
   16c6a:	6263      	str	r3, [r4, #36]	; 0x24
    if (to_size > 0) {
   16c6c:	dd02      	ble.n	16c74 <process_init+0x62>
        self_p->state = detools_apply_patch_state_dfpatch_size_t;
   16c6e:	2301      	movs	r3, #1
   16c70:	7523      	strb	r3, [r4, #20]
   16c72:	e7e6      	b.n	16c42 <process_init+0x30>
        self_p->state = detools_apply_patch_state_done_t;
   16c74:	2307      	movs	r3, #7
   16c76:	7523      	strb	r3, [r4, #20]
   16c78:	e7e3      	b.n	16c42 <process_init+0x30>
        return (-DETOOLS_SHORT_HEADER);
   16c7a:	f06f 0011 	mvn.w	r0, #17
   16c7e:	e7e0      	b.n	16c42 <process_init+0x30>
        return (-DETOOLS_BAD_PATCH_TYPE);
   16c80:	f06f 0002 	mvn.w	r0, #2
   16c84:	e7dd      	b.n	16c42 <process_init+0x30>
        return (-DETOOLS_CORRUPT_PATCH);
   16c86:	f06f 0008 	mvn.w	r0, #8
   16c8a:	e7da      	b.n	16c42 <process_init+0x30>

00016c8c <apply_patch_process_once>:
{
   16c8c:	b510      	push	{r4, lr}
   16c8e:	4604      	mov	r4, r0
    switch (self_p->state) {
   16c90:	7d03      	ldrb	r3, [r0, #20]
   16c92:	2b08      	cmp	r3, #8
   16c94:	d822      	bhi.n	16cdc <apply_patch_process_once+0x50>
   16c96:	e8df f003 	tbb	[pc, r3]
   16c9a:	0f08      	.short	0x0f08
   16c9c:	1b181512 	.word	0x1b181512
   16ca0:	241e      	.short	0x241e
   16ca2:	05          	.byte	0x05
   16ca3:	00          	.byte	0x00
   16ca4:	f06f 0017 	mvn.w	r0, #23
   16ca8:	e003      	b.n	16cb2 <apply_patch_process_once+0x26>
        res = process_init(self_p);
   16caa:	f7ff ffb2 	bl	16c12 <process_init>
    if (res < 0) {
   16cae:	2800      	cmp	r0, #0
   16cb0:	da01      	bge.n	16cb6 <apply_patch_process_once+0x2a>
        self_p->state = detools_apply_patch_state_failed_t;
   16cb2:	2308      	movs	r3, #8
   16cb4:	7523      	strb	r3, [r4, #20]
}
   16cb6:	bd10      	pop	{r4, pc}
        res = process_dfpatch_size(self_p);
   16cb8:	f7ff fe88 	bl	169cc <process_dfpatch_size>
        break;
   16cbc:	e7f7      	b.n	16cae <apply_patch_process_once+0x22>
        res = process_diff_size(self_p);
   16cbe:	f7ff feea 	bl	16a96 <process_diff_size>
        break;
   16cc2:	e7f4      	b.n	16cae <apply_patch_process_once+0x22>
        res = process_diff_data(self_p);
   16cc4:	f7ff feec 	bl	16aa0 <process_diff_data>
        break;
   16cc8:	e7f1      	b.n	16cae <apply_patch_process_once+0x22>
        res = process_extra_size(self_p);
   16cca:	f7ff feee 	bl	16aaa <process_extra_size>
        break;
   16cce:	e7ee      	b.n	16cae <apply_patch_process_once+0x22>
        res = process_extra_data(self_p);
   16cd0:	f7ff fef0 	bl	16ab4 <process_extra_data>
        break;
   16cd4:	e7eb      	b.n	16cae <apply_patch_process_once+0x22>
        res = process_adjustment(self_p);
   16cd6:	f7ff fef2 	bl	16abe <process_adjustment>
        break;
   16cda:	e7e8      	b.n	16cae <apply_patch_process_once+0x22>
        res = -DETOOLS_INTERNAL_ERROR;
   16cdc:	f06f 0004 	mvn.w	r0, #4
   16ce0:	e7e7      	b.n	16cb2 <apply_patch_process_once+0x26>
        res = -DETOOLS_ALREADY_DONE;
   16ce2:	f06f 000a 	mvn.w	r0, #10
   16ce6:	e7e4      	b.n	16cb2 <apply_patch_process_once+0x26>

00016ce8 <detools_apply_patch_init>:
{
   16ce8:	4684      	mov	ip, r0
    self_p->from_read = from_read;
   16cea:	6001      	str	r1, [r0, #0]
    self_p->from_seek = from_seek;
   16cec:	6042      	str	r2, [r0, #4]
    self_p->patch_size = patch_size;
   16cee:	6083      	str	r3, [r0, #8]
    self_p->patch_offset = 0;
   16cf0:	2000      	movs	r0, #0
   16cf2:	f8cc 001c 	str.w	r0, [ip, #28]
    self_p->to_write = to_write;
   16cf6:	9b00      	ldr	r3, [sp, #0]
   16cf8:	f8cc 300c 	str.w	r3, [ip, #12]
    self_p->from_offset = 0;
   16cfc:	f8cc 0028 	str.w	r0, [ip, #40]	; 0x28
    self_p->arg_p = arg_p;
   16d00:	9b01      	ldr	r3, [sp, #4]
   16d02:	f8cc 3010 	str.w	r3, [ip, #16]
    self_p->state = detools_apply_patch_state_init_t;
   16d06:	f88c 0014 	strb.w	r0, [ip, #20]
    self_p->patch_reader.destroy = NULL;
   16d0a:	f8cc 0254 	str.w	r0, [ip, #596]	; 0x254
}
   16d0e:	4770      	bx	lr

00016d10 <detools_apply_patch_process>:
{
   16d10:	b538      	push	{r3, r4, r5, lr}
   16d12:	4605      	mov	r5, r0
    self_p->patch_offset += size;
   16d14:	69c3      	ldr	r3, [r0, #28]
   16d16:	4413      	add	r3, r2
   16d18:	61c3      	str	r3, [r0, #28]
    self_p->chunk.buf_p = patch_p;
   16d1a:	f8c0 125c 	str.w	r1, [r0, #604]	; 0x25c
    self_p->chunk.size = size;
   16d1e:	f8c0 2260 	str.w	r2, [r0, #608]	; 0x260
    self_p->chunk.offset = 0;
   16d22:	2400      	movs	r4, #0
   16d24:	f8c0 4264 	str.w	r4, [r0, #612]	; 0x264
    while (chunk_available(&self_p->chunk) && (res >= 0)) {
   16d28:	e003      	b.n	16d32 <detools_apply_patch_process+0x22>
        res = apply_patch_process_once(self_p);
   16d2a:	4628      	mov	r0, r5
   16d2c:	f7ff ffae 	bl	16c8c <apply_patch_process_once>
   16d30:	4604      	mov	r4, r0
    while (chunk_available(&self_p->chunk) && (res >= 0)) {
   16d32:	f505 7017 	add.w	r0, r5, #604	; 0x25c
   16d36:	f7ff fd89 	bl	1684c <chunk_available>
   16d3a:	b108      	cbz	r0, 16d40 <detools_apply_patch_process+0x30>
   16d3c:	2c00      	cmp	r4, #0
   16d3e:	daf4      	bge.n	16d2a <detools_apply_patch_process+0x1a>
    if (res == 1) {
   16d40:	2c01      	cmp	r4, #1
   16d42:	d001      	beq.n	16d48 <detools_apply_patch_process+0x38>
}
   16d44:	4620      	mov	r0, r4
   16d46:	bd38      	pop	{r3, r4, r5, pc}
        res = 0;
   16d48:	2400      	movs	r4, #0
    return (res);
   16d4a:	e7fb      	b.n	16d44 <detools_apply_patch_process+0x34>

00016d4c <detools_apply_patch_finalize>:
{
   16d4c:	b510      	push	{r4, lr}
   16d4e:	4604      	mov	r4, r0
    self_p->chunk.size = 0;
   16d50:	2300      	movs	r3, #0
   16d52:	f8c0 3260 	str.w	r3, [r0, #608]	; 0x260
    self_p->chunk.offset = 0;
   16d56:	f8c0 3264 	str.w	r3, [r0, #612]	; 0x264
        res = apply_patch_process_once(self_p);
   16d5a:	4620      	mov	r0, r4
   16d5c:	f7ff ff96 	bl	16c8c <apply_patch_process_once>
    } while (res == 0);
   16d60:	2800      	cmp	r0, #0
   16d62:	d0fa      	beq.n	16d5a <detools_apply_patch_finalize+0xe>
    return (apply_patch_common_finalize(res,
   16d64:	6a62      	ldr	r2, [r4, #36]	; 0x24
   16d66:	f104 0130 	add.w	r1, r4, #48	; 0x30
   16d6a:	f7ff fec7 	bl	16afc <apply_patch_common_finalize>
}
   16d6e:	bd10      	pop	{r4, pc}

00016d70 <detools_apply_patch_callbacks>:
                                  detools_seek_t from_seek,
                                  detools_read_t patch_read,
                                  size_t patch_size,
                                  detools_write_t to_write,
                                  void *arg_p)
{
   16d70:	b570      	push	{r4, r5, r6, lr}
   16d72:	f5ad 7d1c 	sub.w	sp, sp, #624	; 0x270
   16d76:	4614      	mov	r4, r2
   16d78:	461d      	mov	r5, r3
   16d7a:	9ea1      	ldr	r6, [sp, #644]	; 0x284
    int res;
    struct detools_apply_patch_t apply_patch;

    res = detools_apply_patch_init(&apply_patch,
   16d7c:	9601      	str	r6, [sp, #4]
   16d7e:	9aa0      	ldr	r2, [sp, #640]	; 0x280
   16d80:	9200      	str	r2, [sp, #0]
   16d82:	460a      	mov	r2, r1
   16d84:	4601      	mov	r1, r0
   16d86:	a802      	add	r0, sp, #8
   16d88:	f7ff ffae 	bl	16ce8 <detools_apply_patch_init>
                                   from_seek,
                                   patch_size,
                                   to_write,
                                   arg_p);

    if (res != 0) {
   16d8c:	b110      	cbz	r0, 16d94 <detools_apply_patch_callbacks+0x24>
        return (res);
    }

    return (callbacks_process(&apply_patch, patch_read, patch_size, arg_p));
}
   16d8e:	f50d 7d1c 	add.w	sp, sp, #624	; 0x270
   16d92:	bd70      	pop	{r4, r5, r6, pc}
    return (callbacks_process(&apply_patch, patch_read, patch_size, arg_p));
   16d94:	4633      	mov	r3, r6
   16d96:	462a      	mov	r2, r5
   16d98:	4621      	mov	r1, r4
   16d9a:	a802      	add	r0, sp, #8
   16d9c:	f7f9 fd10 	bl	107c0 <callbacks_process>
   16da0:	e7f5      	b.n	16d8e <detools_apply_patch_callbacks+0x1e>

00016da2 <get_bits>:
/* Get the next COUNT bits from the input buffer, saving incremental progress.
 * Returns NO_BITS on end of input, or if more than 15 bits are requested. */
static uint16_t get_bits(heatshrink_decoder *hsd, uint8_t count) {
    uint16_t accumulator = 0;
    int i = 0;
    if (count > 15) { return NO_BITS; }
   16da2:	290f      	cmp	r1, #15
   16da4:	d83a      	bhi.n	16e1c <get_bits+0x7a>
static uint16_t get_bits(heatshrink_decoder *hsd, uint8_t count) {
   16da6:	b510      	push	{r4, lr}
   16da8:	4603      	mov	r3, r0
    LOG("-- popping %u bit(s)\n", count);

    /* If we aren't able to get COUNT bits, suspend immediately, because we
     * don't track how many bits of COUNT we've accumulated before suspend. */
    if (hsd->input_size == 0) {
   16daa:	8800      	ldrh	r0, [r0, #0]
   16dac:	bb90      	cbnz	r0, 16e14 <get_bits+0x72>
        if (hsd->bit_index < (1 << (count - 1))) { return NO_BITS; }
   16dae:	7b1c      	ldrb	r4, [r3, #12]
   16db0:	f101 3cff 	add.w	ip, r1, #4294967295
   16db4:	2201      	movs	r2, #1
   16db6:	fa02 f20c 	lsl.w	r2, r2, ip
   16dba:	4294      	cmp	r4, r2
   16dbc:	db31      	blt.n	16e22 <get_bits+0x80>
   16dbe:	f04f 0e00 	mov.w	lr, #0
   16dc2:	e00f      	b.n	16de4 <get_bits+0x42>
            LOG("  -- pulled byte 0x%02x\n", hsd->current_byte);
            if (hsd->input_index == hsd->input_size) {
                hsd->input_index = 0; /* input is exhausted */
                hsd->input_size = 0;
            }
            hsd->bit_index = 0x80;
   16dc4:	2280      	movs	r2, #128	; 0x80
   16dc6:	731a      	strb	r2, [r3, #12]
        }
        accumulator <<= 1;
   16dc8:	0040      	lsls	r0, r0, #1
   16dca:	b280      	uxth	r0, r0
        if (hsd->current_byte & hsd->bit_index) {
   16dcc:	f893 c00b 	ldrb.w	ip, [r3, #11]
   16dd0:	7b1a      	ldrb	r2, [r3, #12]
   16dd2:	ea1c 0f02 	tst.w	ip, r2
   16dd6:	d001      	beq.n	16ddc <get_bits+0x3a>
            accumulator |= 0x01;
   16dd8:	f040 0001 	orr.w	r0, r0, #1
            if (0) {
                LOG("  -- got 0, accumulator 0x%04x, bit_index 0x%02x\n",
                accumulator, hsd->bit_index);
            }
        }
        hsd->bit_index >>= 1;
   16ddc:	0852      	lsrs	r2, r2, #1
   16dde:	731a      	strb	r2, [r3, #12]
    for (i = 0; i < count; i++) {
   16de0:	f10e 0e01 	add.w	lr, lr, #1
   16de4:	4571      	cmp	r1, lr
   16de6:	dd21      	ble.n	16e2c <get_bits+0x8a>
        if (hsd->bit_index == 0x00) {
   16de8:	7b1a      	ldrb	r2, [r3, #12]
   16dea:	2a00      	cmp	r2, #0
   16dec:	d1ec      	bne.n	16dc8 <get_bits+0x26>
            if (hsd->input_size == 0) {
   16dee:	881c      	ldrh	r4, [r3, #0]
   16df0:	b1d4      	cbz	r4, 16e28 <get_bits+0x86>
            hsd->current_byte = hsd->buffers[hsd->input_index++];
   16df2:	f8b3 c002 	ldrh.w	ip, [r3, #2]
   16df6:	f10c 0201 	add.w	r2, ip, #1
   16dfa:	b292      	uxth	r2, r2
   16dfc:	805a      	strh	r2, [r3, #2]
   16dfe:	449c      	add	ip, r3
   16e00:	f89c c00d 	ldrb.w	ip, [ip, #13]
   16e04:	f883 c00b 	strb.w	ip, [r3, #11]
            if (hsd->input_index == hsd->input_size) {
   16e08:	4294      	cmp	r4, r2
   16e0a:	d1db      	bne.n	16dc4 <get_bits+0x22>
                hsd->input_index = 0; /* input is exhausted */
   16e0c:	2200      	movs	r2, #0
   16e0e:	805a      	strh	r2, [r3, #2]
                hsd->input_size = 0;
   16e10:	801a      	strh	r2, [r3, #0]
   16e12:	e7d7      	b.n	16dc4 <get_bits+0x22>
   16e14:	f04f 0e00 	mov.w	lr, #0
   16e18:	4670      	mov	r0, lr
   16e1a:	e7e3      	b.n	16de4 <get_bits+0x42>
    if (count > 15) { return NO_BITS; }
   16e1c:	f64f 70ff 	movw	r0, #65535	; 0xffff
    }

    if (count > 1) { LOG("  -- accumulated %08x\n", accumulator); }
    return accumulator;
}
   16e20:	4770      	bx	lr
        if (hsd->bit_index < (1 << (count - 1))) { return NO_BITS; }
   16e22:	f64f 70ff 	movw	r0, #65535	; 0xffff
   16e26:	e001      	b.n	16e2c <get_bits+0x8a>
                return NO_BITS;
   16e28:	f64f 70ff 	movw	r0, #65535	; 0xffff
}
   16e2c:	bd10      	pop	{r4, pc}

00016e2e <st_tag_bit>:
static HSD_state st_tag_bit(heatshrink_decoder *hsd) {
   16e2e:	b510      	push	{r4, lr}
   16e30:	4604      	mov	r4, r0
    uint32_t bits = get_bits(hsd, 1);  // get tag bit
   16e32:	2101      	movs	r1, #1
   16e34:	f7ff ffb5 	bl	16da2 <get_bits>
    if (bits == NO_BITS) {
   16e38:	f64f 73ff 	movw	r3, #65535	; 0xffff
   16e3c:	4298      	cmp	r0, r3
   16e3e:	d006      	beq.n	16e4e <st_tag_bit+0x20>
    } else if (bits) {
   16e40:	b108      	cbz	r0, 16e46 <st_tag_bit+0x18>
        return HSDS_YIELD_LITERAL;
   16e42:	2001      	movs	r0, #1
}
   16e44:	bd10      	pop	{r4, pc}
        hsd->output_index = 0;
   16e46:	2300      	movs	r3, #0
   16e48:	80e3      	strh	r3, [r4, #6]
        return HSDS_BACKREF_INDEX_LSB;
   16e4a:	2003      	movs	r0, #3
   16e4c:	e7fa      	b.n	16e44 <st_tag_bit+0x16>
        return HSDS_TAG_BIT;
   16e4e:	2000      	movs	r0, #0
   16e50:	e7f8      	b.n	16e44 <st_tag_bit+0x16>

00016e52 <st_backref_index_msb>:
static HSD_state st_backref_index_msb(heatshrink_decoder *hsd) {
   16e52:	b510      	push	{r4, lr}
   16e54:	4604      	mov	r4, r0
    uint16_t bits = get_bits(hsd, bit_ct - 8);
   16e56:	2100      	movs	r1, #0
   16e58:	f7ff ffa3 	bl	16da2 <get_bits>
    if (bits == NO_BITS) { return HSDS_BACKREF_INDEX_MSB; }
   16e5c:	f64f 73ff 	movw	r3, #65535	; 0xffff
   16e60:	4298      	cmp	r0, r3
   16e62:	d003      	beq.n	16e6c <st_backref_index_msb+0x1a>
    hsd->output_index = bits << 8;
   16e64:	0200      	lsls	r0, r0, #8
   16e66:	80e0      	strh	r0, [r4, #6]
    return HSDS_BACKREF_INDEX_LSB;
   16e68:	2003      	movs	r0, #3
}
   16e6a:	bd10      	pop	{r4, pc}
    if (bits == NO_BITS) { return HSDS_BACKREF_INDEX_MSB; }
   16e6c:	2002      	movs	r0, #2
   16e6e:	e7fc      	b.n	16e6a <st_backref_index_msb+0x18>

00016e70 <st_backref_index_lsb>:
static HSD_state st_backref_index_lsb(heatshrink_decoder *hsd) {
   16e70:	b510      	push	{r4, lr}
   16e72:	4604      	mov	r4, r0
    uint16_t bits = get_bits(hsd, bit_ct < 8 ? bit_ct : 8);
   16e74:	2108      	movs	r1, #8
   16e76:	f7ff ff94 	bl	16da2 <get_bits>
    if (bits == NO_BITS) { return HSDS_BACKREF_INDEX_LSB; }
   16e7a:	f64f 73ff 	movw	r3, #65535	; 0xffff
   16e7e:	4298      	cmp	r0, r3
   16e80:	d009      	beq.n	16e96 <st_backref_index_lsb+0x26>
    hsd->output_index |= bits;
   16e82:	88e3      	ldrh	r3, [r4, #6]
   16e84:	4303      	orrs	r3, r0
   16e86:	b29b      	uxth	r3, r3
   16e88:	80e3      	strh	r3, [r4, #6]
    hsd->output_index++;
   16e8a:	3301      	adds	r3, #1
   16e8c:	80e3      	strh	r3, [r4, #6]
    hsd->output_count = 0;
   16e8e:	2300      	movs	r3, #0
   16e90:	80a3      	strh	r3, [r4, #4]
    return (br_bit_ct > 8) ? HSDS_BACKREF_COUNT_MSB : HSDS_BACKREF_COUNT_LSB;
   16e92:	2005      	movs	r0, #5
}
   16e94:	bd10      	pop	{r4, pc}
    if (bits == NO_BITS) { return HSDS_BACKREF_INDEX_LSB; }
   16e96:	2003      	movs	r0, #3
   16e98:	e7fc      	b.n	16e94 <st_backref_index_lsb+0x24>

00016e9a <st_backref_count_msb>:
static HSD_state st_backref_count_msb(heatshrink_decoder *hsd) {
   16e9a:	b510      	push	{r4, lr}
   16e9c:	4604      	mov	r4, r0
    uint16_t bits = get_bits(hsd, br_bit_ct - 8);
   16e9e:	21ff      	movs	r1, #255	; 0xff
   16ea0:	f7ff ff7f 	bl	16da2 <get_bits>
    if (bits == NO_BITS) { return HSDS_BACKREF_COUNT_MSB; }
   16ea4:	f64f 73ff 	movw	r3, #65535	; 0xffff
   16ea8:	4298      	cmp	r0, r3
   16eaa:	d003      	beq.n	16eb4 <st_backref_count_msb+0x1a>
    hsd->output_count = bits << 8;
   16eac:	0200      	lsls	r0, r0, #8
   16eae:	80a0      	strh	r0, [r4, #4]
    return HSDS_BACKREF_COUNT_LSB;
   16eb0:	2005      	movs	r0, #5
}
   16eb2:	bd10      	pop	{r4, pc}
    if (bits == NO_BITS) { return HSDS_BACKREF_COUNT_MSB; }
   16eb4:	2004      	movs	r0, #4
   16eb6:	e7fc      	b.n	16eb2 <st_backref_count_msb+0x18>

00016eb8 <st_backref_count_lsb>:
static HSD_state st_backref_count_lsb(heatshrink_decoder *hsd) {
   16eb8:	b510      	push	{r4, lr}
   16eba:	4604      	mov	r4, r0
    uint16_t bits = get_bits(hsd, br_bit_ct < 8 ? br_bit_ct : 8);
   16ebc:	2107      	movs	r1, #7
   16ebe:	f7ff ff70 	bl	16da2 <get_bits>
    if (bits == NO_BITS) { return HSDS_BACKREF_COUNT_LSB; }
   16ec2:	f64f 73ff 	movw	r3, #65535	; 0xffff
   16ec6:	4298      	cmp	r0, r3
   16ec8:	d007      	beq.n	16eda <st_backref_count_lsb+0x22>
    hsd->output_count |= bits;
   16eca:	88a3      	ldrh	r3, [r4, #4]
   16ecc:	4303      	orrs	r3, r0
   16ece:	b29b      	uxth	r3, r3
   16ed0:	80a3      	strh	r3, [r4, #4]
    hsd->output_count++;
   16ed2:	3301      	adds	r3, #1
   16ed4:	80a3      	strh	r3, [r4, #4]
    return HSDS_YIELD_BACKREF;
   16ed6:	2006      	movs	r0, #6
}
   16ed8:	bd10      	pop	{r4, pc}
    if (bits == NO_BITS) { return HSDS_BACKREF_COUNT_LSB; }
   16eda:	2005      	movs	r0, #5
   16edc:	e7fc      	b.n	16ed8 <st_backref_count_lsb+0x20>

00016ede <push_byte>:
    default:
        return HSDR_FINISH_MORE;
    }
}

static void push_byte(heatshrink_decoder *hsd, output_info *oi, uint8_t byte) {
   16ede:	b410      	push	{r4}
    LOG(" -- pushing byte: 0x%02x ('%c')\n", byte, isprint(byte) ? byte : '.');
    oi->buf[(*oi->output_size)++] = byte;
   16ee0:	6808      	ldr	r0, [r1, #0]
   16ee2:	6889      	ldr	r1, [r1, #8]
   16ee4:	680b      	ldr	r3, [r1, #0]
   16ee6:	1c5c      	adds	r4, r3, #1
   16ee8:	600c      	str	r4, [r1, #0]
   16eea:	54c2      	strb	r2, [r0, r3]
    (void)hsd;
}
   16eec:	bc10      	pop	{r4}
   16eee:	4770      	bx	lr

00016ef0 <st_yield_literal>:
        output_info *oi) {
   16ef0:	b538      	push	{r3, r4, r5, lr}
    if (*oi->output_size < oi->buf_size) {
   16ef2:	688b      	ldr	r3, [r1, #8]
   16ef4:	681a      	ldr	r2, [r3, #0]
   16ef6:	684b      	ldr	r3, [r1, #4]
   16ef8:	429a      	cmp	r2, r3
   16efa:	d301      	bcc.n	16f00 <st_yield_literal+0x10>
        return HSDS_YIELD_LITERAL;
   16efc:	2001      	movs	r0, #1
}
   16efe:	bd38      	pop	{r3, r4, r5, pc}
   16f00:	4605      	mov	r5, r0
   16f02:	460c      	mov	r4, r1
        uint16_t byte = get_bits(hsd, 8);
   16f04:	2108      	movs	r1, #8
   16f06:	f7ff ff4c 	bl	16da2 <get_bits>
        if (byte == NO_BITS) { return HSDS_YIELD_LITERAL; } /* out of input */
   16f0a:	f64f 73ff 	movw	r3, #65535	; 0xffff
   16f0e:	4298      	cmp	r0, r3
   16f10:	d101      	bne.n	16f16 <st_yield_literal+0x26>
   16f12:	2001      	movs	r0, #1
   16f14:	e7f3      	b.n	16efe <st_yield_literal+0xe>
        uint8_t *buf = &hsd->buffers[HEATSHRINK_DECODER_INPUT_BUFFER_SIZE(hsd)];
   16f16:	f205 110d 	addw	r1, r5, #269	; 0x10d
        uint8_t c = byte & 0xFF;
   16f1a:	b2c2      	uxtb	r2, r0
        buf[hsd->head_index++ & mask] = c;
   16f1c:	892b      	ldrh	r3, [r5, #8]
   16f1e:	1c58      	adds	r0, r3, #1
   16f20:	8128      	strh	r0, [r5, #8]
   16f22:	b2db      	uxtb	r3, r3
   16f24:	54ca      	strb	r2, [r1, r3]
        push_byte(hsd, oi, c);
   16f26:	4621      	mov	r1, r4
   16f28:	4628      	mov	r0, r5
   16f2a:	f7ff ffd8 	bl	16ede <push_byte>
        return HSDS_TAG_BIT;
   16f2e:	2000      	movs	r0, #0
   16f30:	e7e5      	b.n	16efe <st_yield_literal+0xe>

00016f32 <st_yield_backref>:
    size_t count = oi->buf_size - *oi->output_size;
   16f32:	684b      	ldr	r3, [r1, #4]
   16f34:	688a      	ldr	r2, [r1, #8]
   16f36:	6812      	ldr	r2, [r2, #0]
    if (count > 0) {
   16f38:	1a9b      	subs	r3, r3, r2
   16f3a:	d02c      	beq.n	16f96 <st_yield_backref+0x64>
        output_info *oi) {
   16f3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   16f40:	4604      	mov	r4, r0
   16f42:	460f      	mov	r7, r1
        if (hsd->output_count < count) count = hsd->output_count;
   16f44:	f8b0 8004 	ldrh.w	r8, [r0, #4]
   16f48:	4598      	cmp	r8, r3
   16f4a:	d300      	bcc.n	16f4e <st_yield_backref+0x1c>
    size_t count = oi->buf_size - *oi->output_size;
   16f4c:	4698      	mov	r8, r3
        uint8_t *buf = &hsd->buffers[HEATSHRINK_DECODER_INPUT_BUFFER_SIZE(hsd)];
   16f4e:	f204 160d 	addw	r6, r4, #269	; 0x10d
        uint16_t neg_offset = hsd->output_index;
   16f52:	f8b4 9006 	ldrh.w	r9, [r4, #6]
        for (i=0; i<count; i++) {
   16f56:	2500      	movs	r5, #0
   16f58:	e011      	b.n	16f7e <st_yield_backref+0x4c>
            uint8_t c = buf[(hsd->head_index - neg_offset) & mask];
   16f5a:	8923      	ldrh	r3, [r4, #8]
   16f5c:	eba3 0309 	sub.w	r3, r3, r9
   16f60:	b2db      	uxtb	r3, r3
   16f62:	f816 a003 	ldrb.w	sl, [r6, r3]
            push_byte(hsd, oi, c);
   16f66:	4652      	mov	r2, sl
   16f68:	4639      	mov	r1, r7
   16f6a:	4620      	mov	r0, r4
   16f6c:	f7ff ffb7 	bl	16ede <push_byte>
            buf[hsd->head_index & mask] = c;
   16f70:	7a23      	ldrb	r3, [r4, #8]
   16f72:	f806 a003 	strb.w	sl, [r6, r3]
            hsd->head_index++;
   16f76:	8923      	ldrh	r3, [r4, #8]
   16f78:	3301      	adds	r3, #1
   16f7a:	8123      	strh	r3, [r4, #8]
        for (i=0; i<count; i++) {
   16f7c:	3501      	adds	r5, #1
   16f7e:	45a8      	cmp	r8, r5
   16f80:	d8eb      	bhi.n	16f5a <st_yield_backref+0x28>
        hsd->output_count -= count;
   16f82:	88a3      	ldrh	r3, [r4, #4]
   16f84:	eba3 0808 	sub.w	r8, r3, r8
   16f88:	fa1f f388 	uxth.w	r3, r8
   16f8c:	80a3      	strh	r3, [r4, #4]
        if (hsd->output_count == 0) { return HSDS_TAG_BIT; }
   16f8e:	b123      	cbz	r3, 16f9a <st_yield_backref+0x68>
    return HSDS_YIELD_BACKREF;
   16f90:	2006      	movs	r0, #6
}
   16f92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return HSDS_YIELD_BACKREF;
   16f96:	2006      	movs	r0, #6
}
   16f98:	4770      	bx	lr
        if (hsd->output_count == 0) { return HSDS_TAG_BIT; }
   16f9a:	2000      	movs	r0, #0
   16f9c:	e7f9      	b.n	16f92 <st_yield_backref+0x60>

00016f9e <heatshrink_decoder_reset>:
void heatshrink_decoder_reset(heatshrink_decoder *hsd) {
   16f9e:	b510      	push	{r4, lr}
   16fa0:	4604      	mov	r4, r0
    memset(hsd->buffers, 0, buf_sz + input_sz);
   16fa2:	f44f 7200 	mov.w	r2, #512	; 0x200
   16fa6:	2100      	movs	r1, #0
   16fa8:	300d      	adds	r0, #13
   16faa:	f000 fe49 	bl	17c40 <memset>
    hsd->state = HSDS_TAG_BIT;
   16fae:	2300      	movs	r3, #0
   16fb0:	72a3      	strb	r3, [r4, #10]
    hsd->input_size = 0;
   16fb2:	8023      	strh	r3, [r4, #0]
    hsd->input_index = 0;
   16fb4:	8063      	strh	r3, [r4, #2]
    hsd->bit_index = 0x00;
   16fb6:	7323      	strb	r3, [r4, #12]
    hsd->current_byte = 0x00;
   16fb8:	72e3      	strb	r3, [r4, #11]
    hsd->output_count = 0;
   16fba:	80a3      	strh	r3, [r4, #4]
    hsd->output_index = 0;
   16fbc:	80e3      	strh	r3, [r4, #6]
    hsd->head_index = 0;
   16fbe:	8123      	strh	r3, [r4, #8]
}
   16fc0:	bd10      	pop	{r4, pc}

00016fc2 <heatshrink_decoder_sink>:
    if ((hsd == NULL) || (in_buf == NULL) || (input_size == NULL)) {
   16fc2:	b1d8      	cbz	r0, 16ffc <heatshrink_decoder_sink+0x3a>
        uint8_t *in_buf, size_t size, size_t *input_size) {
   16fc4:	b570      	push	{r4, r5, r6, lr}
   16fc6:	461c      	mov	r4, r3
   16fc8:	4605      	mov	r5, r0
    if ((hsd == NULL) || (in_buf == NULL) || (input_size == NULL)) {
   16fca:	b1d1      	cbz	r1, 17002 <heatshrink_decoder_sink+0x40>
   16fcc:	b1e3      	cbz	r3, 17008 <heatshrink_decoder_sink+0x46>
    size_t rem = HEATSHRINK_DECODER_INPUT_BUFFER_SIZE(hsd) - hsd->input_size;
   16fce:	8800      	ldrh	r0, [r0, #0]
    if (rem == 0) {
   16fd0:	f5d0 7680 	rsbs	r6, r0, #256	; 0x100
   16fd4:	d103      	bne.n	16fde <heatshrink_decoder_sink+0x1c>
        *input_size = 0;
   16fd6:	2300      	movs	r3, #0
   16fd8:	6023      	str	r3, [r4, #0]
        return HSDR_SINK_FULL;
   16fda:	2001      	movs	r0, #1
}
   16fdc:	bd70      	pop	{r4, r5, r6, pc}
    size = rem < size ? rem : size;
   16fde:	4296      	cmp	r6, r2
   16fe0:	bf28      	it	cs
   16fe2:	4616      	movcs	r6, r2
    memcpy(&hsd->buffers[hsd->input_size], in_buf, size);
   16fe4:	3008      	adds	r0, #8
   16fe6:	4428      	add	r0, r5
   16fe8:	4632      	mov	r2, r6
   16fea:	3005      	adds	r0, #5
   16fec:	f000 fdf9 	bl	17be2 <memcpy>
    hsd->input_size += size;
   16ff0:	882b      	ldrh	r3, [r5, #0]
   16ff2:	4433      	add	r3, r6
   16ff4:	802b      	strh	r3, [r5, #0]
    *input_size = size;
   16ff6:	6026      	str	r6, [r4, #0]
    return HSDR_SINK_OK;
   16ff8:	2000      	movs	r0, #0
   16ffa:	e7ef      	b.n	16fdc <heatshrink_decoder_sink+0x1a>
        return HSDR_SINK_ERROR_NULL;
   16ffc:	f04f 30ff 	mov.w	r0, #4294967295
}
   17000:	4770      	bx	lr
        return HSDR_SINK_ERROR_NULL;
   17002:	f04f 30ff 	mov.w	r0, #4294967295
   17006:	e7e9      	b.n	16fdc <heatshrink_decoder_sink+0x1a>
   17008:	f04f 30ff 	mov.w	r0, #4294967295
   1700c:	e7e6      	b.n	16fdc <heatshrink_decoder_sink+0x1a>

0001700e <heatshrink_decoder_finish>:
    if (hsd == NULL) { return HSDR_FINISH_ERROR_NULL; }
   1700e:	b1c8      	cbz	r0, 17044 <heatshrink_decoder_finish+0x36>
    switch (hsd->state) {
   17010:	7a83      	ldrb	r3, [r0, #10]
   17012:	2b01      	cmp	r3, #1
   17014:	d011      	beq.n	1703a <heatshrink_decoder_finish+0x2c>
   17016:	d807      	bhi.n	17028 <heatshrink_decoder_finish+0x1a>
   17018:	b923      	cbnz	r3, 17024 <heatshrink_decoder_finish+0x16>
        return hsd->input_size == 0 ? HSDR_FINISH_DONE : HSDR_FINISH_MORE;
   1701a:	8800      	ldrh	r0, [r0, #0]
   1701c:	3800      	subs	r0, #0
   1701e:	bf18      	it	ne
   17020:	2001      	movne	r0, #1
   17022:	4770      	bx	lr
    switch (hsd->state) {
   17024:	2001      	movs	r0, #1
   17026:	4770      	bx	lr
   17028:	3b02      	subs	r3, #2
   1702a:	b2db      	uxtb	r3, r3
   1702c:	2b03      	cmp	r3, #3
   1702e:	d80c      	bhi.n	1704a <heatshrink_decoder_finish+0x3c>
        return hsd->input_size == 0 ? HSDR_FINISH_DONE : HSDR_FINISH_MORE;
   17030:	8800      	ldrh	r0, [r0, #0]
   17032:	3800      	subs	r0, #0
   17034:	bf18      	it	ne
   17036:	2001      	movne	r0, #1
   17038:	4770      	bx	lr
        return hsd->input_size == 0 ? HSDR_FINISH_DONE : HSDR_FINISH_MORE;
   1703a:	8800      	ldrh	r0, [r0, #0]
   1703c:	3800      	subs	r0, #0
   1703e:	bf18      	it	ne
   17040:	2001      	movne	r0, #1
   17042:	4770      	bx	lr
    if (hsd == NULL) { return HSDR_FINISH_ERROR_NULL; }
   17044:	f04f 30ff 	mov.w	r0, #4294967295
   17048:	4770      	bx	lr
    switch (hsd->state) {
   1704a:	2001      	movs	r0, #1
}
   1704c:	4770      	bx	lr

0001704e <erase_page>:
{
   1704e:	b508      	push	{r3, lr}
	offset = offset - offset%PAGE_SIZE; /* find start of page */
   17050:	424a      	negs	r2, r1
   17052:	f3c1 030b 	ubfx	r3, r1, #0, #12
   17056:	f3c2 020b 	ubfx	r2, r2, #0, #12
   1705a:	bf58      	it	pl
   1705c:	4253      	negpl	r3, r2
   1705e:	1ac9      	subs	r1, r1, r3
	if (flash_erase(flash->device, offset, PAGE_SIZE)) {
   17060:	6800      	ldr	r0, [r0, #0]
__syscall int flash_erase(const struct device *dev, off_t offset, size_t size);

static inline int z_impl_flash_erase(const struct device *dev, off_t offset,
				     size_t size)
{
	const struct flash_driver_api *api =
   17062:	6883      	ldr	r3, [r0, #8]
		(const struct flash_driver_api *)dev->api;
	int rc;

	rc = api->erase(dev, offset, size);
   17064:	689b      	ldr	r3, [r3, #8]
   17066:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   1706a:	4798      	blx	r3
   1706c:	b900      	cbnz	r0, 17070 <erase_page+0x22>
}
   1706e:	bd08      	pop	{r3, pc}
		return -DELTA_CLEARING_ERROR;
   17070:	f06f 0022 	mvn.w	r0, #34	; 0x22
   17074:	e7fb      	b.n	1706e <erase_page+0x20>

00017076 <delta_flash_write>:
{
   17076:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   17078:	4604      	mov	r4, r0
   1707a:	460e      	mov	r6, r1
   1707c:	4615      	mov	r5, r2
	flash->write_buf += size;
   1707e:	69c3      	ldr	r3, [r0, #28]
   17080:	4413      	add	r3, r2
   17082:	61c3      	str	r3, [r0, #28]
	if (flash->write_buf >= PAGE_SIZE) {
   17084:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
   17088:	d20f      	bcs.n	170aa <delta_flash_write+0x34>
	if (!flash) {
   1708a:	b1cc      	cbz	r4, 170c0 <delta_flash_write+0x4a>
	if (flash_write(flash->device, flash->to_current, buf_p, size)) {
   1708c:	6820      	ldr	r0, [r4, #0]
   1708e:	6961      	ldr	r1, [r4, #20]
	const struct flash_driver_api *api =
   17090:	6883      	ldr	r3, [r0, #8]
	rc = api->write(dev, offset, data, len);
   17092:	685f      	ldr	r7, [r3, #4]
   17094:	462b      	mov	r3, r5
   17096:	4632      	mov	r2, r6
   17098:	47b8      	blx	r7
   1709a:	b9a0      	cbnz	r0, 170c6 <delta_flash_write+0x50>
	flash->to_current += (off_t) size;
   1709c:	6962      	ldr	r2, [r4, #20]
   1709e:	4415      	add	r5, r2
   170a0:	6165      	str	r5, [r4, #20]
	if (flash->to_current >= flash->to_end) {
   170a2:	69a3      	ldr	r3, [r4, #24]
   170a4:	429d      	cmp	r5, r3
   170a6:	da11      	bge.n	170cc <delta_flash_write+0x56>
}
   170a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (erase_page(flash, flash->to_current + (off_t) size)) {
   170aa:	6941      	ldr	r1, [r0, #20]
   170ac:	4411      	add	r1, r2
   170ae:	f7ff ffce 	bl	1704e <erase_page>
   170b2:	b910      	cbnz	r0, 170ba <delta_flash_write+0x44>
		flash->write_buf = 0;
   170b4:	2300      	movs	r3, #0
   170b6:	61e3      	str	r3, [r4, #28]
   170b8:	e7e7      	b.n	1708a <delta_flash_write+0x14>
			return -DELTA_CLEARING_ERROR;
   170ba:	f06f 0022 	mvn.w	r0, #34	; 0x22
   170be:	e7f3      	b.n	170a8 <delta_flash_write+0x32>
		return -DELTA_CASTING_ERROR;
   170c0:	f06f 0020 	mvn.w	r0, #32
   170c4:	e7f0      	b.n	170a8 <delta_flash_write+0x32>
		return -DELTA_WRITING_ERROR;
   170c6:	f06f 001e 	mvn.w	r0, #30
   170ca:	e7ed      	b.n	170a8 <delta_flash_write+0x32>
		return -DELTA_SLOT1_OUT_OF_MEMORY;
   170cc:	f06f 001b 	mvn.w	r0, #27
   170d0:	e7ea      	b.n	170a8 <delta_flash_write+0x32>

000170d2 <delta_flash_from_read>:
	if (!flash) {
   170d2:	b198      	cbz	r0, 170fc <delta_flash_from_read+0x2a>
{
   170d4:	b570      	push	{r4, r5, r6, lr}
   170d6:	468c      	mov	ip, r1
   170d8:	4614      	mov	r4, r2
   170da:	4605      	mov	r5, r0
	if (size <= 0) {
   170dc:	b18a      	cbz	r2, 17102 <delta_flash_from_read+0x30>
	if (flash_read(flash->device, flash->from_current, buf_p, size)) {
   170de:	6800      	ldr	r0, [r0, #0]
   170e0:	68e9      	ldr	r1, [r5, #12]
	const struct flash_driver_api *api =
   170e2:	6883      	ldr	r3, [r0, #8]
	return api->read(dev, offset, data, len);
   170e4:	681e      	ldr	r6, [r3, #0]
   170e6:	4613      	mov	r3, r2
   170e8:	4662      	mov	r2, ip
   170ea:	47b0      	blx	r6
   170ec:	b960      	cbnz	r0, 17108 <delta_flash_from_read+0x36>
	flash->from_current += (off_t) size;
   170ee:	68ea      	ldr	r2, [r5, #12]
   170f0:	4414      	add	r4, r2
   170f2:	60ec      	str	r4, [r5, #12]
	if (flash->from_current >= flash->from_end) {
   170f4:	692b      	ldr	r3, [r5, #16]
   170f6:	429c      	cmp	r4, r3
   170f8:	da09      	bge.n	1710e <delta_flash_from_read+0x3c>
}
   170fa:	bd70      	pop	{r4, r5, r6, pc}
		return -DELTA_CASTING_ERROR;
   170fc:	f06f 0020 	mvn.w	r0, #32
}
   17100:	4770      	bx	lr
		return -DELTA_INVALID_BUF_SIZE;
   17102:	f06f 0021 	mvn.w	r0, #33	; 0x21
   17106:	e7f8      	b.n	170fa <delta_flash_from_read+0x28>
		return -DELTA_READING_SOURCE_ERROR;
   17108:	f06f 001d 	mvn.w	r0, #29
   1710c:	e7f5      	b.n	170fa <delta_flash_from_read+0x28>
		return -DELTA_READING_SOURCE_ERROR;
   1710e:	f06f 001d 	mvn.w	r0, #29
   17112:	e7f2      	b.n	170fa <delta_flash_from_read+0x28>

00017114 <delta_flash_patch_read>:
	if (!flash) {
   17114:	b198      	cbz	r0, 1713e <delta_flash_patch_read+0x2a>
{
   17116:	b570      	push	{r4, r5, r6, lr}
   17118:	468c      	mov	ip, r1
   1711a:	4614      	mov	r4, r2
   1711c:	4605      	mov	r5, r0
	if (size <= 0) {
   1711e:	b18a      	cbz	r2, 17144 <delta_flash_patch_read+0x30>
	if (flash_read(flash->device, flash->patch_current, buf_p, size)) {
   17120:	6800      	ldr	r0, [r0, #0]
   17122:	6869      	ldr	r1, [r5, #4]
	const struct flash_driver_api *api =
   17124:	6883      	ldr	r3, [r0, #8]
	return api->read(dev, offset, data, len);
   17126:	681e      	ldr	r6, [r3, #0]
   17128:	4613      	mov	r3, r2
   1712a:	4662      	mov	r2, ip
   1712c:	47b0      	blx	r6
   1712e:	b960      	cbnz	r0, 1714a <delta_flash_patch_read+0x36>
	flash->patch_current += (off_t) size;
   17130:	686a      	ldr	r2, [r5, #4]
   17132:	4414      	add	r4, r2
   17134:	606c      	str	r4, [r5, #4]
	if (flash->patch_current >= flash->patch_end) {
   17136:	68ab      	ldr	r3, [r5, #8]
   17138:	429c      	cmp	r4, r3
   1713a:	da09      	bge.n	17150 <delta_flash_patch_read+0x3c>
}
   1713c:	bd70      	pop	{r4, r5, r6, pc}
		return -DELTA_CASTING_ERROR;
   1713e:	f06f 0020 	mvn.w	r0, #32
}
   17142:	4770      	bx	lr
		return -DELTA_INVALID_BUF_SIZE;
   17144:	f06f 0021 	mvn.w	r0, #33	; 0x21
   17148:	e7f8      	b.n	1713c <delta_flash_patch_read+0x28>
		return -DELTA_READING_PATCH_ERROR;
   1714a:	f06f 001c 	mvn.w	r0, #28
   1714e:	e7f5      	b.n	1713c <delta_flash_patch_read+0x28>
		return -DELTA_READING_PATCH_ERROR;
   17150:	f06f 001c 	mvn.w	r0, #28
   17154:	e7f2      	b.n	1713c <delta_flash_patch_read+0x28>

00017156 <delta_flash_seek>:
	if (!flash) {
   17156:	b138      	cbz	r0, 17168 <delta_flash_seek+0x12>
	flash->from_current += offset;
   17158:	68c2      	ldr	r2, [r0, #12]
   1715a:	4411      	add	r1, r2
   1715c:	60c1      	str	r1, [r0, #12]
	if (flash->from_current >= flash->from_end) {
   1715e:	6903      	ldr	r3, [r0, #16]
   17160:	4299      	cmp	r1, r3
   17162:	da04      	bge.n	1716e <delta_flash_seek+0x18>
	return DELTA_OK;
   17164:	2000      	movs	r0, #0
   17166:	4770      	bx	lr
		return -DELTA_CASTING_ERROR;
   17168:	f06f 0020 	mvn.w	r0, #32
   1716c:	4770      	bx	lr
		return -DELTA_SEEKING_ERROR;
   1716e:	f06f 001f 	mvn.w	r0, #31
}
   17172:	4770      	bx	lr

00017174 <delta_init>:
{
   17174:	b510      	push	{r4, lr}
   17176:	4604      	mov	r4, r0
	ret = delta_init_flash_mem(flash);
   17178:	f7f9 fbc4 	bl	10904 <delta_init_flash_mem>
	if (ret) {
   1717c:	b100      	cbz	r0, 17180 <delta_init+0xc>
}
   1717e:	bd10      	pop	{r4, pc}
	ret = erase_page(flash, flash->to_current);
   17180:	6961      	ldr	r1, [r4, #20]
   17182:	4620      	mov	r0, r4
   17184:	f7ff ff63 	bl	1704e <erase_page>
	if (ret) {
   17188:	e7f9      	b.n	1717e <delta_init+0xa>

0001718a <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
   1718a:	4602      	mov	r2, r0
   1718c:	b158      	cbz	r0, 171a6 <sys_notify_validate+0x1c>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   1718e:	6843      	ldr	r3, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   17190:	f003 0303 	and.w	r3, r3, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
   17194:	2b01      	cmp	r3, #1
   17196:	d003      	beq.n	171a0 <sys_notify_validate+0x16>
   17198:	2b03      	cmp	r3, #3
   1719a:	d107      	bne.n	171ac <sys_notify_validate+0x22>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		if (notify->method.callback == NULL) {
   1719c:	6803      	ldr	r3, [r0, #0]
   1719e:	b143      	cbz	r3, 171b2 <sys_notify_validate+0x28>
		break;
	}

	/* Clear the result here instead of in all callers. */
	if (rv == 0) {
		notify->result = 0;
   171a0:	2000      	movs	r0, #0
   171a2:	6090      	str	r0, [r2, #8]
   171a4:	4770      	bx	lr
		return -EINVAL;
   171a6:	f06f 0015 	mvn.w	r0, #21
   171aa:	4770      	bx	lr
	switch (sys_notify_get_method(notify)) {
   171ac:	f06f 0015 	mvn.w	r0, #21
   171b0:	4770      	bx	lr
			rv = -EINVAL;
   171b2:	f06f 0015 	mvn.w	r0, #21
	}

	return rv;
}
   171b6:	4770      	bx	lr

000171b8 <sys_notify_finalize>:

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
   171b8:	4603      	mov	r3, r0
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   171ba:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   171bc:	f002 0203 	and.w	r2, r2, #3
	uint32_t method = sys_notify_get_method(notify);

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
   171c0:	6081      	str	r1, [r0, #8]
	switch (method) {
   171c2:	2a03      	cmp	r2, #3
   171c4:	d103      	bne.n	171ce <sys_notify_finalize+0x16>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
   171c6:	6800      	ldr	r0, [r0, #0]
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   171c8:	2200      	movs	r2, #0
   171ca:	605a      	str	r2, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
   171cc:	4770      	bx	lr
	sys_notify_generic_callback rv = NULL;
   171ce:	2000      	movs	r0, #0
   171d0:	e7fa      	b.n	171c8 <sys_notify_finalize+0x10>

000171d2 <arch_printk_char_out>:
}
   171d2:	2000      	movs	r0, #0
   171d4:	4770      	bx	lr

000171d6 <printk>:
 *
 * @param fmt formatted string to output
 */

void printk(const char *fmt, ...)
{
   171d6:	b40f      	push	{r0, r1, r2, r3}
   171d8:	b500      	push	{lr}
   171da:	b083      	sub	sp, #12
   171dc:	a904      	add	r1, sp, #16
   171de:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
   171e2:	9101      	str	r1, [sp, #4]

	vprintk(fmt, ap);
   171e4:	f7f9 fc44 	bl	10a70 <vprintk>

	va_end(ap);
}
   171e8:	b003      	add	sp, #12
   171ea:	f85d eb04 	ldr.w	lr, [sp], #4
   171ee:	b004      	add	sp, #16
   171f0:	4770      	bx	lr

000171f2 <set_state>:
	mgr->flags = (state & ONOFF_STATE_MASK)
   171f2:	f001 0307 	and.w	r3, r1, #7
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   171f6:	8b01      	ldrh	r1, [r0, #24]
   171f8:	f021 0107 	bic.w	r1, r1, #7
   171fc:	4319      	orrs	r1, r3
	mgr->flags = (state & ONOFF_STATE_MASK)
   171fe:	8301      	strh	r1, [r0, #24]
}
   17200:	4770      	bx	lr

00017202 <notify_monitors>:
{
   17202:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17206:	4606      	mov	r6, r0
   17208:	460f      	mov	r7, r1
   1720a:	4690      	mov	r8, r2
	return list->head;
   1720c:	6881      	ldr	r1, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   1720e:	b119      	cbz	r1, 17218 <notify_monitors+0x16>
   17210:	460c      	mov	r4, r1
Z_GENLIST_PEEK_NEXT(slist, snode)
   17212:	b131      	cbz	r1, 17222 <notify_monitors+0x20>
	return node->next;
   17214:	680c      	ldr	r4, [r1, #0]
   17216:	e004      	b.n	17222 <notify_monitors+0x20>
   17218:	460c      	mov	r4, r1
   1721a:	e002      	b.n	17222 <notify_monitors+0x20>
   1721c:	4623      	mov	r3, r4
   1721e:	4621      	mov	r1, r4
   17220:	461c      	mov	r4, r3
   17222:	b159      	cbz	r1, 1723c <notify_monitors+0x3a>
		mon->callback(mgr, mon, state, res);
   17224:	684d      	ldr	r5, [r1, #4]
   17226:	4643      	mov	r3, r8
   17228:	463a      	mov	r2, r7
   1722a:	4630      	mov	r0, r6
   1722c:	47a8      	blx	r5
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   1722e:	2c00      	cmp	r4, #0
   17230:	d0f4      	beq.n	1721c <notify_monitors+0x1a>
   17232:	4623      	mov	r3, r4
Z_GENLIST_PEEK_NEXT(slist, snode)
   17234:	2c00      	cmp	r4, #0
   17236:	d0f2      	beq.n	1721e <notify_monitors+0x1c>
	return node->next;
   17238:	6823      	ldr	r3, [r4, #0]
   1723a:	e7f0      	b.n	1721e <notify_monitors+0x1c>
}
   1723c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00017240 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   17240:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
   17242:	f013 0307 	ands.w	r3, r3, #7
   17246:	d103      	bne.n	17250 <process_recheck+0x10>
	return list->head;
   17248:	6802      	ldr	r2, [r0, #0]
	    && !sys_slist_is_empty(&mgr->clients)) {
   1724a:	b10a      	cbz	r2, 17250 <process_recheck+0x10>
		evt = EVT_START;
   1724c:	2003      	movs	r0, #3
   1724e:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
   17250:	2b02      	cmp	r3, #2
   17252:	d003      	beq.n	1725c <process_recheck+0x1c>
	} else if ((state == ONOFF_STATE_ERROR)
   17254:	2b01      	cmp	r3, #1
   17256:	d006      	beq.n	17266 <process_recheck+0x26>
	int evt = EVT_NOP;
   17258:	2000      	movs	r0, #0
   1725a:	4770      	bx	lr
		   && (mgr->refs == 0U)) {
   1725c:	8b42      	ldrh	r2, [r0, #26]
   1725e:	2a00      	cmp	r2, #0
   17260:	d1f8      	bne.n	17254 <process_recheck+0x14>
		evt = EVT_STOP;
   17262:	2004      	movs	r0, #4
   17264:	4770      	bx	lr
   17266:	6803      	ldr	r3, [r0, #0]
		   && !sys_slist_is_empty(&mgr->clients)) {
   17268:	b10b      	cbz	r3, 1726e <process_recheck+0x2e>
		evt = EVT_RESET;
   1726a:	2005      	movs	r0, #5
}
   1726c:	4770      	bx	lr
	int evt = EVT_NOP;
   1726e:	2000      	movs	r0, #0
   17270:	4770      	bx	lr

00017272 <process_complete>:
{
   17272:	b510      	push	{r4, lr}
   17274:	4604      	mov	r4, r0
   17276:	468c      	mov	ip, r1
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   17278:	8b03      	ldrh	r3, [r0, #24]
	if (res < 0) {
   1727a:	2a00      	cmp	r2, #0
   1727c:	db07      	blt.n	1728e <process_complete+0x1c>
   1727e:	f003 0307 	and.w	r3, r3, #7
		   || (state == ONOFF_STATE_RESETTING)) {
   17282:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
   17284:	2a01      	cmp	r2, #1
   17286:	d90e      	bls.n	172a6 <process_complete+0x34>
	} else if (state == ONOFF_STATE_TO_OFF) {
   17288:	2b04      	cmp	r3, #4
   1728a:	d033      	beq.n	172f4 <process_complete+0x82>
}
   1728c:	bd10      	pop	{r4, pc}
		*clients = mgr->clients;
   1728e:	e9d0 0100 	ldrd	r0, r1, [r0]
   17292:	e88c 0003 	stmia.w	ip, {r0, r1}
	list->head = NULL;
   17296:	2300      	movs	r3, #0
   17298:	6023      	str	r3, [r4, #0]
	list->tail = NULL;
   1729a:	6063      	str	r3, [r4, #4]
		set_state(mgr, ONOFF_STATE_ERROR);
   1729c:	2101      	movs	r1, #1
   1729e:	4620      	mov	r0, r4
   172a0:	f7ff ffa7 	bl	171f2 <set_state>
   172a4:	e7f2      	b.n	1728c <process_complete+0x1a>
		*clients = mgr->clients;
   172a6:	e9d0 0100 	ldrd	r0, r1, [r0]
   172aa:	e88c 0003 	stmia.w	ip, {r0, r1}
	list->head = NULL;
   172ae:	2200      	movs	r2, #0
   172b0:	6022      	str	r2, [r4, #0]
	list->tail = NULL;
   172b2:	6062      	str	r2, [r4, #4]
		if (state == ONOFF_STATE_TO_ON) {
   172b4:	2b06      	cmp	r3, #6
   172b6:	d118      	bne.n	172ea <process_complete+0x78>
	return list->head;
   172b8:	f8dc 3000 	ldr.w	r3, [ip]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
   172bc:	b13b      	cbz	r3, 172ce <process_complete+0x5c>
				mgr->refs += 1U;
   172be:	8b62      	ldrh	r2, [r4, #26]
   172c0:	3201      	adds	r2, #1
   172c2:	8362      	strh	r2, [r4, #26]
Z_GENLIST_PEEK_NEXT(slist, snode)
   172c4:	2b00      	cmp	r3, #0
   172c6:	d0f9      	beq.n	172bc <process_complete+0x4a>
	return node->next;
   172c8:	681b      	ldr	r3, [r3, #0]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
   172ca:	2b00      	cmp	r3, #0
   172cc:	d1f6      	bne.n	172bc <process_complete+0x4a>
			set_state(mgr, ONOFF_STATE_ON);
   172ce:	2102      	movs	r1, #2
   172d0:	4620      	mov	r0, r4
   172d2:	f7ff ff8e 	bl	171f2 <set_state>
		if (process_recheck(mgr) != EVT_NOP) {
   172d6:	4620      	mov	r0, r4
   172d8:	f7ff ffb2 	bl	17240 <process_recheck>
   172dc:	2800      	cmp	r0, #0
   172de:	d0d5      	beq.n	1728c <process_complete+0x1a>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   172e0:	8b23      	ldrh	r3, [r4, #24]
   172e2:	f043 0320 	orr.w	r3, r3, #32
   172e6:	8323      	strh	r3, [r4, #24]
   172e8:	e7d0      	b.n	1728c <process_complete+0x1a>
			set_state(mgr, ONOFF_STATE_OFF);
   172ea:	2100      	movs	r1, #0
   172ec:	4620      	mov	r0, r4
   172ee:	f7ff ff80 	bl	171f2 <set_state>
   172f2:	e7f0      	b.n	172d6 <process_complete+0x64>
		set_state(mgr, ONOFF_STATE_OFF);
   172f4:	2100      	movs	r1, #0
   172f6:	f7ff ff7c 	bl	171f2 <set_state>
		if (process_recheck(mgr) != EVT_NOP) {
   172fa:	4620      	mov	r0, r4
   172fc:	f7ff ffa0 	bl	17240 <process_recheck>
   17300:	2800      	cmp	r0, #0
   17302:	d0c3      	beq.n	1728c <process_complete+0x1a>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   17304:	8b23      	ldrh	r3, [r4, #24]
   17306:	f043 0320 	orr.w	r3, r3, #32
   1730a:	8323      	strh	r3, [r4, #24]
}
   1730c:	e7be      	b.n	1728c <process_complete+0x1a>

0001730e <validate_args>:
	if ((mgr == NULL) || (cli == NULL)) {
   1730e:	b158      	cbz	r0, 17328 <validate_args+0x1a>
{
   17310:	b510      	push	{r4, lr}
   17312:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
   17314:	b159      	cbz	r1, 1732e <validate_args+0x20>
	int rv = sys_notify_validate(&cli->notify);
   17316:	1d08      	adds	r0, r1, #4
   17318:	f7ff ff37 	bl	1718a <sys_notify_validate>
	if ((rv == 0)
   1731c:	b918      	cbnz	r0, 17326 <validate_args+0x18>
	    && ((cli->notify.flags
   1731e:	68a3      	ldr	r3, [r4, #8]
   17320:	f033 0303 	bics.w	r3, r3, #3
   17324:	d106      	bne.n	17334 <validate_args+0x26>
}
   17326:	bd10      	pop	{r4, pc}
		return -EINVAL;
   17328:	f06f 0015 	mvn.w	r0, #21
}
   1732c:	4770      	bx	lr
		return -EINVAL;
   1732e:	f06f 0015 	mvn.w	r0, #21
   17332:	e7f8      	b.n	17326 <validate_args+0x18>
		rv = -EINVAL;
   17334:	f06f 0015 	mvn.w	r0, #21
   17338:	e7f5      	b.n	17326 <validate_args+0x18>

0001733a <notify_one>:
{
   1733a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1733e:	4607      	mov	r7, r0
   17340:	460c      	mov	r4, r1
   17342:	4616      	mov	r6, r2
   17344:	461d      	mov	r5, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   17346:	4619      	mov	r1, r3
   17348:	1d20      	adds	r0, r4, #4
   1734a:	f7ff ff35 	bl	171b8 <sys_notify_finalize>
	if (cb) {
   1734e:	b128      	cbz	r0, 1735c <notify_one+0x22>
   17350:	4680      	mov	r8, r0
		cb(mgr, cli, state, res);
   17352:	462b      	mov	r3, r5
   17354:	4632      	mov	r2, r6
   17356:	4621      	mov	r1, r4
   17358:	4638      	mov	r0, r7
   1735a:	47c0      	blx	r8
}
   1735c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00017360 <notify_all>:
{
   17360:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17364:	4680      	mov	r8, r0
   17366:	460c      	mov	r4, r1
   17368:	4617      	mov	r7, r2
   1736a:	461e      	mov	r6, r3
	while (!sys_slist_is_empty(list)) {
   1736c:	e004      	b.n	17378 <notify_all+0x18>
		notify_one(mgr, cli, state, res);
   1736e:	4633      	mov	r3, r6
   17370:	463a      	mov	r2, r7
   17372:	4640      	mov	r0, r8
   17374:	f7ff ffe1 	bl	1733a <notify_one>
	return list->head;
   17378:	6821      	ldr	r1, [r4, #0]
	while (!sys_slist_is_empty(list)) {
   1737a:	b131      	cbz	r1, 1738a <notify_all+0x2a>
	return node->next;
   1737c:	680d      	ldr	r5, [r1, #0]
	list->head = node;
   1737e:	6025      	str	r5, [r4, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_snode_t *sys_slist_get_not_empty(sys_slist_t *list);

Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   17380:	6863      	ldr	r3, [r4, #4]
   17382:	428b      	cmp	r3, r1
   17384:	d1f3      	bne.n	1736e <notify_all+0xe>
	list->tail = node;
   17386:	6065      	str	r5, [r4, #4]
}
   17388:	e7f1      	b.n	1736e <notify_all+0xe>
}
   1738a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001738e <transition_complete>:
{
   1738e:	b508      	push	{r3, lr}
	__asm__ volatile(
   17390:	f04f 0c20 	mov.w	ip, #32
   17394:	f3ef 8211 	mrs	r2, BASEPRI
   17398:	f38c 8812 	msr	BASEPRI_MAX, ip
   1739c:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
   173a0:	6141      	str	r1, [r0, #20]
	process_event(mgr, EVT_COMPLETE, key);
   173a2:	2101      	movs	r1, #1
   173a4:	f7f9 fb72 	bl	10a8c <process_event>
}
   173a8:	bd08      	pop	{r3, pc}

000173aa <onoff_manager_init>:
	if ((mgr == NULL)
   173aa:	4603      	mov	r3, r0
   173ac:	b170      	cbz	r0, 173cc <onoff_manager_init+0x22>
	    || (transitions == NULL)
   173ae:	b181      	cbz	r1, 173d2 <onoff_manager_init+0x28>
	    || (transitions->start == NULL)
   173b0:	680a      	ldr	r2, [r1, #0]
   173b2:	b18a      	cbz	r2, 173d8 <onoff_manager_init+0x2e>
	    || (transitions->stop == NULL)) {
   173b4:	684a      	ldr	r2, [r1, #4]
   173b6:	b192      	cbz	r2, 173de <onoff_manager_init+0x34>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   173b8:	2000      	movs	r0, #0
   173ba:	6018      	str	r0, [r3, #0]
   173bc:	6058      	str	r0, [r3, #4]
   173be:	6098      	str	r0, [r3, #8]
   173c0:	60d8      	str	r0, [r3, #12]
   173c2:	6118      	str	r0, [r3, #16]
   173c4:	6158      	str	r0, [r3, #20]
   173c6:	6198      	str	r0, [r3, #24]
   173c8:	6119      	str	r1, [r3, #16]
	return 0;
   173ca:	4770      	bx	lr
		return -EINVAL;
   173cc:	f06f 0015 	mvn.w	r0, #21
   173d0:	4770      	bx	lr
   173d2:	f06f 0015 	mvn.w	r0, #21
   173d6:	4770      	bx	lr
   173d8:	f06f 0015 	mvn.w	r0, #21
   173dc:	4770      	bx	lr
   173de:	f06f 0015 	mvn.w	r0, #21
}
   173e2:	4770      	bx	lr

000173e4 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
   173e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   173e6:	4604      	mov	r4, r0
   173e8:	460f      	mov	r7, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
   173ea:	f7ff ff90 	bl	1730e <validate_args>

	if (rv < 0) {
   173ee:	1e06      	subs	r6, r0, #0
   173f0:	db37      	blt.n	17462 <onoff_request+0x7e>
   173f2:	f04f 0320 	mov.w	r3, #32
   173f6:	f3ef 8211 	mrs	r2, BASEPRI
   173fa:	f383 8812 	msr	BASEPRI_MAX, r3
   173fe:	f3bf 8f6f 	isb	sy
		return rv;
	}

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   17402:	8b25      	ldrh	r5, [r4, #24]
   17404:	f005 0507 	and.w	r5, r5, #7

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
   17408:	8b63      	ldrh	r3, [r4, #26]
   1740a:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1740e:	428b      	cmp	r3, r1
   17410:	d02f      	beq.n	17472 <onoff_request+0x8e>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
   17412:	462e      	mov	r6, r5
	if (state == ONOFF_STATE_ON) {
   17414:	2d02      	cmp	r5, #2
   17416:	d00c      	beq.n	17432 <onoff_request+0x4e>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
	} else if ((state == ONOFF_STATE_OFF)
   17418:	b18d      	cbz	r5, 1743e <onoff_request+0x5a>
		   || (state == ONOFF_STATE_TO_OFF)
   1741a:	2d04      	cmp	r5, #4
   1741c:	d00f      	beq.n	1743e <onoff_request+0x5a>
		   || (state == ONOFF_STATE_TO_ON)) {
   1741e:	2d06      	cmp	r5, #6
   17420:	d00d      	beq.n	1743e <onoff_request+0x5a>
		/* Start if OFF, queue client */
		start = (state == ONOFF_STATE_OFF);
		add_client = true;
	} else if (state == ONOFF_STATE_RESETTING) {
   17422:	2d05      	cmp	r5, #5
   17424:	d01f      	beq.n	17466 <onoff_request+0x82>
		rv = -ENOTSUP;
	} else {
		__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
		rv = -EIO;
   17426:	f06f 0604 	mvn.w	r6, #4
	bool notify = false;            /* do client notification */
   1742a:	2100      	movs	r1, #0
	bool start = false;             /* trigger a start transition */
   1742c:	460b      	mov	r3, r1
	bool add_client = false;        /* add client to pending list */
   1742e:	4608      	mov	r0, r1
   17430:	e00a      	b.n	17448 <onoff_request+0x64>
		mgr->refs += 1U;
   17432:	3301      	adds	r3, #1
   17434:	8363      	strh	r3, [r4, #26]
		notify = true;
   17436:	2101      	movs	r1, #1
	bool start = false;             /* trigger a start transition */
   17438:	2300      	movs	r3, #0
	bool add_client = false;        /* add client to pending list */
   1743a:	4618      	mov	r0, r3
   1743c:	e004      	b.n	17448 <onoff_request+0x64>
		start = (state == ONOFF_STATE_OFF);
   1743e:	fab5 f385 	clz	r3, r5
   17442:	095b      	lsrs	r3, r3, #5
	bool notify = false;            /* do client notification */
   17444:	2100      	movs	r1, #0
		add_client = true;
   17446:	2001      	movs	r0, #1
	}

out:
	if (add_client) {
   17448:	b128      	cbz	r0, 17456 <onoff_request+0x72>
	parent->next = child;
   1744a:	2000      	movs	r0, #0
   1744c:	6038      	str	r0, [r7, #0]
	return list->tail;
   1744e:	6860      	ldr	r0, [r4, #4]
Z_GENLIST_APPEND(slist, snode)
   17450:	b1a8      	cbz	r0, 1747e <onoff_request+0x9a>
	parent->next = child;
   17452:	6007      	str	r7, [r0, #0]
	list->tail = node;
   17454:	6067      	str	r7, [r4, #4]
		sys_slist_append(&mgr->clients, &cli->node);
	}

	if (start) {
   17456:	b9ab      	cbnz	r3, 17484 <onoff_request+0xa0>
	__asm__ volatile(
   17458:	f382 8811 	msr	BASEPRI, r2
   1745c:	f3bf 8f6f 	isb	sy
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
   17460:	b9a9      	cbnz	r1, 1748e <onoff_request+0xaa>
			notify_one(mgr, cli, state, 0);
		}
	}

	return rv;
}
   17462:	4630      	mov	r0, r6
   17464:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		rv = -ENOTSUP;
   17466:	f06f 0685 	mvn.w	r6, #133	; 0x85
	bool notify = false;            /* do client notification */
   1746a:	2100      	movs	r1, #0
	bool start = false;             /* trigger a start transition */
   1746c:	460b      	mov	r3, r1
	bool add_client = false;        /* add client to pending list */
   1746e:	4608      	mov	r0, r1
   17470:	e7ea      	b.n	17448 <onoff_request+0x64>
		rv = -EAGAIN;
   17472:	f06f 060a 	mvn.w	r6, #10
	bool notify = false;            /* do client notification */
   17476:	2100      	movs	r1, #0
	bool start = false;             /* trigger a start transition */
   17478:	460b      	mov	r3, r1
	bool add_client = false;        /* add client to pending list */
   1747a:	4608      	mov	r0, r1
   1747c:	e7e4      	b.n	17448 <onoff_request+0x64>
   1747e:	6067      	str	r7, [r4, #4]
	list->head = node;
   17480:	6027      	str	r7, [r4, #0]
}
   17482:	e7e8      	b.n	17456 <onoff_request+0x72>
		process_event(mgr, EVT_RECHECK, key);
   17484:	2102      	movs	r1, #2
   17486:	4620      	mov	r0, r4
   17488:	f7f9 fb00 	bl	10a8c <process_event>
   1748c:	e7e9      	b.n	17462 <onoff_request+0x7e>
			notify_one(mgr, cli, state, 0);
   1748e:	2300      	movs	r3, #0
   17490:	462a      	mov	r2, r5
   17492:	4639      	mov	r1, r7
   17494:	4620      	mov	r0, r4
   17496:	f7ff ff50 	bl	1733a <notify_one>
   1749a:	e7e2      	b.n	17462 <onoff_request+0x7e>

0001749c <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   1749c:	b508      	push	{r3, lr}
   1749e:	4604      	mov	r4, r0
   174a0:	4608      	mov	r0, r1
   174a2:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
   174a4:	461a      	mov	r2, r3
   174a6:	47a0      	blx	r4
	return z_impl_z_current_get();
   174a8:	f7fe fdee 	bl	16088 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
   174ac:	f7fa fd9c 	bl	11fe8 <z_impl_k_thread_abort>

000174b0 <chunk_mem>:
#endif

static void *chunk_mem(struct z_heap *h, chunkid_t c)
{
	chunk_unit_t *buf = chunk_buf(h);
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
   174b0:	00c9      	lsls	r1, r1, #3
   174b2:	3104      	adds	r1, #4

	CHECK(!(((uintptr_t)ret) & (big_heap(h) ? 7 : 3)));

	return ret;
}
   174b4:	4408      	add	r0, r1
   174b6:	4770      	bx	lr

000174b8 <free_list_remove_bidx>:

static inline chunkid_t chunk_field(struct z_heap *h, chunkid_t c,
				    enum chunk_fields f)
{
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];
   174b8:	ea4f 0cc1 	mov.w	ip, r1, lsl #3

	if (big_heap(h)) {
		return ((uint32_t *)cmem)[f];
	} else {
		return ((uint16_t *)cmem)[f];
   174bc:	eb00 03c1 	add.w	r3, r0, r1, lsl #3
   174c0:	88db      	ldrh	r3, [r3, #6]

	CHECK(!chunk_used(h, c));
	CHECK(b->next != 0);
	CHECK(h->avail_buckets & BIT(bidx));

	if (next_free_chunk(h, c) == c) {
   174c2:	4299      	cmp	r1, r3
   174c4:	d00c      	beq.n	174e0 <free_list_remove_bidx+0x28>
   174c6:	4484      	add	ip, r0
   174c8:	f8bc 1004 	ldrh.w	r1, [ip, #4]
		b->next = 0;
	} else {
		chunkid_t first = prev_free_chunk(h, c),
			  second = next_free_chunk(h, c);

		b->next = second;
   174cc:	3204      	adds	r2, #4
   174ce:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
			     enum chunk_fields f, chunkid_t val)
{
	CHECK(c <= h->end_chunk);

	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];
   174d2:	00ca      	lsls	r2, r1, #3
	if (big_heap(h)) {
		CHECK(val == (uint32_t)val);
		((uint32_t *)cmem)[f] = val;
	} else {
		CHECK(val == (uint16_t)val);
		((uint16_t *)cmem)[f] = val;
   174d4:	3206      	adds	r2, #6
   174d6:	5283      	strh	r3, [r0, r2]
	void *cmem = &buf[c];
   174d8:	00db      	lsls	r3, r3, #3
		((uint16_t *)cmem)[f] = val;
   174da:	3304      	adds	r3, #4
   174dc:	52c1      	strh	r1, [r0, r3]
	}

#ifdef CONFIG_SYS_HEAP_RUNTIME_STATS
	h->free_bytes -= chunksz_to_bytes(h, chunk_size(h, c));
#endif
}
   174de:	4770      	bx	lr
		h->avail_buckets &= ~BIT(bidx);
   174e0:	2301      	movs	r3, #1
   174e2:	fa03 f102 	lsl.w	r1, r3, r2
   174e6:	68c3      	ldr	r3, [r0, #12]
   174e8:	ea23 0301 	bic.w	r3, r3, r1
   174ec:	60c3      	str	r3, [r0, #12]
		b->next = 0;
   174ee:	3204      	adds	r2, #4
   174f0:	2300      	movs	r3, #0
   174f2:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
   174f6:	4770      	bx	lr

000174f8 <free_list_add_bidx>:
		free_list_remove_bidx(h, c, bidx);
	}
}

static void free_list_add_bidx(struct z_heap *h, chunkid_t c, int bidx)
{
   174f8:	b510      	push	{r4, lr}
	struct z_heap_bucket *b = &h->buckets[bidx];

	if (b->next == 0U) {
   174fa:	1d13      	adds	r3, r2, #4
   174fc:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
   17500:	b97c      	cbnz	r4, 17522 <free_list_add_bidx+0x2a>
		CHECK((h->avail_buckets & BIT(bidx)) == 0);

		/* Empty list, first item */
		h->avail_buckets |= BIT(bidx);
   17502:	2301      	movs	r3, #1
   17504:	fa03 f402 	lsl.w	r4, r3, r2
   17508:	68c3      	ldr	r3, [r0, #12]
   1750a:	4323      	orrs	r3, r4
   1750c:	60c3      	str	r3, [r0, #12]
		b->next = c;
   1750e:	3204      	adds	r2, #4
   17510:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
	void *cmem = &buf[c];
   17514:	00cb      	lsls	r3, r1, #3
		((uint16_t *)cmem)[f] = val;
   17516:	1d1a      	adds	r2, r3, #4
   17518:	b289      	uxth	r1, r1
   1751a:	5281      	strh	r1, [r0, r2]
   1751c:	3306      	adds	r3, #6
   1751e:	52c1      	strh	r1, [r0, r3]
	}

#ifdef CONFIG_SYS_HEAP_RUNTIME_STATS
	h->free_bytes += chunksz_to_bytes(h, chunk_size(h, c));
#endif
}
   17520:	bd10      	pop	{r4, pc}
	void *cmem = &buf[c];
   17522:	00e2      	lsls	r2, r4, #3
		return ((uint16_t *)cmem)[f];
   17524:	3204      	adds	r2, #4
   17526:	5a83      	ldrh	r3, [r0, r2]
	void *cmem = &buf[c];
   17528:	ea4f 0cc1 	mov.w	ip, r1, lsl #3
		((uint16_t *)cmem)[f] = val;
   1752c:	f10c 0e04 	add.w	lr, ip, #4
   17530:	f820 300e 	strh.w	r3, [r0, lr]
   17534:	f10c 0c06 	add.w	ip, ip, #6
   17538:	f820 400c 	strh.w	r4, [r0, ip]
	void *cmem = &buf[c];
   1753c:	00db      	lsls	r3, r3, #3
		((uint16_t *)cmem)[f] = val;
   1753e:	3306      	adds	r3, #6
   17540:	b289      	uxth	r1, r1
   17542:	52c1      	strh	r1, [r0, r3]
   17544:	5281      	strh	r1, [r0, r2]
   17546:	e7eb      	b.n	17520 <free_list_add_bidx+0x28>

00017548 <split_chunks>:

/* Splits a chunk "lc" into a left chunk and a right chunk at "rc".
 * Leaves both chunks marked "free"
 */
static void split_chunks(struct z_heap *h, chunkid_t lc, chunkid_t rc)
{
   17548:	b500      	push	{lr}
	void *cmem = &buf[c];
   1754a:	00cb      	lsls	r3, r1, #3
		return ((uint16_t *)cmem)[f];
   1754c:	3302      	adds	r3, #2
   1754e:	f830 e003 	ldrh.w	lr, [r0, r3]
	CHECK(rc > lc);
	CHECK(rc - lc < chunk_size(h, lc));

	chunksz_t sz0 = chunk_size(h, lc);
	chunksz_t lsz = rc - lc;
   17552:	eba2 0c01 	sub.w	ip, r2, r1
	chunksz_t rsz = sz0 - lsz;
   17556:	1a89      	subs	r1, r1, r2
   17558:	eb01 015e 	add.w	r1, r1, lr, lsr #1
 * when its size is modified, and potential set_chunk_used() is always
 * invoked after set_chunk_size().
 */
static inline void set_chunk_size(struct z_heap *h, chunkid_t c, chunksz_t size)
{
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   1755c:	ea4f 0e4c 	mov.w	lr, ip, lsl #1
		((uint16_t *)cmem)[f] = val;
   17560:	f820 e003 	strh.w	lr, [r0, r3]
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   17564:	ea4f 0e41 	mov.w	lr, r1, lsl #1
	void *cmem = &buf[c];
   17568:	00d3      	lsls	r3, r2, #3
		((uint16_t *)cmem)[f] = val;
   1756a:	3302      	adds	r3, #2
   1756c:	f820 e003 	strh.w	lr, [r0, r3]
   17570:	f820 c032 	strh.w	ip, [r0, r2, lsl #3]
		return ((uint16_t *)cmem)[f];
   17574:	5ac3      	ldrh	r3, [r0, r3]
	return c - chunk_field(h, c, LEFT_SIZE);
}

static inline chunkid_t right_chunk(struct z_heap *h, chunkid_t c)
{
	return c + chunk_size(h, c);
   17576:	eb02 0253 	add.w	r2, r2, r3, lsr #1
		((uint16_t *)cmem)[f] = val;
   1757a:	f820 1032 	strh.w	r1, [r0, r2, lsl #3]

	set_chunk_size(h, lc, lsz);
	set_chunk_size(h, rc, rsz);
	set_left_chunk_size(h, rc, lsz);
	set_left_chunk_size(h, right_chunk(h, rc), rsz);
}
   1757e:	f85d fb04 	ldr.w	pc, [sp], #4

00017582 <mem_to_chunkid>:
 * boundary.
 */
static chunkid_t mem_to_chunkid(struct z_heap *h, void *p)
{
	uint8_t *mem = p, *base = (uint8_t *)chunk_buf(h);
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   17582:	3904      	subs	r1, #4
   17584:	1a08      	subs	r0, r1, r0
}
   17586:	08c0      	lsrs	r0, r0, #3
   17588:	4770      	bx	lr

0001758a <free_list_add>:
{
   1758a:	b508      	push	{r3, lr}
		return ((uint16_t *)cmem)[f];
   1758c:	eb00 03c1 	add.w	r3, r0, r1, lsl #3
   17590:	885a      	ldrh	r2, [r3, #2]
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   17592:	0852      	lsrs	r2, r2, #1
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
	return 31 - __builtin_clz(usable_sz);
   17594:	fab2 f282 	clz	r2, r2
		free_list_add_bidx(h, c, bidx);
   17598:	f1c2 021f 	rsb	r2, r2, #31
   1759c:	f7ff ffac 	bl	174f8 <free_list_add_bidx>
}
   175a0:	bd08      	pop	{r3, pc}

000175a2 <alloc_chunk>:

	return chunk_sz - (addr - chunk_base);
}

static chunkid_t alloc_chunk(struct z_heap *h, chunksz_t sz)
{
   175a2:	b570      	push	{r4, r5, r6, lr}
   175a4:	fab1 f381 	clz	r3, r1
	 * course.  But even in pathological situations we still
	 * maintain our constant time performance and at worst see
	 * fragmentation waste of the order of the block allocated
	 * only.
	 */
	if (b->next) {
   175a8:	f1c3 0423 	rsb	r4, r3, #35	; 0x23
   175ac:	f850 5024 	ldr.w	r5, [r0, r4, lsl #2]
   175b0:	b1cd      	cbz	r5, 175e6 <alloc_chunk+0x44>
   175b2:	f1c3 021f 	rsb	r2, r3, #31
		chunkid_t first = b->next;
		int i = CONFIG_SYS_HEAP_ALLOC_LOOPS;
   175b6:	f04f 0e03 	mov.w	lr, #3
		do {
			chunkid_t c = b->next;
   175ba:	1d14      	adds	r4, r2, #4
   175bc:	f850 4024 	ldr.w	r4, [r0, r4, lsl #2]
	void *cmem = &buf[c];
   175c0:	ea4f 0cc4 	mov.w	ip, r4, lsl #3
		return ((uint16_t *)cmem)[f];
   175c4:	eb00 06c4 	add.w	r6, r0, r4, lsl #3
   175c8:	8876      	ldrh	r6, [r6, #2]
			if (chunk_size(h, c) >= sz) {
   175ca:	ebb1 0f56 	cmp.w	r1, r6, lsr #1
   175ce:	d914      	bls.n	175fa <alloc_chunk+0x58>
   175d0:	4484      	add	ip, r0
   175d2:	f8bc 4006 	ldrh.w	r4, [ip, #6]
				free_list_remove_bidx(h, c, bi);
				return c;
			}
			b->next = next_free_chunk(h, c);
   175d6:	1d16      	adds	r6, r2, #4
   175d8:	f840 4026 	str.w	r4, [r0, r6, lsl #2]
			CHECK(b->next != 0);
		} while (--i && b->next != first);
   175dc:	f1be 0e01 	subs.w	lr, lr, #1
   175e0:	d001      	beq.n	175e6 <alloc_chunk+0x44>
   175e2:	42a5      	cmp	r5, r4
   175e4:	d1e9      	bne.n	175ba <alloc_chunk+0x18>
	}

	/* Otherwise pick the smallest non-empty bucket guaranteed to
	 * fit and use that unconditionally.
	 */
	uint32_t bmask = h->avail_buckets & ~BIT_MASK(bi + 1);
   175e6:	68c4      	ldr	r4, [r0, #12]
   175e8:	f1c3 0220 	rsb	r2, r3, #32
   175ec:	2301      	movs	r3, #1
   175ee:	4093      	lsls	r3, r2
   175f0:	425b      	negs	r3, r3

	if (bmask != 0U) {
   175f2:	401c      	ands	r4, r3
   175f4:	d105      	bne.n	17602 <alloc_chunk+0x60>
		CHECK(chunk_size(h, c) >= sz);
		return c;
	}

	return 0;
}
   175f6:	4620      	mov	r0, r4
   175f8:	bd70      	pop	{r4, r5, r6, pc}
				free_list_remove_bidx(h, c, bi);
   175fa:	4621      	mov	r1, r4
   175fc:	f7ff ff5c 	bl	174b8 <free_list_remove_bidx>
				return c;
   17600:	e7f9      	b.n	175f6 <alloc_chunk+0x54>
		int minbucket = __builtin_ctz(bmask);
   17602:	fa94 f2a4 	rbit	r2, r4
   17606:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
   1760a:	1d13      	adds	r3, r2, #4
   1760c:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
		free_list_remove_bidx(h, c, minbucket);
   17610:	4621      	mov	r1, r4
   17612:	f7ff ff51 	bl	174b8 <free_list_remove_bidx>
		return c;
   17616:	e7ee      	b.n	175f6 <alloc_chunk+0x54>

00017618 <sys_heap_alloc>:

void *sys_heap_alloc(struct sys_heap *heap, size_t bytes)
{
   17618:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct z_heap *h = heap->heap;
   1761a:	6805      	ldr	r5, [r0, #0]
	void *mem;

	if (bytes == 0U || size_too_big(h, bytes)) {
   1761c:	b341      	cbz	r1, 17670 <sys_heap_alloc+0x58>
   1761e:	460b      	mov	r3, r1
{
	/*
	 * Quick check to bail out early if size is too big.
	 * Also guards against potential arithmetic overflows elsewhere.
	 */
	return (bytes / CHUNK_UNIT) >= h->end_chunk;
   17620:	68aa      	ldr	r2, [r5, #8]
   17622:	ebb2 0fd1 	cmp.w	r2, r1, lsr #3
   17626:	d925      	bls.n	17674 <sys_heap_alloc+0x5c>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   17628:	330b      	adds	r3, #11
   1762a:	08dc      	lsrs	r4, r3, #3
		return NULL;
	}

	chunksz_t chunk_sz = bytes_to_chunksz(h, bytes);
	chunkid_t c = alloc_chunk(h, chunk_sz);
   1762c:	4621      	mov	r1, r4
   1762e:	4628      	mov	r0, r5
   17630:	f7ff ffb7 	bl	175a2 <alloc_chunk>
	if (c == 0U) {
   17634:	4607      	mov	r7, r0
   17636:	b1f8      	cbz	r0, 17678 <sys_heap_alloc+0x60>
	void *cmem = &buf[c];
   17638:	00c6      	lsls	r6, r0, #3
		return ((uint16_t *)cmem)[f];
   1763a:	eb05 03c0 	add.w	r3, r5, r0, lsl #3
   1763e:	885b      	ldrh	r3, [r3, #2]
		return NULL;
	}

	/* Split off remainder if any */
	if (chunk_size(h, c) > chunk_sz) {
   17640:	ebb4 0f53 	cmp.w	r4, r3, lsr #1
   17644:	d309      	bcc.n	1765a <sys_heap_alloc+0x42>
	void *cmem = &buf[c];
   17646:	19ab      	adds	r3, r5, r6
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   17648:	885a      	ldrh	r2, [r3, #2]
   1764a:	f042 0201 	orr.w	r2, r2, #1
   1764e:	805a      	strh	r2, [r3, #2]
		free_list_add(h, c + chunk_sz);
	}

	set_chunk_used(h, c, true);

	mem = chunk_mem(h, c);
   17650:	4639      	mov	r1, r7
   17652:	4628      	mov	r0, r5
   17654:	f7ff ff2c 	bl	174b0 <chunk_mem>
	heap_listener_notify_alloc(HEAP_ID_FROM_POINTER(heap), mem,
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	return mem;
}
   17658:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		split_chunks(h, c, c + chunk_sz);
   1765a:	4404      	add	r4, r0
   1765c:	4622      	mov	r2, r4
   1765e:	4601      	mov	r1, r0
   17660:	4628      	mov	r0, r5
   17662:	f7ff ff71 	bl	17548 <split_chunks>
		free_list_add(h, c + chunk_sz);
   17666:	4621      	mov	r1, r4
   17668:	4628      	mov	r0, r5
   1766a:	f7ff ff8e 	bl	1758a <free_list_add>
   1766e:	e7ea      	b.n	17646 <sys_heap_alloc+0x2e>
		return NULL;
   17670:	2000      	movs	r0, #0
   17672:	e7f1      	b.n	17658 <sys_heap_alloc+0x40>
   17674:	2000      	movs	r0, #0
   17676:	e7ef      	b.n	17658 <sys_heap_alloc+0x40>
		return NULL;
   17678:	2000      	movs	r0, #0
   1767a:	e7ed      	b.n	17658 <sys_heap_alloc+0x40>

0001767c <sys_heap_aligned_alloc>:

void *sys_heap_aligned_alloc(struct sys_heap *heap, size_t align, size_t bytes)
{
   1767c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17680:	460d      	mov	r5, r1
   17682:	4614      	mov	r4, r2
	struct z_heap *h = heap->heap;
   17684:	6806      	ldr	r6, [r0, #0]
	 * We allow for one bit of rewind in addition to the alignment
	 * value to efficiently accommodate z_heap_aligned_alloc().
	 * So if e.g. align = 0x28 (32 | 8) this means we align to a 32-byte
	 * boundary and then rewind 8 bytes.
	 */
	rew = align & -align;
   17686:	424b      	negs	r3, r1
   17688:	ea03 0801 	and.w	r8, r3, r1
	if (align != rew) {
   1768c:	ea31 0303 	bics.w	r3, r1, r3
   17690:	d03e      	beq.n	17710 <sys_heap_aligned_alloc+0x94>
		align -= rew;
   17692:	eba1 0508 	sub.w	r5, r1, r8
		gap = MIN(rew, chunk_header_bytes(h));
   17696:	f1b8 0f03 	cmp.w	r8, #3
   1769a:	d844      	bhi.n	17726 <sys_heap_aligned_alloc+0xaa>
   1769c:	4642      	mov	r2, r8
		rew = 0;
		gap = chunk_header_bytes(h);
	}
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");

	if (bytes == 0 || size_too_big(h, bytes)) {
   1769e:	2c00      	cmp	r4, #0
   176a0:	d057      	beq.n	17752 <sys_heap_aligned_alloc+0xd6>
	return (bytes / CHUNK_UNIT) >= h->end_chunk;
   176a2:	68b3      	ldr	r3, [r6, #8]
   176a4:	ebb3 0fd4 	cmp.w	r3, r4, lsr #3
   176a8:	d955      	bls.n	17756 <sys_heap_aligned_alloc+0xda>
	/*
	 * Find a free block that is guaranteed to fit.
	 * We over-allocate to account for alignment and then free
	 * the extra allocations afterwards.
	 */
	chunksz_t padded_sz = bytes_to_chunksz(h, bytes + align - gap);
   176aa:	1929      	adds	r1, r5, r4
   176ac:	1a89      	subs	r1, r1, r2
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   176ae:	310b      	adds	r1, #11
	chunkid_t c0 = alloc_chunk(h, padded_sz);
   176b0:	08c9      	lsrs	r1, r1, #3
   176b2:	4630      	mov	r0, r6
   176b4:	f7ff ff75 	bl	175a2 <alloc_chunk>

	if (c0 == 0) {
   176b8:	4607      	mov	r7, r0
   176ba:	2800      	cmp	r0, #0
   176bc:	d04d      	beq.n	1775a <sys_heap_aligned_alloc+0xde>
		return NULL;
	}
	uint8_t *mem = chunk_mem(h, c0);
   176be:	4601      	mov	r1, r0
   176c0:	4630      	mov	r0, r6
   176c2:	f7ff fef5 	bl	174b0 <chunk_mem>

	/* Align allocated memory */
	mem = (uint8_t *) ROUND_UP(mem + rew, align) - rew;
   176c6:	4440      	add	r0, r8
   176c8:	4428      	add	r0, r5
   176ca:	3801      	subs	r0, #1
   176cc:	426d      	negs	r5, r5
   176ce:	4005      	ands	r5, r0
   176d0:	eba5 0508 	sub.w	r5, r5, r8
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   176d4:	442c      	add	r4, r5
   176d6:	3407      	adds	r4, #7
   176d8:	f024 0407 	bic.w	r4, r4, #7

	/* Get corresponding chunks */
	chunkid_t c = mem_to_chunkid(h, mem);
   176dc:	4629      	mov	r1, r5
   176de:	4630      	mov	r0, r6
   176e0:	f7ff ff4f 	bl	17582 <mem_to_chunkid>
   176e4:	4680      	mov	r8, r0
	chunkid_t c_end = end - chunk_buf(h);
   176e6:	1ba4      	subs	r4, r4, r6
   176e8:	10e4      	asrs	r4, r4, #3
	CHECK(c >= c0 && c  < c_end && c_end <= c0 + padded_sz);

	/* Split and free unused prefix */
	if (c > c0) {
   176ea:	4287      	cmp	r7, r0
   176ec:	d31d      	bcc.n	1772a <sys_heap_aligned_alloc+0xae>
	void *cmem = &buf[c];
   176ee:	ea4f 07c8 	mov.w	r7, r8, lsl #3
		return ((uint16_t *)cmem)[f];
   176f2:	eb06 03c8 	add.w	r3, r6, r8, lsl #3
   176f6:	885b      	ldrh	r3, [r3, #2]
	return c + chunk_size(h, c);
   176f8:	eb08 0353 	add.w	r3, r8, r3, lsr #1
		split_chunks(h, c0, c);
		free_list_add(h, c0);
	}

	/* Split and free unused suffix */
	if (right_chunk(h, c) > c_end) {
   176fc:	429c      	cmp	r4, r3
   176fe:	d31e      	bcc.n	1773e <sys_heap_aligned_alloc+0xc2>
	void *cmem = &buf[c];
   17700:	443e      	add	r6, r7
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   17702:	8873      	ldrh	r3, [r6, #2]
   17704:	f043 0301 	orr.w	r3, r3, #1
   17708:	8073      	strh	r3, [r6, #2]
	heap_listener_notify_alloc(HEAP_ID_FROM_POINTER(heap), mem,
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	return mem;
}
   1770a:	4628      	mov	r0, r5
   1770c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (align <= chunk_header_bytes(h)) {
   17710:	2904      	cmp	r1, #4
   17712:	d903      	bls.n	1771c <sys_heap_aligned_alloc+0xa0>
		rew = 0;
   17714:	f04f 0800 	mov.w	r8, #0
		gap = chunk_header_bytes(h);
   17718:	2204      	movs	r2, #4
   1771a:	e7c0      	b.n	1769e <sys_heap_aligned_alloc+0x22>
			return sys_heap_alloc(heap, bytes);
   1771c:	4611      	mov	r1, r2
   1771e:	f7ff ff7b 	bl	17618 <sys_heap_alloc>
   17722:	4605      	mov	r5, r0
   17724:	e7f1      	b.n	1770a <sys_heap_aligned_alloc+0x8e>
		gap = MIN(rew, chunk_header_bytes(h));
   17726:	2204      	movs	r2, #4
   17728:	e7b9      	b.n	1769e <sys_heap_aligned_alloc+0x22>
		split_chunks(h, c0, c);
   1772a:	4602      	mov	r2, r0
   1772c:	4639      	mov	r1, r7
   1772e:	4630      	mov	r0, r6
   17730:	f7ff ff0a 	bl	17548 <split_chunks>
		free_list_add(h, c0);
   17734:	4639      	mov	r1, r7
   17736:	4630      	mov	r0, r6
   17738:	f7ff ff27 	bl	1758a <free_list_add>
   1773c:	e7d7      	b.n	176ee <sys_heap_aligned_alloc+0x72>
		split_chunks(h, c, c_end);
   1773e:	4622      	mov	r2, r4
   17740:	4641      	mov	r1, r8
   17742:	4630      	mov	r0, r6
   17744:	f7ff ff00 	bl	17548 <split_chunks>
		free_list_add(h, c_end);
   17748:	4621      	mov	r1, r4
   1774a:	4630      	mov	r0, r6
   1774c:	f7ff ff1d 	bl	1758a <free_list_add>
   17750:	e7d6      	b.n	17700 <sys_heap_aligned_alloc+0x84>
		return NULL;
   17752:	2500      	movs	r5, #0
   17754:	e7d9      	b.n	1770a <sys_heap_aligned_alloc+0x8e>
   17756:	2500      	movs	r5, #0
   17758:	e7d7      	b.n	1770a <sys_heap_aligned_alloc+0x8e>
		return NULL;
   1775a:	2500      	movs	r5, #0
   1775c:	e7d5      	b.n	1770a <sys_heap_aligned_alloc+0x8e>

0001775e <sys_heap_init>:
	}
	return ptr2;
}

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
   1775e:	b570      	push	{r4, r5, r6, lr}
   17760:	4603      	mov	r3, r0
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");
	}

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
	bytes -= heap_footer_bytes(bytes);
   17762:	3a04      	subs	r2, #4

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   17764:	1dc8      	adds	r0, r1, #7
   17766:	f020 0007 	bic.w	r0, r0, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   1776a:	440a      	add	r2, r1
   1776c:	f022 0207 	bic.w	r2, r2, #7
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
   17770:	1a12      	subs	r2, r2, r0
   17772:	08d5      	lsrs	r5, r2, #3

	CHECK(end > addr);
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
   17774:	6018      	str	r0, [r3, #0]
	h->end_chunk = heap_sz;
   17776:	6085      	str	r5, [r0, #8]
	h->avail_buckets = 0;
   17778:	2300      	movs	r3, #0
   1777a:	60c3      	str	r3, [r0, #12]
	return 31 - __builtin_clz(usable_sz);
   1777c:	fab5 f185 	clz	r1, r5
	h->free_bytes = 0;
	h->allocated_bytes = 0;
	h->max_allocated_bytes = 0;
#endif

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
   17780:	f1c1 0e20 	rsb	lr, r1, #32
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
   17784:	f1c1 0124 	rsb	r1, r1, #36	; 0x24
   17788:	0089      	lsls	r1, r1, #2
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   1778a:	1dce      	adds	r6, r1, #7
   1778c:	08f1      	lsrs	r1, r6, #3
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
   1778e:	e005      	b.n	1779c <sys_heap_init+0x3e>
		h->buckets[i].next = 0;
   17790:	f103 0c04 	add.w	ip, r3, #4
   17794:	2400      	movs	r4, #0
   17796:	f840 402c 	str.w	r4, [r0, ip, lsl #2]
	for (int i = 0; i < nb_buckets; i++) {
   1779a:	3301      	adds	r3, #1
   1779c:	4573      	cmp	r3, lr
   1779e:	dbf7      	blt.n	17790 <sys_heap_init+0x32>
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   177a0:	004c      	lsls	r4, r1, #1
		((uint16_t *)cmem)[f] = val;
   177a2:	b2a4      	uxth	r4, r4
   177a4:	8044      	strh	r4, [r0, #2]
   177a6:	f04f 0c00 	mov.w	ip, #0
   177aa:	f8a0 c000 	strh.w	ip, [r0]
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   177ae:	f044 0401 	orr.w	r4, r4, #1
   177b2:	8044      	strh	r4, [r0, #2]
	set_chunk_size(h, 0, chunk0_size);
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
   177b4:	1a6b      	subs	r3, r5, r1
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   177b6:	ea4f 0e43 	mov.w	lr, r3, lsl #1
	void *cmem = &buf[c];
   177ba:	f026 0407 	bic.w	r4, r6, #7
		((uint16_t *)cmem)[f] = val;
   177be:	1ca5      	adds	r5, r4, #2
   177c0:	f820 e005 	strh.w	lr, [r0, r5]
   177c4:	5301      	strh	r1, [r0, r4]
	void *cmem = &buf[c];
   177c6:	f022 0407 	bic.w	r4, r2, #7
		((uint16_t *)cmem)[f] = val;
   177ca:	1c95      	adds	r5, r2, #2
   177cc:	f820 c005 	strh.w	ip, [r0, r5]
   177d0:	4402      	add	r2, r0
   177d2:	5303      	strh	r3, [r0, r4]
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   177d4:	8853      	ldrh	r3, [r2, #2]
   177d6:	f043 0301 	orr.w	r3, r3, #1
   177da:	8053      	strh	r3, [r2, #2]
	/* the end marker chunk */
	set_chunk_size(h, heap_sz, 0);
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);

	free_list_add(h, chunk0_size);
   177dc:	f7ff fed5 	bl	1758a <free_list_add>
}
   177e0:	bd70      	pop	{r4, r5, r6, pc}

000177e2 <extract_decimal>:
{
   177e2:	4684      	mov	ip, r0
	const char *sp = *str;
   177e4:	6802      	ldr	r2, [r0, #0]
	size_t val = 0;
   177e6:	2000      	movs	r0, #0
	while (isdigit((int)(unsigned char)*sp)) {
   177e8:	e005      	b.n	177f6 <extract_decimal+0x14>
		val = 10U * val + *sp++ - '0';
   177ea:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   177ee:	3201      	adds	r2, #1
   177f0:	eb03 0040 	add.w	r0, r3, r0, lsl #1
   177f4:	3830      	subs	r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
   177f6:	7813      	ldrb	r3, [r2, #0]
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
   177f8:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
   177fc:	2909      	cmp	r1, #9
   177fe:	d9f4      	bls.n	177ea <extract_decimal+0x8>
	*str = sp;
   17800:	f8cc 2000 	str.w	r2, [ip]
}
   17804:	4770      	bx	lr

00017806 <encode_uint>:
{
   17806:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1780a:	b083      	sub	sp, #12
   1780c:	4604      	mov	r4, r0
   1780e:	460d      	mov	r5, r1
   17810:	9201      	str	r2, [sp, #4]
   17812:	469a      	mov	sl, r3
   17814:	9e0c      	ldr	r6, [sp, #48]	; 0x30
	bool upcase = isupper((int)conv->specifier);
   17816:	78d3      	ldrb	r3, [r2, #3]
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
   17818:	f1a3 0b41 	sub.w	fp, r3, #65	; 0x41
	switch (specifier) {
   1781c:	2b6f      	cmp	r3, #111	; 0x6f
   1781e:	d00f      	beq.n	17840 <encode_uint+0x3a>
   17820:	d906      	bls.n	17830 <encode_uint+0x2a>
   17822:	2b70      	cmp	r3, #112	; 0x70
   17824:	d00f      	beq.n	17846 <encode_uint+0x40>
   17826:	2b78      	cmp	r3, #120	; 0x78
   17828:	d110      	bne.n	1784c <encode_uint+0x46>
		return 16;
   1782a:	f04f 0910 	mov.w	r9, #16
   1782e:	e026      	b.n	1787e <encode_uint+0x78>
	switch (specifier) {
   17830:	2b58      	cmp	r3, #88	; 0x58
   17832:	d002      	beq.n	1783a <encode_uint+0x34>
   17834:	f04f 090a 	mov.w	r9, #10
   17838:	e021      	b.n	1787e <encode_uint+0x78>
		return 16;
   1783a:	f04f 0910 	mov.w	r9, #16
   1783e:	e01e      	b.n	1787e <encode_uint+0x78>
		return 8;
   17840:	f04f 0908 	mov.w	r9, #8
   17844:	e01b      	b.n	1787e <encode_uint+0x78>
		return 16;
   17846:	f04f 0910 	mov.w	r9, #16
   1784a:	e018      	b.n	1787e <encode_uint+0x78>
	switch (specifier) {
   1784c:	f04f 090a 	mov.w	r9, #10
	char *bp = bps + (bpe - bps);
   17850:	e015      	b.n	1787e <encode_uint+0x78>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   17852:	f1bb 0f19 	cmp.w	fp, #25
   17856:	d821      	bhi.n	1789c <encode_uint+0x96>
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
   17858:	b2d2      	uxtb	r2, r2
		*--bp = (lsv <= 9) ? ('0' + lsv)
   1785a:	3237      	adds	r2, #55	; 0x37
   1785c:	b2d2      	uxtb	r2, r2
   1785e:	f806 2d01 	strb.w	r2, [r6, #-1]!
		value /= radix;
   17862:	463a      	mov	r2, r7
   17864:	4643      	mov	r3, r8
   17866:	4620      	mov	r0, r4
   17868:	4629      	mov	r1, r5
   1786a:	f7f8 fd49 	bl	10300 <__aeabi_uldivmod>
	} while ((value != 0) && (bps < bp));
   1786e:	42bc      	cmp	r4, r7
   17870:	f175 0300 	sbcs.w	r3, r5, #0
   17874:	d316      	bcc.n	178a4 <encode_uint+0x9e>
   17876:	4556      	cmp	r6, sl
   17878:	d914      	bls.n	178a4 <encode_uint+0x9e>
		value /= radix;
   1787a:	4604      	mov	r4, r0
   1787c:	460d      	mov	r5, r1
		unsigned int lsv = (unsigned int)(value % radix);
   1787e:	f04f 0800 	mov.w	r8, #0
   17882:	464f      	mov	r7, r9
   17884:	464a      	mov	r2, r9
   17886:	4643      	mov	r3, r8
   17888:	4620      	mov	r0, r4
   1788a:	4629      	mov	r1, r5
   1788c:	f7f8 fd38 	bl	10300 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   17890:	2a09      	cmp	r2, #9
   17892:	d8de      	bhi.n	17852 <encode_uint+0x4c>
   17894:	b2d2      	uxtb	r2, r2
   17896:	3230      	adds	r2, #48	; 0x30
   17898:	b2d2      	uxtb	r2, r2
   1789a:	e7e0      	b.n	1785e <encode_uint+0x58>
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
   1789c:	b2d2      	uxtb	r2, r2
		*--bp = (lsv <= 9) ? ('0' + lsv)
   1789e:	3257      	adds	r2, #87	; 0x57
   178a0:	b2d2      	uxtb	r2, r2
   178a2:	e7dc      	b.n	1785e <encode_uint+0x58>
	if (conv->flag_hash) {
   178a4:	9b01      	ldr	r3, [sp, #4]
   178a6:	781b      	ldrb	r3, [r3, #0]
   178a8:	f013 0f20 	tst.w	r3, #32
   178ac:	d005      	beq.n	178ba <encode_uint+0xb4>
		if (radix == 8) {
   178ae:	f1b9 0f08 	cmp.w	r9, #8
   178b2:	d006      	beq.n	178c2 <encode_uint+0xbc>
		} else if (radix == 16) {
   178b4:	f1b9 0f10 	cmp.w	r9, #16
   178b8:	d009      	beq.n	178ce <encode_uint+0xc8>
}
   178ba:	4630      	mov	r0, r6
   178bc:	b003      	add	sp, #12
   178be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			conv->altform_0 = true;
   178c2:	9a01      	ldr	r2, [sp, #4]
   178c4:	7893      	ldrb	r3, [r2, #2]
   178c6:	f043 0308 	orr.w	r3, r3, #8
   178ca:	7093      	strb	r3, [r2, #2]
   178cc:	e7f5      	b.n	178ba <encode_uint+0xb4>
			conv->altform_0c = true;
   178ce:	9a01      	ldr	r2, [sp, #4]
   178d0:	7893      	ldrb	r3, [r2, #2]
   178d2:	f043 0310 	orr.w	r3, r3, #16
   178d6:	7093      	strb	r3, [r2, #2]
   178d8:	e7ef      	b.n	178ba <encode_uint+0xb4>

000178da <outs>:
{
   178da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   178de:	4607      	mov	r7, r0
   178e0:	460e      	mov	r6, r1
   178e2:	4614      	mov	r4, r2
   178e4:	4698      	mov	r8, r3
	size_t count = 0;
   178e6:	2500      	movs	r5, #0
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   178e8:	e006      	b.n	178f8 <outs+0x1e>
		int rc = out((int)*sp++, ctx);
   178ea:	4631      	mov	r1, r6
   178ec:	f814 0b01 	ldrb.w	r0, [r4], #1
   178f0:	47b8      	blx	r7
		if (rc < 0) {
   178f2:	2800      	cmp	r0, #0
   178f4:	db09      	blt.n	1790a <outs+0x30>
		++count;
   178f6:	3501      	adds	r5, #1
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   178f8:	4544      	cmp	r4, r8
   178fa:	d3f6      	bcc.n	178ea <outs+0x10>
   178fc:	f1b8 0f00 	cmp.w	r8, #0
   17900:	d102      	bne.n	17908 <outs+0x2e>
   17902:	7823      	ldrb	r3, [r4, #0]
   17904:	2b00      	cmp	r3, #0
   17906:	d1f0      	bne.n	178ea <outs+0x10>
	return (int)count;
   17908:	4628      	mov	r0, r5
}
   1790a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001790e <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_MCUBOOT_SIGNATURE_KEY_FILE, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_MCUBOOT_EXTRA_IMGTOOL_ARGS, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_LEGACY_INCLUDE_PATH, 1);

GEN_ABS_SYM_END
   1790e:	4770      	bx	lr

00017910 <flash_area_close>:

void flash_area_close(const struct flash_area *fa)
{
	/* nothing to do for now */
}
   17910:	4770      	bx	lr

00017912 <flash_area_read>:

int flash_area_read(const struct flash_area *fa, off_t off, void *dst,
		    size_t len)
{
   17912:	b510      	push	{r4, lr}
   17914:	4684      	mov	ip, r0


static inline bool is_in_flash_area_bounds(const struct flash_area *fa,
					   off_t off, size_t len)
{
	return (off >= 0) && ((off + len) <= fa->fa_size);
   17916:	2900      	cmp	r1, #0
   17918:	db06      	blt.n	17928 <flash_area_read+0x16>
   1791a:	18c8      	adds	r0, r1, r3
   1791c:	f8dc 4008 	ldr.w	r4, [ip, #8]
   17920:	42a0      	cmp	r0, r4
   17922:	d90c      	bls.n	1793e <flash_area_read+0x2c>
   17924:	2000      	movs	r0, #0
   17926:	e000      	b.n	1792a <flash_area_read+0x18>
   17928:	2000      	movs	r0, #0
	if (!is_in_flash_area_bounds(fa, off, len)) {
   1792a:	b150      	cbz	r0, 17942 <flash_area_read+0x30>
		return -EINVAL;
	}

	return flash_read(fa->fa_dev, fa->fa_off + off, dst, len);
   1792c:	f8dc 000c 	ldr.w	r0, [ip, #12]
   17930:	f8dc 4004 	ldr.w	r4, [ip, #4]
   17934:	4421      	add	r1, r4
	const struct flash_driver_api *api =
   17936:	6884      	ldr	r4, [r0, #8]
	return api->read(dev, offset, data, len);
   17938:	6824      	ldr	r4, [r4, #0]
   1793a:	47a0      	blx	r4
}
   1793c:	bd10      	pop	{r4, pc}
   1793e:	2001      	movs	r0, #1
   17940:	e7f3      	b.n	1792a <flash_area_read+0x18>
		return -EINVAL;
   17942:	f06f 0015 	mvn.w	r0, #21
   17946:	e7f9      	b.n	1793c <flash_area_read+0x2a>

00017948 <flash_area_write>:

int flash_area_write(const struct flash_area *fa, off_t off, const void *src,
		     size_t len)
{
   17948:	b510      	push	{r4, lr}
   1794a:	4684      	mov	ip, r0
   1794c:	2900      	cmp	r1, #0
   1794e:	db06      	blt.n	1795e <flash_area_write+0x16>
   17950:	18c8      	adds	r0, r1, r3
   17952:	f8dc 4008 	ldr.w	r4, [ip, #8]
   17956:	42a0      	cmp	r0, r4
   17958:	d90c      	bls.n	17974 <flash_area_write+0x2c>
   1795a:	2000      	movs	r0, #0
   1795c:	e000      	b.n	17960 <flash_area_write+0x18>
   1795e:	2000      	movs	r0, #0
	if (!is_in_flash_area_bounds(fa, off, len)) {
   17960:	b150      	cbz	r0, 17978 <flash_area_write+0x30>
		return -EINVAL;
	}

	return flash_write(fa->fa_dev, fa->fa_off + off, (void *)src, len);
   17962:	f8dc 000c 	ldr.w	r0, [ip, #12]
   17966:	f8dc 4004 	ldr.w	r4, [ip, #4]
   1796a:	4421      	add	r1, r4
	const struct flash_driver_api *api =
   1796c:	6884      	ldr	r4, [r0, #8]
	rc = api->write(dev, offset, data, len);
   1796e:	6864      	ldr	r4, [r4, #4]
   17970:	47a0      	blx	r4
}
   17972:	bd10      	pop	{r4, pc}
   17974:	2001      	movs	r0, #1
   17976:	e7f3      	b.n	17960 <flash_area_write+0x18>
		return -EINVAL;
   17978:	f06f 0015 	mvn.w	r0, #21
   1797c:	e7f9      	b.n	17972 <flash_area_write+0x2a>

0001797e <flash_area_erase>:

int flash_area_erase(const struct flash_area *fa, off_t off, size_t len)
{
   1797e:	b508      	push	{r3, lr}
   17980:	4603      	mov	r3, r0
   17982:	2900      	cmp	r1, #0
   17984:	db06      	blt.n	17994 <flash_area_erase+0x16>
   17986:	1888      	adds	r0, r1, r2
   17988:	f8d3 c008 	ldr.w	ip, [r3, #8]
   1798c:	4560      	cmp	r0, ip
   1798e:	d90a      	bls.n	179a6 <flash_area_erase+0x28>
   17990:	2000      	movs	r0, #0
   17992:	e000      	b.n	17996 <flash_area_erase+0x18>
   17994:	2000      	movs	r0, #0
	if (!is_in_flash_area_bounds(fa, off, len)) {
   17996:	b140      	cbz	r0, 179aa <flash_area_erase+0x2c>
		return -EINVAL;
	}

	return flash_erase(fa->fa_dev, fa->fa_off + off, len);
   17998:	68d8      	ldr	r0, [r3, #12]
   1799a:	685b      	ldr	r3, [r3, #4]
   1799c:	4419      	add	r1, r3
	const struct flash_driver_api *api =
   1799e:	6883      	ldr	r3, [r0, #8]
	rc = api->erase(dev, offset, size);
   179a0:	689b      	ldr	r3, [r3, #8]
   179a2:	4798      	blx	r3
}
   179a4:	bd08      	pop	{r3, pc}
   179a6:	2001      	movs	r0, #1
   179a8:	e7f5      	b.n	17996 <flash_area_erase+0x18>
		return -EINVAL;
   179aa:	f06f 0015 	mvn.w	r0, #21
   179ae:	e7f9      	b.n	179a4 <flash_area_erase+0x26>

000179b0 <flash_area_align>:

uint32_t flash_area_align(const struct flash_area *fa)
{
   179b0:	b508      	push	{r3, lr}
	return flash_get_write_block_size(fa->fa_dev);
   179b2:	68c0      	ldr	r0, [r0, #12]
 */
__syscall size_t flash_get_write_block_size(const struct device *dev);

static inline size_t z_impl_flash_get_write_block_size(const struct device *dev)
{
	const struct flash_driver_api *api =
   179b4:	6883      	ldr	r3, [r0, #8]
		(const struct flash_driver_api *)dev->api;

	return api->get_parameters(dev)->write_block_size;
   179b6:	68db      	ldr	r3, [r3, #12]
   179b8:	4798      	blx	r3
}
   179ba:	6800      	ldr	r0, [r0, #0]
   179bc:	bd08      	pop	{r3, pc}

000179be <flash_area_erased_val>:
{
	return fa->fa_dev;
}

uint8_t flash_area_erased_val(const struct flash_area *fa)
{
   179be:	b508      	push	{r3, lr}
	const struct flash_parameters *param;

	param = flash_get_parameters(fa->fa_dev);
   179c0:	68c0      	ldr	r0, [r0, #12]
 */
__syscall const struct flash_parameters *flash_get_parameters(const struct device *dev);

static inline const struct flash_parameters *z_impl_flash_get_parameters(const struct device *dev)
{
	const struct flash_driver_api *api =
   179c2:	6883      	ldr	r3, [r0, #8]
		(const struct flash_driver_api *)dev->api;

	return api->get_parameters(dev);
   179c4:	68db      	ldr	r3, [r3, #12]
   179c6:	4798      	blx	r3

	return param->erase_value;
}
   179c8:	7900      	ldrb	r0, [r0, #4]
   179ca:	bd08      	pop	{r3, pc}

000179cc <pm_policy_state_lock_is_active>:
			return (atomic_get(&substate_lock_t[i].lock) != 0);
		}
	}

	return false;
}
   179cc:	2000      	movs	r0, #0
   179ce:	4770      	bx	lr

000179d0 <abort_function>:
{
   179d0:	b508      	push	{r3, lr}
	sys_reboot(SYS_REBOOT_WARM);
   179d2:	2000      	movs	r0, #0
   179d4:	f7f9 fd78 	bl	114c8 <sys_reboot>

000179d8 <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   179d8:	b508      	push	{r3, lr}

	if (esf != NULL) {
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
   179da:	f001 fac7 	bl	18f6c <z_fatal_error>
}
   179de:	bd08      	pop	{r3, pc}

000179e0 <z_do_kernel_oops>:
 *
 * @param esf exception frame
 * @param callee_regs Callee-saved registers (R4-R11)
 */
void z_do_kernel_oops(const z_arch_esf_t *esf, _callee_saved_t *callee_regs)
{
   179e0:	b508      	push	{r3, lr}
   179e2:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
   179e4:	6800      	ldr	r0, [r0, #0]
   179e6:	f7ff fff7 	bl	179d8 <z_arm_fatal_error>
	esf_copy.extra_info = (struct __extra_esf_info) { 0 };
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */

	z_arm_fatal_error(reason, &esf_copy);
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
}
   179ea:	bd08      	pop	{r3, pc}

000179ec <z_irq_spurious>:
 * Installed in all _sw_isr_table slots at boot time. Throws an error if
 * called.
 *
 */
void z_irq_spurious(const void *unused)
{
   179ec:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   179ee:	2100      	movs	r1, #0
   179f0:	2001      	movs	r0, #1
   179f2:	f7ff fff1 	bl	179d8 <z_arm_fatal_error>
}
   179f6:	bd08      	pop	{r3, pc}

000179f8 <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
   179f8:	b508      	push	{r3, lr}
	handler();
   179fa:	f7fa f83f 	bl	11a7c <z_SysNmiOnReset>
	z_arm_int_exit();
   179fe:	f7fa f935 	bl	11c6c <z_arm_exc_exit>
}
   17a02:	bd08      	pop	{r3, pc}

00017a04 <memory_fault_recoverable>:
}
   17a04:	2000      	movs	r0, #0
   17a06:	4770      	bx	lr

00017a08 <debug_monitor>:
	*recoverable = false;
   17a08:	2300      	movs	r3, #0
   17a0a:	700b      	strb	r3, [r1, #0]
}
   17a0c:	4770      	bx	lr

00017a0e <fault_handle>:
{
   17a0e:	b508      	push	{r3, lr}
	*recoverable = false;
   17a10:	2300      	movs	r3, #0
   17a12:	7013      	strb	r3, [r2, #0]
	switch (fault) {
   17a14:	1ecb      	subs	r3, r1, #3
   17a16:	2b09      	cmp	r3, #9
   17a18:	d81a      	bhi.n	17a50 <fault_handle+0x42>
   17a1a:	e8df f003 	tbb	[pc, r3]
   17a1e:	0905      	.short	0x0905
   17a20:	1919110d 	.word	0x1919110d
   17a24:	14191919 	.word	0x14191919
		reason = hard_fault(esf, recoverable);
   17a28:	4611      	mov	r1, r2
   17a2a:	f7fa f9b9 	bl	11da0 <hard_fault>
		break;
   17a2e:	e010      	b.n	17a52 <fault_handle+0x44>
		reason = mem_manage_fault(esf, 0, recoverable);
   17a30:	2100      	movs	r1, #0
   17a32:	f7fa f965 	bl	11d00 <mem_manage_fault>
		break;
   17a36:	e00c      	b.n	17a52 <fault_handle+0x44>
		reason = bus_fault(esf, 0, recoverable);
   17a38:	2100      	movs	r1, #0
   17a3a:	f7fa f925 	bl	11c88 <bus_fault>
		break;
   17a3e:	e008      	b.n	17a52 <fault_handle+0x44>
		reason = usage_fault(esf);
   17a40:	f7fa f94c 	bl	11cdc <usage_fault>
		break;
   17a44:	e005      	b.n	17a52 <fault_handle+0x44>
		debug_monitor(esf, recoverable);
   17a46:	4611      	mov	r1, r2
   17a48:	f7ff ffde 	bl	17a08 <debug_monitor>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   17a4c:	2000      	movs	r0, #0
		break;
   17a4e:	e000      	b.n	17a52 <fault_handle+0x44>
	switch (fault) {
   17a50:	2000      	movs	r0, #0
}
   17a52:	bd08      	pop	{r3, pc}

00017a54 <mpu_partition_is_valid>:
		((part->size & (part->size - 1U)) == 0U)
   17a54:	6843      	ldr	r3, [r0, #4]
   17a56:	1e5a      	subs	r2, r3, #1
		&&
   17a58:	4213      	tst	r3, r2
   17a5a:	d106      	bne.n	17a6a <mpu_partition_is_valid+0x16>
		&&
   17a5c:	2b1f      	cmp	r3, #31
   17a5e:	d906      	bls.n	17a6e <mpu_partition_is_valid+0x1a>
		((part->start & (part->size - 1U)) == 0U);
   17a60:	6803      	ldr	r3, [r0, #0]
		&&
   17a62:	421a      	tst	r2, r3
   17a64:	d005      	beq.n	17a72 <mpu_partition_is_valid+0x1e>
   17a66:	2000      	movs	r0, #0
   17a68:	4770      	bx	lr
   17a6a:	2000      	movs	r0, #0
   17a6c:	4770      	bx	lr
   17a6e:	2000      	movs	r0, #0
   17a70:	4770      	bx	lr
   17a72:	2001      	movs	r0, #1
}
   17a74:	4770      	bx	lr

00017a76 <region_allocate_and_init>:
	if (index > (get_num_regions() - 1U)) {
   17a76:	2807      	cmp	r0, #7
   17a78:	d805      	bhi.n	17a86 <region_allocate_and_init+0x10>
{
   17a7a:	b510      	push	{r4, lr}
   17a7c:	4604      	mov	r4, r0
	region_init(index, region_conf);
   17a7e:	f7fa faed 	bl	1205c <region_init>
	return index;
   17a82:	4620      	mov	r0, r4
}
   17a84:	bd10      	pop	{r4, pc}
		return -EINVAL;
   17a86:	f06f 0015 	mvn.w	r0, #21
}
   17a8a:	4770      	bx	lr

00017a8c <mpu_configure_region>:
{
   17a8c:	b500      	push	{lr}
   17a8e:	b085      	sub	sp, #20
	region_conf.base = new_region->start;
   17a90:	680b      	ldr	r3, [r1, #0]
   17a92:	9301      	str	r3, [sp, #4]
	get_region_attr_from_mpu_partition_info(&region_conf.attr,
   17a94:	684b      	ldr	r3, [r1, #4]
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
   17a96:	688a      	ldr	r2, [r1, #8]
	if (size <= 32U) {
   17a98:	2b20      	cmp	r3, #32
   17a9a:	d912      	bls.n	17ac2 <mpu_configure_region+0x36>
	if (size > (1UL << 31)) {
   17a9c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   17aa0:	d811      	bhi.n	17ac6 <mpu_configure_region+0x3a>
	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
   17aa2:	3b01      	subs	r3, #1
   17aa4:	fab3 f383 	clz	r3, r3
   17aa8:	f1c3 031f 	rsb	r3, r3, #31
   17aac:	005b      	lsls	r3, r3, #1
   17aae:	f003 033e 	and.w	r3, r3, #62	; 0x3e
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
   17ab2:	4313      	orrs	r3, r2
   17ab4:	9303      	str	r3, [sp, #12]
	return region_allocate_and_init(index,
   17ab6:	a901      	add	r1, sp, #4
   17ab8:	f7ff ffdd 	bl	17a76 <region_allocate_and_init>
}
   17abc:	b005      	add	sp, #20
   17abe:	f85d fb04 	ldr.w	pc, [sp], #4
		return REGION_32B;
   17ac2:	2308      	movs	r3, #8
   17ac4:	e7f5      	b.n	17ab2 <mpu_configure_region+0x26>
		return REGION_4G;
   17ac6:	233e      	movs	r3, #62	; 0x3e
   17ac8:	e7f3      	b.n	17ab2 <mpu_configure_region+0x26>

00017aca <mpu_configure_regions>:
{
   17aca:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   17ace:	4680      	mov	r8, r0
   17ad0:	460f      	mov	r7, r1
   17ad2:	4699      	mov	r9, r3
	int reg_index = start_reg_index;
   17ad4:	4616      	mov	r6, r2
	for (i = 0; i < regions_num; i++) {
   17ad6:	2500      	movs	r5, #0
   17ad8:	e009      	b.n	17aee <mpu_configure_regions+0x24>
		reg_index = mpu_configure_region(reg_index, &regions[i]);
   17ada:	4621      	mov	r1, r4
   17adc:	b2f0      	uxtb	r0, r6
   17ade:	f7ff ffd5 	bl	17a8c <mpu_configure_region>
   17ae2:	4606      	mov	r6, r0
		if (reg_index == -EINVAL) {
   17ae4:	f110 0f16 	cmn.w	r0, #22
   17ae8:	d014      	beq.n	17b14 <mpu_configure_regions+0x4a>
		reg_index++;
   17aea:	3601      	adds	r6, #1
	for (i = 0; i < regions_num; i++) {
   17aec:	3501      	adds	r5, #1
   17aee:	42bd      	cmp	r5, r7
   17af0:	da10      	bge.n	17b14 <mpu_configure_regions+0x4a>
		if (regions[i].size == 0U) {
   17af2:	eb05 0445 	add.w	r4, r5, r5, lsl #1
   17af6:	eb08 0484 	add.w	r4, r8, r4, lsl #2
   17afa:	6862      	ldr	r2, [r4, #4]
   17afc:	2a00      	cmp	r2, #0
   17afe:	d0f5      	beq.n	17aec <mpu_configure_regions+0x22>
		if (do_sanity_check &&
   17b00:	f1b9 0f00 	cmp.w	r9, #0
   17b04:	d0e9      	beq.n	17ada <mpu_configure_regions+0x10>
				(!mpu_partition_is_valid(&regions[i]))) {
   17b06:	4620      	mov	r0, r4
   17b08:	f7ff ffa4 	bl	17a54 <mpu_partition_is_valid>
		if (do_sanity_check &&
   17b0c:	2800      	cmp	r0, #0
   17b0e:	d1e4      	bne.n	17ada <mpu_configure_regions+0x10>
			return -EINVAL;
   17b10:	f06f 0615 	mvn.w	r6, #21
}
   17b14:	4630      	mov	r0, r6
   17b16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00017b1a <arm_core_mpu_configure_static_mpu_regions>:
{
   17b1a:	b508      	push	{r3, lr}
	if (mpu_configure_static_mpu_regions(static_regions, regions_num,
   17b1c:	f7fa fab2 	bl	12084 <mpu_configure_static_mpu_regions>
}
   17b20:	bd08      	pop	{r3, pc}

00017b22 <arm_core_mpu_configure_dynamic_mpu_regions>:
{
   17b22:	b508      	push	{r3, lr}
	if (mpu_configure_dynamic_mpu_regions(dynamic_regions, regions_num)
   17b24:	f7fa fab8 	bl	12098 <mpu_configure_dynamic_mpu_regions>
}
   17b28:	bd08      	pop	{r3, pc}

00017b2a <strcpy>:

char *strcpy(char *ZRESTRICT d, const char *ZRESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
   17b2a:	4602      	mov	r2, r0
   17b2c:	e002      	b.n	17b34 <strcpy+0xa>
		*d = *s;
   17b2e:	f802 3b01 	strb.w	r3, [r2], #1
		d++;
		s++;
   17b32:	3101      	adds	r1, #1
	while (*s != '\0') {
   17b34:	780b      	ldrb	r3, [r1, #0]
   17b36:	2b00      	cmp	r3, #0
   17b38:	d1f9      	bne.n	17b2e <strcpy+0x4>
	}

	*d = '\0';
   17b3a:	7013      	strb	r3, [r2, #0]

	return dest;
}
   17b3c:	4770      	bx	lr

00017b3e <strncpy>:

char *strncpy(char *ZRESTRICT d, const char *ZRESTRICT s, size_t n)
{
	char *dest = d;

	while ((n > 0) && *s != '\0') {
   17b3e:	4603      	mov	r3, r0
   17b40:	b1a2      	cbz	r2, 17b6c <strncpy+0x2e>
{
   17b42:	b410      	push	{r4}
	while ((n > 0) && *s != '\0') {
   17b44:	780c      	ldrb	r4, [r1, #0]
   17b46:	b12c      	cbz	r4, 17b54 <strncpy+0x16>
		*d = *s;
   17b48:	f803 4b01 	strb.w	r4, [r3], #1
		s++;
   17b4c:	3101      	adds	r1, #1
		d++;
		n--;
   17b4e:	3a01      	subs	r2, #1
	while ((n > 0) && *s != '\0') {
   17b50:	2a00      	cmp	r2, #0
   17b52:	d1f7      	bne.n	17b44 <strncpy+0x6>
	}

	while (n > 0) {
   17b54:	b122      	cbz	r2, 17b60 <strncpy+0x22>
		*d = '\0';
   17b56:	2100      	movs	r1, #0
   17b58:	f803 1b01 	strb.w	r1, [r3], #1
		d++;
		n--;
   17b5c:	3a01      	subs	r2, #1
   17b5e:	e7f9      	b.n	17b54 <strncpy+0x16>
	}

	return dest;
}
   17b60:	bc10      	pop	{r4}
   17b62:	4770      	bx	lr
		*d = '\0';
   17b64:	2100      	movs	r1, #0
   17b66:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
   17b6a:	3a01      	subs	r2, #1
	while (n > 0) {
   17b6c:	2a00      	cmp	r2, #0
   17b6e:	d1f9      	bne.n	17b64 <strncpy+0x26>
   17b70:	4770      	bx	lr

00017b72 <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
   17b72:	4603      	mov	r3, r0
	size_t n = 0;
   17b74:	2000      	movs	r0, #0

	while (*s != '\0') {
   17b76:	e001      	b.n	17b7c <strlen+0xa>
		s++;
   17b78:	3301      	adds	r3, #1
		n++;
   17b7a:	3001      	adds	r0, #1
	while (*s != '\0') {
   17b7c:	781a      	ldrb	r2, [r3, #0]
   17b7e:	2a00      	cmp	r2, #0
   17b80:	d1fa      	bne.n	17b78 <strlen+0x6>
	}

	return n;
}
   17b82:	4770      	bx	lr

00017b84 <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
   17b84:	4603      	mov	r3, r0
	size_t n = 0;
   17b86:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
   17b88:	e001      	b.n	17b8e <strnlen+0xa>
		s++;
   17b8a:	3301      	adds	r3, #1
		n++;
   17b8c:	3001      	adds	r0, #1
	while (*s != '\0' && n < maxlen) {
   17b8e:	781a      	ldrb	r2, [r3, #0]
   17b90:	b10a      	cbz	r2, 17b96 <strnlen+0x12>
   17b92:	4288      	cmp	r0, r1
   17b94:	d3f9      	bcc.n	17b8a <strnlen+0x6>
	}

	return n;
}
   17b96:	4770      	bx	lr

00017b98 <memcmp>:
int memcmp(const void *m1, const void *m2, size_t n)
{
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n) {
   17b98:	4613      	mov	r3, r2
   17b9a:	b16a      	cbz	r2, 17bb8 <memcmp+0x20>
		return 0;
	}

	while ((--n > 0) && (*c1 == *c2)) {
   17b9c:	3b01      	subs	r3, #1
   17b9e:	d007      	beq.n	17bb0 <memcmp+0x18>
   17ba0:	f890 c000 	ldrb.w	ip, [r0]
   17ba4:	780a      	ldrb	r2, [r1, #0]
   17ba6:	4594      	cmp	ip, r2
   17ba8:	d102      	bne.n	17bb0 <memcmp+0x18>
		c1++;
   17baa:	3001      	adds	r0, #1
		c2++;
   17bac:	3101      	adds	r1, #1
   17bae:	e7f5      	b.n	17b9c <memcmp+0x4>
	}

	return *c1 - *c2;
   17bb0:	7800      	ldrb	r0, [r0, #0]
   17bb2:	780b      	ldrb	r3, [r1, #0]
   17bb4:	1ac0      	subs	r0, r0, r3
   17bb6:	4770      	bx	lr
		return 0;
   17bb8:	2000      	movs	r0, #0
}
   17bba:	4770      	bx	lr

00017bbc <memmove>:
void *memmove(void *d, const void *s, size_t n)
{
	char *dest = d;
	const char *src  = s;

	if ((size_t) (dest - src) < n) {
   17bbc:	1a43      	subs	r3, r0, r1
   17bbe:	4293      	cmp	r3, r2
   17bc0:	d304      	bcc.n	17bcc <memmove+0x10>
	char *dest = d;
   17bc2:	4603      	mov	r3, r0
   17bc4:	e00a      	b.n	17bdc <memmove+0x20>
		 * The <src> buffer overlaps with the start of the <dest> buffer.
		 * Copy backwards to prevent the premature corruption of <src>.
		 */

		while (n > 0) {
			n--;
   17bc6:	3a01      	subs	r2, #1
			dest[n] = src[n];
   17bc8:	5c8b      	ldrb	r3, [r1, r2]
   17bca:	5483      	strb	r3, [r0, r2]
		while (n > 0) {
   17bcc:	2a00      	cmp	r2, #0
   17bce:	d1fa      	bne.n	17bc6 <memmove+0xa>
   17bd0:	4770      	bx	lr
		}
	} else {
		/* It is safe to perform a forward-copy */
		while (n > 0) {
			*dest = *src;
   17bd2:	f811 cb01 	ldrb.w	ip, [r1], #1
   17bd6:	f803 cb01 	strb.w	ip, [r3], #1
			dest++;
			src++;
			n--;
   17bda:	3a01      	subs	r2, #1
		while (n > 0) {
   17bdc:	2a00      	cmp	r2, #0
   17bde:	d1f8      	bne.n	17bd2 <memmove+0x16>
		}
	}

	return d;
}
   17be0:	4770      	bx	lr

00017be2 <memcpy>:
	const unsigned char *s_byte = (const unsigned char *)s;

#if !defined(CONFIG_MINIMAL_LIBC_OPTIMIZE_STRING_FOR_SIZE)
	const uintptr_t mask = sizeof(mem_word_t) - 1;

	if ((((uintptr_t)d ^ (uintptr_t)s_byte) & mask) == 0) {
   17be2:	ea80 0301 	eor.w	r3, r0, r1
   17be6:	f013 0f03 	tst.w	r3, #3
   17bea:	d001      	beq.n	17bf0 <memcpy+0xe>
	unsigned char *d_byte = (unsigned char *)d;
   17bec:	4603      	mov	r3, r0
   17bee:	e023      	b.n	17c38 <memcpy+0x56>
   17bf0:	4603      	mov	r3, r0

		/* do byte-sized copying until word-aligned or finished */

		while (((uintptr_t)d_byte) & mask) {
   17bf2:	f013 0f03 	tst.w	r3, #3
   17bf6:	d00f      	beq.n	17c18 <memcpy+0x36>
			if (n == 0) {
   17bf8:	b30a      	cbz	r2, 17c3e <memcpy+0x5c>
				return d;
			}
			*(d_byte++) = *(s_byte++);
   17bfa:	f811 cb01 	ldrb.w	ip, [r1], #1
   17bfe:	f803 cb01 	strb.w	ip, [r3], #1
			n--;
   17c02:	3a01      	subs	r2, #1
   17c04:	e7f5      	b.n	17bf2 <memcpy+0x10>
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
		*(d_byte++) = *(s_byte++);
   17c06:	f811 cb01 	ldrb.w	ip, [r1], #1
   17c0a:	f803 cb01 	strb.w	ip, [r3], #1
		n--;
   17c0e:	3a01      	subs	r2, #1
	while (n > 0) {
   17c10:	2a00      	cmp	r2, #0
   17c12:	d1f8      	bne.n	17c06 <memcpy+0x24>
	}

	return d;
}
   17c14:	bc10      	pop	{r4}
   17c16:	4770      	bx	lr
		while (n >= sizeof(mem_word_t)) {
   17c18:	2a03      	cmp	r2, #3
   17c1a:	d90d      	bls.n	17c38 <memcpy+0x56>
{
   17c1c:	b410      	push	{r4}
			*(d_word++) = *(s_word++);
   17c1e:	f851 4b04 	ldr.w	r4, [r1], #4
   17c22:	f843 4b04 	str.w	r4, [r3], #4
			n -= sizeof(mem_word_t);
   17c26:	3a04      	subs	r2, #4
		while (n >= sizeof(mem_word_t)) {
   17c28:	2a03      	cmp	r2, #3
   17c2a:	d8f8      	bhi.n	17c1e <memcpy+0x3c>
   17c2c:	e7f0      	b.n	17c10 <memcpy+0x2e>
		*(d_byte++) = *(s_byte++);
   17c2e:	f811 cb01 	ldrb.w	ip, [r1], #1
   17c32:	f803 cb01 	strb.w	ip, [r3], #1
		n--;
   17c36:	3a01      	subs	r2, #1
	while (n > 0) {
   17c38:	2a00      	cmp	r2, #0
   17c3a:	d1f8      	bne.n	17c2e <memcpy+0x4c>
   17c3c:	4770      	bx	lr
}
   17c3e:	4770      	bx	lr

00017c40 <memset>:
void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
   17c40:	fa5f fc81 	uxtb.w	ip, r1
	unsigned char *d_byte = (unsigned char *)buf;
   17c44:	4603      	mov	r3, r0

#if !defined(CONFIG_MINIMAL_LIBC_OPTIMIZE_STRING_FOR_SIZE)
	while (((uintptr_t)d_byte) & (sizeof(mem_word_t) - 1)) {
   17c46:	e002      	b.n	17c4e <memset+0xe>
		if (n == 0) {
			return buf;
		}
		*(d_byte++) = c_byte;
   17c48:	f803 cb01 	strb.w	ip, [r3], #1
		n--;
   17c4c:	3a01      	subs	r2, #1
	while (((uintptr_t)d_byte) & (sizeof(mem_word_t) - 1)) {
   17c4e:	f013 0f03 	tst.w	r3, #3
   17c52:	d002      	beq.n	17c5a <memset+0x1a>
		if (n == 0) {
   17c54:	2a00      	cmp	r2, #0
   17c56:	d1f7      	bne.n	17c48 <memset+0x8>
   17c58:	e00f      	b.n	17c7a <memset+0x3a>
	}

	/* do word-sized initialization as long as possible */

	mem_word_t *d_word = (mem_word_t *)d_byte;
	mem_word_t c_word = (mem_word_t)c_byte;
   17c5a:	b2c9      	uxtb	r1, r1

	c_word |= c_word << 8;
   17c5c:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
	c_word |= c_word << 16;
   17c60:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
#if Z_MEM_WORD_T_WIDTH > 32
	c_word |= c_word << 32;
#endif

	while (n >= sizeof(mem_word_t)) {
   17c64:	2a03      	cmp	r2, #3
   17c66:	d906      	bls.n	17c76 <memset+0x36>
		*(d_word++) = c_word;
   17c68:	f843 1b04 	str.w	r1, [r3], #4
		n -= sizeof(mem_word_t);
   17c6c:	3a04      	subs	r2, #4
   17c6e:	e7f9      	b.n	17c64 <memset+0x24>

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
		*(d_byte++) = c_byte;
   17c70:	f803 cb01 	strb.w	ip, [r3], #1
		n--;
   17c74:	3a01      	subs	r2, #1
	while (n > 0) {
   17c76:	2a00      	cmp	r2, #0
   17c78:	d1fa      	bne.n	17c70 <memset+0x30>
	}

	return buf;
}
   17c7a:	4770      	bx	lr

00017c7c <_stdout_hook_default>:
}
   17c7c:	f04f 30ff 	mov.w	r0, #4294967295
   17c80:	4770      	bx	lr

00017c82 <fputc>:
}
#include <syscalls/zephyr_fputc_mrsh.c>
#endif

int fputc(int c, FILE *stream)
{
   17c82:	b508      	push	{r3, lr}
		union { uintptr_t x; FILE * val; } parm1 = { .val = stream };
		return (int) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_ZEPHYR_FPUTC);
	}
#endif
	compiler_barrier();
	return z_impl_zephyr_fputc(c, stream);
   17c84:	f7fa fa60 	bl	12148 <z_impl_zephyr_fputc>
	return zephyr_fputc(c, stream);
}
   17c88:	bd08      	pop	{r3, pc}

00017c8a <nrf52_errata_197>:
{
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   17c8a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   17c8e:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   17c92:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
   17c96:	2a08      	cmp	r2, #8
   17c98:	d001      	beq.n	17c9e <nrf52_errata_197+0x14>
                    default:
                        return false;
                }
            }
        #endif
        return false;
   17c9a:	2000      	movs	r0, #0
   17c9c:	4770      	bx	lr
                switch(var2)
   17c9e:	2b02      	cmp	r3, #2
   17ca0:	d001      	beq.n	17ca6 <nrf52_errata_197+0x1c>
                        return false;
   17ca2:	2000      	movs	r0, #0
   17ca4:	4770      	bx	lr
                        return true;
   17ca6:	2001      	movs	r0, #1
    #endif
}
   17ca8:	4770      	bx	lr

00017caa <pm_state_set>:
/* Invoke Low Power/System Off specific Tasks */
__weak void pm_state_set(enum pm_state state, uint8_t substate_id)
{
	ARG_UNUSED(substate_id);

	switch (state) {
   17caa:	2806      	cmp	r0, #6
   17cac:	d000      	beq.n	17cb0 <pm_state_set+0x6>
		break;
	default:
		LOG_DBG("Unsupported power state %u", state);
		break;
	}
}
   17cae:	4770      	bx	lr
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
   17cb0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   17cb4:	2201      	movs	r2, #1
   17cb6:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
   17cba:	f3bf 8f4f 	dsb	sy
        __WFE();
   17cbe:	bf20      	wfe
    while (true)
   17cc0:	e7fd      	b.n	17cbe <pm_state_set+0x14>

00017cc2 <pm_state_exit_post_ops>:
   17cc2:	2300      	movs	r3, #0
   17cc4:	f383 8811 	msr	BASEPRI, r3
   17cc8:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
   17ccc:	4770      	bx	lr

00017cce <boot_request_upgrade>:
#endif

}

int boot_request_upgrade(int permanent)
{
   17cce:	b508      	push	{r3, lr}
#ifdef FLASH_AREA_IMAGE_SECONDARY
	int rc;

	rc = boot_set_pending(permanent);
   17cd0:	f000 ff6c 	bl	18bac <boot_set_pending>
	if (rc) {
   17cd4:	b900      	cbnz	r0, 17cd8 <boot_request_upgrade+0xa>
		return -EFAULT;
	}
#endif /* FLASH_AREA_IMAGE_SECONDARY */
	return 0;
}
   17cd6:	bd08      	pop	{r3, pc}
		return -EFAULT;
   17cd8:	f06f 000d 	mvn.w	r0, #13
   17cdc:	e7fb      	b.n	17cd6 <boot_request_upgrade+0x8>

00017cde <get_sub_data>:
	struct nrf_clock_control_data *data = dev->data;
   17cde:	6900      	ldr	r0, [r0, #16]
	return &data->subsys[type];
   17ce0:	eb01 0141 	add.w	r1, r1, r1, lsl #1
   17ce4:	0089      	lsls	r1, r1, #2
   17ce6:	3138      	adds	r1, #56	; 0x38
}
   17ce8:	4408      	add	r0, r1
   17cea:	4770      	bx	lr

00017cec <get_sub_config>:
	const struct nrf_clock_control_config *config =
   17cec:	6840      	ldr	r0, [r0, #4]
}
   17cee:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
   17cf2:	4770      	bx	lr

00017cf4 <get_onoff_manager>:
	struct nrf_clock_control_data *data = dev->data;
   17cf4:	6900      	ldr	r0, [r0, #16]
	return &data->mgr[type];
   17cf6:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
}
   17cfa:	eb00 0081 	add.w	r0, r0, r1, lsl #2
   17cfe:	4770      	bx	lr

00017d00 <get_status>:
{
   17d00:	b508      	push	{r3, lr}
	return GET_STATUS(get_sub_data(dev, type)->flags);
   17d02:	b2c9      	uxtb	r1, r1
   17d04:	f7ff ffeb 	bl	17cde <get_sub_data>
   17d08:	6880      	ldr	r0, [r0, #8]
}
   17d0a:	f000 0007 	and.w	r0, r0, #7
   17d0e:	bd08      	pop	{r3, pc}

00017d10 <set_off_state>:
	__asm__ volatile(
   17d10:	f04f 0320 	mov.w	r3, #32
   17d14:	f3ef 8211 	mrs	r2, BASEPRI
   17d18:	f383 8812 	msr	BASEPRI_MAX, r3
   17d1c:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   17d20:	6803      	ldr	r3, [r0, #0]
	if ((current_ctx != 0) && (current_ctx != ctx)) {
   17d22:	f013 03c0 	ands.w	r3, r3, #192	; 0xc0
   17d26:	d001      	beq.n	17d2c <set_off_state+0x1c>
   17d28:	428b      	cmp	r3, r1
   17d2a:	d107      	bne.n	17d3c <set_off_state+0x2c>
		*flags = CLOCK_CONTROL_STATUS_OFF;
   17d2c:	2301      	movs	r3, #1
   17d2e:	6003      	str	r3, [r0, #0]
	int err = 0;
   17d30:	2000      	movs	r0, #0
	__asm__ volatile(
   17d32:	f382 8811 	msr	BASEPRI, r2
   17d36:	f3bf 8f6f 	isb	sy
}
   17d3a:	4770      	bx	lr
		err = -EPERM;
   17d3c:	f04f 30ff 	mov.w	r0, #4294967295
   17d40:	e7f7      	b.n	17d32 <set_off_state+0x22>

00017d42 <set_starting_state>:
	__asm__ volatile(
   17d42:	f04f 0320 	mov.w	r3, #32
   17d46:	f3ef 8211 	mrs	r2, BASEPRI
   17d4a:	f383 8812 	msr	BASEPRI_MAX, r3
   17d4e:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   17d52:	6803      	ldr	r3, [r0, #0]
   17d54:	f003 0cc0 	and.w	ip, r3, #192	; 0xc0
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
   17d58:	f003 0307 	and.w	r3, r3, #7
   17d5c:	2b01      	cmp	r3, #1
   17d5e:	d008      	beq.n	17d72 <set_starting_state+0x30>
	} else if (current_ctx != ctx) {
   17d60:	458c      	cmp	ip, r1
   17d62:	d009      	beq.n	17d78 <set_starting_state+0x36>
		err = -EPERM;
   17d64:	f04f 30ff 	mov.w	r0, #4294967295
	__asm__ volatile(
   17d68:	f382 8811 	msr	BASEPRI, r2
   17d6c:	f3bf 8f6f 	isb	sy
}
   17d70:	4770      	bx	lr
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
   17d72:	6001      	str	r1, [r0, #0]
	int err = 0;
   17d74:	2000      	movs	r0, #0
   17d76:	e7f7      	b.n	17d68 <set_starting_state+0x26>
		err = -EALREADY;
   17d78:	f06f 0077 	mvn.w	r0, #119	; 0x77
   17d7c:	e7f4      	b.n	17d68 <set_starting_state+0x26>

00017d7e <set_on_state>:
	__asm__ volatile(
   17d7e:	f04f 0320 	mov.w	r3, #32
   17d82:	f3ef 8211 	mrs	r2, BASEPRI
   17d86:	f383 8812 	msr	BASEPRI_MAX, r3
   17d8a:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
   17d8e:	6803      	ldr	r3, [r0, #0]
   17d90:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   17d94:	f043 0302 	orr.w	r3, r3, #2
   17d98:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
   17d9a:	f382 8811 	msr	BASEPRI, r2
   17d9e:	f3bf 8f6f 	isb	sy
}
   17da2:	4770      	bx	lr

00017da4 <clkstarted_handle>:
{
   17da4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   17da6:	4606      	mov	r6, r0
   17da8:	460c      	mov	r4, r1
	struct nrf_clock_control_sub_data *sub_data = get_sub_data(dev, type);
   17daa:	f7ff ff98 	bl	17cde <get_sub_data>
	clock_control_cb_t callback = sub_data->cb;
   17dae:	6805      	ldr	r5, [r0, #0]
	void *user_data = sub_data->user_data;
   17db0:	6847      	ldr	r7, [r0, #4]
	sub_data->cb = NULL;
   17db2:	2300      	movs	r3, #0
   17db4:	f840 3b08 	str.w	r3, [r0], #8
	set_on_state(&sub_data->flags);
   17db8:	f7ff ffe1 	bl	17d7e <set_on_state>
	if (callback) {
   17dbc:	b11d      	cbz	r5, 17dc6 <clkstarted_handle+0x22>
		callback(dev, (clock_control_subsys_t)type, user_data);
   17dbe:	463a      	mov	r2, r7
   17dc0:	4621      	mov	r1, r4
   17dc2:	4630      	mov	r0, r6
   17dc4:	47a8      	blx	r5
}
   17dc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00017dc8 <stop>:
{
   17dc8:	b570      	push	{r4, r5, r6, lr}
   17dca:	4606      	mov	r6, r0
   17dcc:	4615      	mov	r5, r2
	enum clock_control_nrf_type type = (enum clock_control_nrf_type)subsys;
   17dce:	b2cc      	uxtb	r4, r1
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
   17dd0:	4621      	mov	r1, r4
   17dd2:	f7ff ff84 	bl	17cde <get_sub_data>
	err = set_off_state(&subdata->flags, ctx);
   17dd6:	4629      	mov	r1, r5
   17dd8:	3008      	adds	r0, #8
   17dda:	f7ff ff99 	bl	17d10 <set_off_state>
	if (err < 0) {
   17dde:	2800      	cmp	r0, #0
   17de0:	db06      	blt.n	17df0 <stop+0x28>
	get_sub_config(dev, type)->stop();
   17de2:	4621      	mov	r1, r4
   17de4:	4630      	mov	r0, r6
   17de6:	f7ff ff81 	bl	17cec <get_sub_config>
   17dea:	6843      	ldr	r3, [r0, #4]
   17dec:	4798      	blx	r3
	return 0;
   17dee:	2000      	movs	r0, #0
}
   17df0:	bd70      	pop	{r4, r5, r6, pc}

00017df2 <api_stop>:
{
   17df2:	b508      	push	{r3, lr}
	return stop(dev, subsys, CTX_API);
   17df4:	2280      	movs	r2, #128	; 0x80
   17df6:	f7ff ffe7 	bl	17dc8 <stop>
}
   17dfa:	bd08      	pop	{r3, pc}

00017dfc <async_start>:
{
   17dfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17e00:	4606      	mov	r6, r0
   17e02:	4690      	mov	r8, r2
   17e04:	461f      	mov	r7, r3
	enum clock_control_nrf_type type = (enum clock_control_nrf_type)subsys;
   17e06:	b2cd      	uxtb	r5, r1
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
   17e08:	4629      	mov	r1, r5
   17e0a:	f7ff ff68 	bl	17cde <get_sub_data>
   17e0e:	4604      	mov	r4, r0
	err = set_starting_state(&subdata->flags, ctx);
   17e10:	9906      	ldr	r1, [sp, #24]
   17e12:	3008      	adds	r0, #8
   17e14:	f7ff ff95 	bl	17d42 <set_starting_state>
	if (err < 0) {
   17e18:	2800      	cmp	r0, #0
   17e1a:	db09      	blt.n	17e30 <async_start+0x34>
	subdata->cb = cb;
   17e1c:	f8c4 8000 	str.w	r8, [r4]
	subdata->user_data = user_data;
   17e20:	6067      	str	r7, [r4, #4]
	 get_sub_config(dev, type)->start();
   17e22:	4629      	mov	r1, r5
   17e24:	4630      	mov	r0, r6
   17e26:	f7ff ff61 	bl	17cec <get_sub_config>
   17e2a:	6803      	ldr	r3, [r0, #0]
   17e2c:	4798      	blx	r3
	return 0;
   17e2e:	2000      	movs	r0, #0
}
   17e30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00017e34 <api_start>:
{
   17e34:	b510      	push	{r4, lr}
   17e36:	b082      	sub	sp, #8
	return async_start(dev, subsys, cb, user_data, CTX_API);
   17e38:	2480      	movs	r4, #128	; 0x80
   17e3a:	9400      	str	r4, [sp, #0]
   17e3c:	f7ff ffde 	bl	17dfc <async_start>
}
   17e40:	b002      	add	sp, #8
   17e42:	bd10      	pop	{r4, pc}

00017e44 <onoff_started_callback>:
{
   17e44:	b510      	push	{r4, lr}
   17e46:	4614      	mov	r4, r2
	struct onoff_manager *mgr = get_onoff_manager(dev, type);
   17e48:	b2c9      	uxtb	r1, r1
   17e4a:	f7ff ff53 	bl	17cf4 <get_onoff_manager>
	notify(mgr, 0);
   17e4e:	2100      	movs	r1, #0
   17e50:	47a0      	blx	r4
}
   17e52:	bd10      	pop	{r4, pc}

00017e54 <hfclk_start>:
{
   17e54:	b508      	push	{r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
   17e56:	2001      	movs	r0, #1
   17e58:	f000 ff56 	bl	18d08 <nrfx_clock_start>
}
   17e5c:	bd08      	pop	{r3, pc}

00017e5e <lfclk_start>:
{
   17e5e:	b508      	push	{r3, lr}
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
   17e60:	2000      	movs	r0, #0
   17e62:	f000 ff51 	bl	18d08 <nrfx_clock_start>
}
   17e66:	bd08      	pop	{r3, pc}

00017e68 <hfclk_stop>:
{
   17e68:	b508      	push	{r3, lr}
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
   17e6a:	2001      	movs	r0, #1
   17e6c:	f000 ff9c 	bl	18da8 <nrfx_clock_stop>
}
   17e70:	bd08      	pop	{r3, pc}

00017e72 <lfclk_stop>:
{
   17e72:	b508      	push	{r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   17e74:	2000      	movs	r0, #0
   17e76:	f000 ff97 	bl	18da8 <nrfx_clock_stop>
}
   17e7a:	bd08      	pop	{r3, pc}

00017e7c <blocking_start_callback>:
{
   17e7c:	b508      	push	{r3, lr}
   17e7e:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
   17e80:	f7fd fcdc 	bl	1583c <z_impl_k_sem_give>
}
   17e84:	bd08      	pop	{r3, pc}

00017e86 <get_drive>:
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   17e86:	f020 00f9 	bic.w	r0, r0, #249	; 0xf9
   17e8a:	0580      	lsls	r0, r0, #22
   17e8c:	0d80      	lsrs	r0, r0, #22
   17e8e:	f5b0 7f83 	cmp.w	r0, #262	; 0x106
   17e92:	d033      	beq.n	17efc <get_drive+0x76>
   17e94:	d816      	bhi.n	17ec4 <get_drive+0x3e>
   17e96:	2806      	cmp	r0, #6
   17e98:	d02c      	beq.n	17ef4 <get_drive+0x6e>
   17e9a:	d906      	bls.n	17eaa <get_drive+0x24>
   17e9c:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
   17ea0:	d10d      	bne.n	17ebe <get_drive+0x38>
		*drive = NRF_GPIO_PIN_H0S1;
   17ea2:	2301      	movs	r3, #1
   17ea4:	700b      	strb	r3, [r1, #0]
	return 0;
   17ea6:	2000      	movs	r0, #0
		break;
   17ea8:	4770      	bx	lr
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   17eaa:	b300      	cbz	r0, 17eee <get_drive+0x68>
   17eac:	2802      	cmp	r0, #2
   17eae:	d103      	bne.n	17eb8 <get_drive+0x32>
		*drive = NRF_GPIO_PIN_D0S1;
   17eb0:	2304      	movs	r3, #4
   17eb2:	700b      	strb	r3, [r1, #0]
	return 0;
   17eb4:	2000      	movs	r0, #0
		break;
   17eb6:	4770      	bx	lr
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   17eb8:	f06f 0015 	mvn.w	r0, #21
   17ebc:	4770      	bx	lr
   17ebe:	f06f 0015 	mvn.w	r0, #21
   17ec2:	4770      	bx	lr
   17ec4:	f240 2302 	movw	r3, #514	; 0x202
   17ec8:	4298      	cmp	r0, r3
   17eca:	d01b      	beq.n	17f04 <get_drive+0x7e>
   17ecc:	f5b0 7f40 	cmp.w	r0, #768	; 0x300
   17ed0:	d103      	bne.n	17eda <get_drive+0x54>
		*drive = NRF_GPIO_PIN_H0H1;
   17ed2:	2303      	movs	r3, #3
   17ed4:	700b      	strb	r3, [r1, #0]
	return 0;
   17ed6:	2000      	movs	r0, #0
		break;
   17ed8:	4770      	bx	lr
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   17eda:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
   17ede:	d103      	bne.n	17ee8 <get_drive+0x62>
		*drive = NRF_GPIO_PIN_S0H1;
   17ee0:	2302      	movs	r3, #2
   17ee2:	700b      	strb	r3, [r1, #0]
	return 0;
   17ee4:	2000      	movs	r0, #0
		break;
   17ee6:	4770      	bx	lr
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   17ee8:	f06f 0015 	mvn.w	r0, #21
   17eec:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_S0S1;
   17eee:	2000      	movs	r0, #0
   17ef0:	7008      	strb	r0, [r1, #0]
		break;
   17ef2:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_S0D1;
   17ef4:	2306      	movs	r3, #6
   17ef6:	700b      	strb	r3, [r1, #0]
	return 0;
   17ef8:	2000      	movs	r0, #0
		break;
   17efa:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_H0D1;
   17efc:	2307      	movs	r3, #7
   17efe:	700b      	strb	r3, [r1, #0]
	return 0;
   17f00:	2000      	movs	r0, #0
		break;
   17f02:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_D0H1;
   17f04:	2305      	movs	r3, #5
   17f06:	700b      	strb	r3, [r1, #0]
	return 0;
   17f08:	2000      	movs	r0, #0
}
   17f0a:	4770      	bx	lr

00017f0c <get_pull>:
	if (flags & GPIO_PULL_UP) {
   17f0c:	f010 0f10 	tst.w	r0, #16
   17f10:	d104      	bne.n	17f1c <get_pull+0x10>
	} else if (flags & GPIO_PULL_DOWN) {
   17f12:	f010 0f20 	tst.w	r0, #32
   17f16:	d103      	bne.n	17f20 <get_pull+0x14>
	return NRF_GPIO_PIN_NOPULL;
   17f18:	2000      	movs	r0, #0
   17f1a:	4770      	bx	lr
		return NRF_GPIO_PIN_PULLUP;
   17f1c:	2003      	movs	r0, #3
   17f1e:	4770      	bx	lr
		return NRF_GPIO_PIN_PULLDOWN;
   17f20:	2001      	movs	r0, #1
}
   17f22:	4770      	bx	lr

00017f24 <gpio_nrfx_port_get_raw>:
	return port->config;
   17f24:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   17f26:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
   17f28:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
   17f2c:	600b      	str	r3, [r1, #0]
}
   17f2e:	2000      	movs	r0, #0
   17f30:	4770      	bx	lr

00017f32 <gpio_nrfx_port_set_masked_raw>:
	return port->config;
   17f32:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   17f34:	685b      	ldr	r3, [r3, #4]
	const uint32_t set_mask = value & mask;
   17f36:	ea02 0001 	and.w	r0, r2, r1
	const uint32_t clear_mask = (~set_mask) & mask;
   17f3a:	ea21 0102 	bic.w	r1, r1, r2
    p_reg->OUTSET = set_mask;
   17f3e:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
    p_reg->OUTCLR = clr_mask;
   17f42:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
}
   17f46:	2000      	movs	r0, #0
   17f48:	4770      	bx	lr

00017f4a <gpio_nrfx_port_set_bits_raw>:
	return port->config;
   17f4a:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   17f4c:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTSET = set_mask;
   17f4e:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
}
   17f52:	2000      	movs	r0, #0
   17f54:	4770      	bx	lr

00017f56 <gpio_nrfx_port_clear_bits_raw>:
	return port->config;
   17f56:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   17f58:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTCLR = clr_mask;
   17f5a:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
}
   17f5e:	2000      	movs	r0, #0
   17f60:	4770      	bx	lr

00017f62 <gpio_nrfx_port_toggle_bits>:
	return port->config;
   17f62:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   17f64:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
   17f66:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	const uint32_t set_mask = value & mask;
   17f6a:	ea21 0003 	bic.w	r0, r1, r3
	const uint32_t clear_mask = (~value) & mask;
   17f6e:	400b      	ands	r3, r1
    p_reg->OUTSET = set_mask;
   17f70:	f8c2 0508 	str.w	r0, [r2, #1288]	; 0x508
    p_reg->OUTCLR = clr_mask;
   17f74:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
}
   17f78:	2000      	movs	r0, #0
   17f7a:	4770      	bx	lr

00017f7c <get_trigger>:
	if (mode == GPIO_INT_MODE_LEVEL) {
   17f7c:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
   17f80:	d007      	beq.n	17f92 <get_trigger+0x16>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
   17f82:	f1b1 6fc0 	cmp.w	r1, #100663296	; 0x6000000
   17f86:	d00d      	beq.n	17fa4 <get_trigger+0x28>
   17f88:	f1b1 7f00 	cmp.w	r1, #33554432	; 0x2000000
   17f8c:	d008      	beq.n	17fa0 <get_trigger+0x24>
   17f8e:	2001      	movs	r0, #1
}
   17f90:	4770      	bx	lr
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
   17f92:	f1b1 7f00 	cmp.w	r1, #33554432	; 0x2000000
   17f96:	d001      	beq.n	17f9c <get_trigger+0x20>
   17f98:	2005      	movs	r0, #5
   17f9a:	4770      	bx	lr
   17f9c:	2004      	movs	r0, #4
   17f9e:	4770      	bx	lr
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
   17fa0:	2002      	movs	r0, #2
   17fa2:	4770      	bx	lr
   17fa4:	2003      	movs	r0, #3
   17fa6:	4770      	bx	lr

00017fa8 <gpio_nrfx_manage_callback>:
{
   17fa8:	b410      	push	{r4}
	return port->data;
   17faa:	6904      	ldr	r4, [r0, #16]
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   17fac:	f104 0c04 	add.w	ip, r4, #4
	return list->head;
   17fb0:	6863      	ldr	r3, [r4, #4]
					bool set)
{
	__ASSERT(callback, "No callback!");
	__ASSERT(callback->handler, "No callback handler!");

	if (!sys_slist_is_empty(callbacks)) {
   17fb2:	b1fb      	cbz	r3, 17ff4 <gpio_nrfx_manage_callback+0x4c>
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   17fb4:	2000      	movs	r0, #0
   17fb6:	e00d      	b.n	17fd4 <gpio_nrfx_manage_callback+0x2c>
	return node->next;
   17fb8:	680b      	ldr	r3, [r1, #0]
	list->head = node;
   17fba:	6063      	str	r3, [r4, #4]
	return list->tail;
   17fbc:	f8dc 0004 	ldr.w	r0, [ip, #4]
Z_GENLIST_REMOVE(slist, snode)
   17fc0:	4281      	cmp	r1, r0
   17fc2:	d112      	bne.n	17fea <gpio_nrfx_manage_callback+0x42>
	list->tail = node;
   17fc4:	f8cc 3004 	str.w	r3, [ip, #4]
}
   17fc8:	e00f      	b.n	17fea <gpio_nrfx_manage_callback+0x42>
	list->tail = node;
   17fca:	f8cc 0004 	str.w	r0, [ip, #4]
}
   17fce:	e00c      	b.n	17fea <gpio_nrfx_manage_callback+0x42>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   17fd0:	4618      	mov	r0, r3
   17fd2:	681b      	ldr	r3, [r3, #0]
   17fd4:	b163      	cbz	r3, 17ff0 <gpio_nrfx_manage_callback+0x48>
   17fd6:	4299      	cmp	r1, r3
   17fd8:	d1fa      	bne.n	17fd0 <gpio_nrfx_manage_callback+0x28>
Z_GENLIST_REMOVE(slist, snode)
   17fda:	2800      	cmp	r0, #0
   17fdc:	d0ec      	beq.n	17fb8 <gpio_nrfx_manage_callback+0x10>
	return node->next;
   17fde:	680b      	ldr	r3, [r1, #0]
	parent->next = child;
   17fe0:	6003      	str	r3, [r0, #0]
	return list->tail;
   17fe2:	f8dc 3004 	ldr.w	r3, [ip, #4]
Z_GENLIST_REMOVE(slist, snode)
   17fe6:	4299      	cmp	r1, r3
   17fe8:	d0ef      	beq.n	17fca <gpio_nrfx_manage_callback+0x22>
	parent->next = child;
   17fea:	2300      	movs	r3, #0
   17fec:	600b      	str	r3, [r1, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   17fee:	2301      	movs	r3, #1
		if (!sys_slist_find_and_remove(callbacks, &callback->node)) {
   17ff0:	b903      	cbnz	r3, 17ff4 <gpio_nrfx_manage_callback+0x4c>
			if (!set) {
   17ff2:	b162      	cbz	r2, 1800e <gpio_nrfx_manage_callback+0x66>
				return -EINVAL;
			}
		}
	}

	if (set) {
   17ff4:	b172      	cbz	r2, 18014 <gpio_nrfx_manage_callback+0x6c>
	return list->head;
   17ff6:	6863      	ldr	r3, [r4, #4]
	parent->next = child;
   17ff8:	600b      	str	r3, [r1, #0]
	list->head = node;
   17ffa:	6061      	str	r1, [r4, #4]
	return list->tail;
   17ffc:	f8dc 3004 	ldr.w	r3, [ip, #4]
Z_GENLIST_PREPEND(slist, snode)
   18000:	b10b      	cbz	r3, 18006 <gpio_nrfx_manage_callback+0x5e>
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
   18002:	2000      	movs	r0, #0
   18004:	e007      	b.n	18016 <gpio_nrfx_manage_callback+0x6e>
	list->tail = node;
   18006:	f8cc 1004 	str.w	r1, [ip, #4]
   1800a:	2000      	movs	r0, #0
}
   1800c:	e003      	b.n	18016 <gpio_nrfx_manage_callback+0x6e>
				return -EINVAL;
   1800e:	f06f 0015 	mvn.w	r0, #21
   18012:	e000      	b.n	18016 <gpio_nrfx_manage_callback+0x6e>
	return 0;
   18014:	2000      	movs	r0, #0
}
   18016:	bc10      	pop	{r4}
   18018:	4770      	bx	lr

0001801a <nrfx_gpio_handler>:
{
   1801a:	b570      	push	{r4, r5, r6, lr}
    *p_pin = pin_number & 0x1F;
   1801c:	f000 041f 	and.w	r4, r0, #31
	const struct device *port = get_dev(port_id);
   18020:	0940      	lsrs	r0, r0, #5
   18022:	f7fa fab7 	bl	12594 <get_dev>
	if (port == NULL) {
   18026:	b1d8      	cbz	r0, 18060 <nrfx_gpio_handler+0x46>
   18028:	4606      	mov	r6, r0
	return port->data;
   1802a:	6903      	ldr	r3, [r0, #16]
	gpio_fire_callbacks(list, port, BIT(pin));
   1802c:	2501      	movs	r5, #1
   1802e:	40a5      	lsls	r5, r4
	return list->head;
   18030:	6859      	ldr	r1, [r3, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   18032:	b119      	cbz	r1, 1803c <nrfx_gpio_handler+0x22>
   18034:	460c      	mov	r4, r1
Z_GENLIST_PEEK_NEXT(slist, snode)
   18036:	b149      	cbz	r1, 1804c <nrfx_gpio_handler+0x32>
	return node->next;
   18038:	680c      	ldr	r4, [r1, #0]
   1803a:	e007      	b.n	1804c <nrfx_gpio_handler+0x32>
   1803c:	460c      	mov	r4, r1
   1803e:	e005      	b.n	1804c <nrfx_gpio_handler+0x32>
   18040:	b164      	cbz	r4, 1805c <nrfx_gpio_handler+0x42>
   18042:	4623      	mov	r3, r4
Z_GENLIST_PEEK_NEXT(slist, snode)
   18044:	b104      	cbz	r4, 18048 <nrfx_gpio_handler+0x2e>
	return node->next;
   18046:	6823      	ldr	r3, [r4, #0]
   18048:	4621      	mov	r1, r4
   1804a:	461c      	mov	r4, r3
   1804c:	b141      	cbz	r1, 18060 <nrfx_gpio_handler+0x46>
		if (cb->pin_mask & pins) {
   1804e:	688a      	ldr	r2, [r1, #8]
   18050:	402a      	ands	r2, r5
   18052:	d0f5      	beq.n	18040 <nrfx_gpio_handler+0x26>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
   18054:	684b      	ldr	r3, [r1, #4]
   18056:	4630      	mov	r0, r6
   18058:	4798      	blx	r3
   1805a:	e7f1      	b.n	18040 <nrfx_gpio_handler+0x26>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   1805c:	4623      	mov	r3, r4
   1805e:	e7f3      	b.n	18048 <nrfx_gpio_handler+0x2e>
}
   18060:	bd70      	pop	{r4, r5, r6, pc}

00018062 <qspi_handler>:
	if (event == NRFX_QSPI_EVENT_DONE) {
   18062:	b100      	cbz	r0, 18066 <qspi_handler+0x4>
   18064:	4770      	bx	lr
{
   18066:	b508      	push	{r3, lr}
	k_sem_give(&dev_data->sync);
   18068:	f101 0020 	add.w	r0, r1, #32
   1806c:	f7fd fbe6 	bl	1583c <z_impl_k_sem_give>
}
   18070:	bd08      	pop	{r3, pc}

00018072 <qspi_send_cmd>:
	if (!cmd) {
   18072:	2900      	cmp	r1, #0
   18074:	d055      	beq.n	18122 <qspi_send_cmd+0xb0>
{
   18076:	b5f0      	push	{r4, r5, r6, r7, lr}
   18078:	b083      	sub	sp, #12
   1807a:	4605      	mov	r5, r0
   1807c:	4608      	mov	r0, r1
	if (cmd->tx_buf) {
   1807e:	684b      	ldr	r3, [r1, #4]
   18080:	b15b      	cbz	r3, 1809a <qspi_send_cmd+0x28>
		tx_buf = cmd->tx_buf->buf;
   18082:	681c      	ldr	r4, [r3, #0]
		tx_len = cmd->tx_buf->len;
   18084:	685f      	ldr	r7, [r3, #4]
	if (cmd->rx_buf) {
   18086:	6881      	ldr	r1, [r0, #8]
   18088:	b151      	cbz	r1, 180a0 <qspi_send_cmd+0x2e>
		rx_buf = cmd->rx_buf->buf;
   1808a:	680e      	ldr	r6, [r1, #0]
		rx_len = cmd->rx_buf->len;
   1808c:	684b      	ldr	r3, [r1, #4]
	if ((rx_len != 0) && (tx_len != 0)) {
   1808e:	b14b      	cbz	r3, 180a4 <qspi_send_cmd+0x32>
   18090:	b147      	cbz	r7, 180a4 <qspi_send_cmd+0x32>
		if (rx_len != tx_len) {
   18092:	42bb      	cmp	r3, r7
   18094:	d148      	bne.n	18128 <qspi_send_cmd+0xb6>
		xfer_len += tx_len;
   18096:	1c7b      	adds	r3, r7, #1
   18098:	e006      	b.n	180a8 <qspi_send_cmd+0x36>
	const void *tx_buf = NULL;
   1809a:	461c      	mov	r4, r3
	size_t tx_len = 0;
   1809c:	2700      	movs	r7, #0
   1809e:	e7f2      	b.n	18086 <qspi_send_cmd+0x14>
	void *rx_buf = NULL;
   180a0:	460e      	mov	r6, r1
	size_t rx_len = 0;
   180a2:	2300      	movs	r3, #0
		xfer_len += tx_len + rx_len;
   180a4:	443b      	add	r3, r7
   180a6:	3301      	adds	r3, #1
	if (xfer_len > NRF_QSPI_CINSTR_LEN_9B) {
   180a8:	2b09      	cmp	r3, #9
   180aa:	d840      	bhi.n	1812e <qspi_send_cmd+0xbc>
		.opcode = cmd->op_code,
   180ac:	7801      	ldrb	r1, [r0, #0]
	nrf_qspi_cinstr_conf_t cinstr_cfg = {
   180ae:	f88d 1000 	strb.w	r1, [sp]
   180b2:	f88d 3001 	strb.w	r3, [sp, #1]
   180b6:	2301      	movs	r3, #1
   180b8:	f88d 3002 	strb.w	r3, [sp, #2]
   180bc:	f88d 3003 	strb.w	r3, [sp, #3]
   180c0:	2300      	movs	r3, #0
   180c2:	f88d 3004 	strb.w	r3, [sp, #4]
   180c6:	f88d 2005 	strb.w	r2, [sp, #5]
	struct qspi_nor_data *dev_data = dev->data;
   180ca:	6928      	ldr	r0, [r5, #16]
	k_sem_take(&dev_data->sem, K_FOREVER);
   180cc:	3010      	adds	r0, #16
	return z_impl_k_sem_take(sem, timeout);
   180ce:	f04f 32ff 	mov.w	r2, #4294967295
   180d2:	f04f 33ff 	mov.w	r3, #4294967295
   180d6:	f7fd fbd5 	bl	15884 <z_impl_k_sem_take>
	int res = nrfx_qspi_cinstr_xfer(&cinstr_cfg, tx_buf, rx_buf);
   180da:	4632      	mov	r2, r6
   180dc:	4621      	mov	r1, r4
   180de:	4668      	mov	r0, sp
   180e0:	f7fc fefe 	bl	14ee0 <nrfx_qspi_cinstr_xfer>
   180e4:	4604      	mov	r4, r0
	struct qspi_nor_data *dev_data = dev->data;
   180e6:	6928      	ldr	r0, [r5, #16]
	k_sem_give(&dev_data->sem);
   180e8:	3010      	adds	r0, #16
	z_impl_k_sem_give(sem);
   180ea:	f7fd fba7 	bl	1583c <z_impl_k_sem_give>
	switch (res) {
   180ee:	f104 4074 	add.w	r0, r4, #4093640704	; 0xf4000000
   180f2:	f500 00a6 	add.w	r0, r0, #5439488	; 0x530000
   180f6:	280a      	cmp	r0, #10
   180f8:	d80c      	bhi.n	18114 <qspi_send_cmd+0xa2>
   180fa:	e8df f000 	tbb	[pc, r0]
   180fe:	0b06      	.short	0x0b06
   18100:	080e0b0b 	.word	0x080e0b0b
   18104:	0b0b0b0b 	.word	0x0b0b0b0b
   18108:	0e          	.byte	0x0e
   18109:	00          	.byte	0x00
   1810a:	2000      	movs	r0, #0
   1810c:	e007      	b.n	1811e <qspi_send_cmd+0xac>
		return -ECANCELED;
   1810e:	f06f 008b 	mvn.w	r0, #139	; 0x8b
   18112:	e004      	b.n	1811e <qspi_send_cmd+0xac>
		return -EBUSY;
   18114:	f06f 000f 	mvn.w	r0, #15
   18118:	e001      	b.n	1811e <qspi_send_cmd+0xac>
		return -EINVAL;
   1811a:	f06f 0015 	mvn.w	r0, #21
}
   1811e:	b003      	add	sp, #12
   18120:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -EINVAL;
   18122:	f06f 0015 	mvn.w	r0, #21
}
   18126:	4770      	bx	lr
			return -EINVAL;
   18128:	f06f 0015 	mvn.w	r0, #21
   1812c:	e7f7      	b.n	1811e <qspi_send_cmd+0xac>
		return -EINVAL;
   1812e:	f06f 0015 	mvn.w	r0, #21
   18132:	e7f4      	b.n	1811e <qspi_send_cmd+0xac>

00018134 <qspi_nor_write_protection_set>:
{
   18134:	b500      	push	{lr}
   18136:	b085      	sub	sp, #20
	struct qspi_cmd cmd = {
   18138:	2300      	movs	r3, #0
   1813a:	9301      	str	r3, [sp, #4]
   1813c:	9302      	str	r3, [sp, #8]
   1813e:	9303      	str	r3, [sp, #12]
   18140:	b151      	cbz	r1, 18158 <qspi_nor_write_protection_set+0x24>
   18142:	2304      	movs	r3, #4
   18144:	f88d 3004 	strb.w	r3, [sp, #4]
	if (qspi_send_cmd(dev, &cmd, false) != 0) {
   18148:	2200      	movs	r2, #0
   1814a:	a901      	add	r1, sp, #4
   1814c:	f7ff ff91 	bl	18072 <qspi_send_cmd>
   18150:	b920      	cbnz	r0, 1815c <qspi_nor_write_protection_set+0x28>
}
   18152:	b005      	add	sp, #20
   18154:	f85d fb04 	ldr.w	pc, [sp], #4
	struct qspi_cmd cmd = {
   18158:	2306      	movs	r3, #6
   1815a:	e7f3      	b.n	18144 <qspi_nor_write_protection_set+0x10>
		ret = -EIO;
   1815c:	f06f 0004 	mvn.w	r0, #4
	return ret;
   18160:	e7f7      	b.n	18152 <qspi_nor_write_protection_set+0x1e>

00018162 <qspi_rdsr>:
	if (sr_num > 2 || sr_num == 0) {
   18162:	1e4b      	subs	r3, r1, #1
   18164:	b2db      	uxtb	r3, r3
   18166:	2b01      	cmp	r3, #1
   18168:	d820      	bhi.n	181ac <qspi_rdsr+0x4a>
{
   1816a:	b500      	push	{lr}
   1816c:	b087      	sub	sp, #28
	if (sr_num == 2) {
   1816e:	2902      	cmp	r1, #2
   18170:	d01a      	beq.n	181a8 <qspi_rdsr+0x46>
	uint8_t opcode = SPI_NOR_CMD_RDSR;
   18172:	2105      	movs	r1, #5
	uint8_t sr = 0xFF;
   18174:	23ff      	movs	r3, #255	; 0xff
   18176:	f88d 3017 	strb.w	r3, [sp, #23]
	const struct qspi_buf sr_buf = {
   1817a:	f10d 0317 	add.w	r3, sp, #23
   1817e:	9303      	str	r3, [sp, #12]
   18180:	2301      	movs	r3, #1
   18182:	9304      	str	r3, [sp, #16]
	struct qspi_cmd cmd = {
   18184:	2200      	movs	r2, #0
   18186:	9200      	str	r2, [sp, #0]
   18188:	9201      	str	r2, [sp, #4]
   1818a:	9202      	str	r2, [sp, #8]
   1818c:	f88d 1000 	strb.w	r1, [sp]
   18190:	ab03      	add	r3, sp, #12
   18192:	9302      	str	r3, [sp, #8]
	int ret = qspi_send_cmd(dev, &cmd, false);
   18194:	4669      	mov	r1, sp
   18196:	f7ff ff6c 	bl	18072 <qspi_send_cmd>
	return (ret < 0) ? ret : sr;
   1819a:	2800      	cmp	r0, #0
   1819c:	db01      	blt.n	181a2 <qspi_rdsr+0x40>
   1819e:	f89d 0017 	ldrb.w	r0, [sp, #23]
}
   181a2:	b007      	add	sp, #28
   181a4:	f85d fb04 	ldr.w	pc, [sp], #4
		opcode = SPI_NOR_CMD_RDSR2;
   181a8:	2135      	movs	r1, #53	; 0x35
   181aa:	e7e3      	b.n	18174 <qspi_rdsr+0x12>
		return -EINVAL;
   181ac:	f06f 0015 	mvn.w	r0, #21
}
   181b0:	4770      	bx	lr

000181b2 <qspi_wait_while_writing>:
{
   181b2:	b510      	push	{r4, lr}
   181b4:	4604      	mov	r4, r0
		ret = qspi_rdsr(dev, 1);
   181b6:	2101      	movs	r1, #1
   181b8:	4620      	mov	r0, r4
   181ba:	f7ff ffd2 	bl	18162 <qspi_rdsr>
		 && ((ret & SPI_NOR_WIP_BIT) != 0U));
   181be:	2800      	cmp	r0, #0
   181c0:	db02      	blt.n	181c8 <qspi_wait_while_writing+0x16>
   181c2:	f010 0f01 	tst.w	r0, #1
   181c6:	d1f6      	bne.n	181b6 <qspi_wait_while_writing+0x4>
}
   181c8:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   181cc:	bd10      	pop	{r4, pc}

000181ce <qspi_wrsr>:
{
   181ce:	b510      	push	{r4, lr}
   181d0:	b086      	sub	sp, #24
	uint8_t sr_array[2] = {0};
   181d2:	2300      	movs	r3, #0
   181d4:	f8ad 3014 	strh.w	r3, [sp, #20]
	if (sr_num > 2 || sr_num == 0) {
   181d8:	1e53      	subs	r3, r2, #1
   181da:	b2db      	uxtb	r3, r3
   181dc:	2b01      	cmp	r3, #1
   181de:	d819      	bhi.n	18214 <qspi_wrsr+0x46>
   181e0:	4604      	mov	r4, r0
	if (sr_num == 1) {
   181e2:	2a01      	cmp	r2, #1
   181e4:	d119      	bne.n	1821a <qspi_wrsr+0x4c>
		sr_array[0] = sr_val;
   181e6:	f88d 1014 	strb.w	r1, [sp, #20]
	const struct qspi_buf sr_buf = {
   181ea:	ab05      	add	r3, sp, #20
   181ec:	9303      	str	r3, [sp, #12]
   181ee:	9204      	str	r2, [sp, #16]
	struct qspi_cmd cmd = {
   181f0:	2300      	movs	r3, #0
   181f2:	9300      	str	r3, [sp, #0]
   181f4:	9301      	str	r3, [sp, #4]
   181f6:	9302      	str	r3, [sp, #8]
   181f8:	f88d 2000 	strb.w	r2, [sp]
   181fc:	ab03      	add	r3, sp, #12
   181fe:	9301      	str	r3, [sp, #4]
	ret = qspi_send_cmd(dev, &cmd, true);
   18200:	4669      	mov	r1, sp
   18202:	f7ff ff36 	bl	18072 <qspi_send_cmd>
	if (ret == 0) {
   18206:	b108      	cbz	r0, 1820c <qspi_wrsr+0x3e>
}
   18208:	b006      	add	sp, #24
   1820a:	bd10      	pop	{r4, pc}
		ret = qspi_wait_while_writing(dev);
   1820c:	4620      	mov	r0, r4
   1820e:	f7ff ffd0 	bl	181b2 <qspi_wait_while_writing>
   18212:	e7f9      	b.n	18208 <qspi_wrsr+0x3a>
		return -EINVAL;
   18214:	f06f 0015 	mvn.w	r0, #21
   18218:	e7f6      	b.n	18208 <qspi_wrsr+0x3a>
		return -EINVAL;
   1821a:	f06f 0015 	mvn.w	r0, #21
   1821e:	e7f3      	b.n	18208 <qspi_wrsr+0x3a>

00018220 <qspi_read_jedec_id>:
{
   18220:	b530      	push	{r4, r5, lr}
   18222:	b087      	sub	sp, #28
   18224:	4604      	mov	r4, r0
	const struct qspi_buf rx_buf = {
   18226:	9104      	str	r1, [sp, #16]
   18228:	2303      	movs	r3, #3
   1822a:	9305      	str	r3, [sp, #20]
	const struct qspi_cmd cmd = {
   1822c:	2300      	movs	r3, #0
   1822e:	9301      	str	r3, [sp, #4]
   18230:	9302      	str	r3, [sp, #8]
   18232:	9303      	str	r3, [sp, #12]
   18234:	239f      	movs	r3, #159	; 0x9f
   18236:	f88d 3004 	strb.w	r3, [sp, #4]
   1823a:	ab04      	add	r3, sp, #16
   1823c:	9303      	str	r3, [sp, #12]
	int ret = qspi_device_init(dev);
   1823e:	f7fa facf 	bl	127e0 <qspi_device_init>
	if (ret == 0) {
   18242:	4605      	mov	r5, r0
   18244:	b128      	cbz	r0, 18252 <qspi_read_jedec_id+0x32>
	qspi_device_uninit(dev);
   18246:	4620      	mov	r0, r4
   18248:	f7fa fb0a 	bl	12860 <qspi_device_uninit>
}
   1824c:	4628      	mov	r0, r5
   1824e:	b007      	add	sp, #28
   18250:	bd30      	pop	{r4, r5, pc}
		ret = qspi_send_cmd(dev, &cmd, false);
   18252:	2200      	movs	r2, #0
   18254:	a901      	add	r1, sp, #4
   18256:	4620      	mov	r0, r4
   18258:	f7ff ff0b 	bl	18072 <qspi_send_cmd>
   1825c:	4605      	mov	r5, r0
   1825e:	e7f2      	b.n	18246 <qspi_read_jedec_id+0x26>

00018260 <qspi_nor_configure>:
{
   18260:	b510      	push	{r4, lr}
   18262:	b082      	sub	sp, #8
   18264:	4604      	mov	r4, r0
	int ret = qspi_nrfx_configure(dev);
   18266:	f7fa fb27 	bl	128b8 <qspi_nrfx_configure>
	if (ret != 0) {
   1826a:	b108      	cbz	r0, 18270 <qspi_nor_configure+0x10>
}
   1826c:	b002      	add	sp, #8
   1826e:	bd10      	pop	{r4, pc}
	qspi_device_uninit(dev);
   18270:	4620      	mov	r0, r4
   18272:	f7fa faf5 	bl	12860 <qspi_device_uninit>
	int ret = qspi_read_jedec_id(dev, id);
   18276:	a901      	add	r1, sp, #4
   18278:	4620      	mov	r0, r4
   1827a:	f7ff ffd1 	bl	18220 <qspi_read_jedec_id>
	if (ret != 0) {
   1827e:	b958      	cbnz	r0, 18298 <qspi_nor_configure+0x38>
	const struct qspi_nor_config *qnc = dev->config;
   18280:	6860      	ldr	r0, [r4, #4]
	if (memcmp(qnc->id, id, SPI_NOR_MAX_ID_LEN) != 0) {
   18282:	2203      	movs	r2, #3
   18284:	a901      	add	r1, sp, #4
   18286:	301c      	adds	r0, #28
   18288:	f7ff fc86 	bl	17b98 <memcmp>
   1828c:	b938      	cbnz	r0, 1829e <qspi_nor_configure+0x3e>
	if (qspi_nor_read_id(dev) != 0) {
   1828e:	2800      	cmp	r0, #0
   18290:	d0ec      	beq.n	1826c <qspi_nor_configure+0xc>
		return -ENODEV;
   18292:	f06f 0012 	mvn.w	r0, #18
   18296:	e7e9      	b.n	1826c <qspi_nor_configure+0xc>
		return -EIO;
   18298:	f06f 0004 	mvn.w	r0, #4
   1829c:	e7f7      	b.n	1828e <qspi_nor_configure+0x2e>
		return -ENODEV;
   1829e:	f06f 0012 	mvn.w	r0, #18
   182a2:	e7f4      	b.n	1828e <qspi_nor_configure+0x2e>

000182a4 <qspi_nor_init>:
{
   182a4:	b530      	push	{r4, r5, lr}
   182a6:	b083      	sub	sp, #12
   182a8:	4604      	mov	r4, r0
	const struct qspi_nor_config *dev_config = dev->config;
   182aa:	6843      	ldr	r3, [r0, #4]
	int ret = pinctrl_apply_state(dev_config->pcfg, PINCTRL_STATE_DEFAULT);
   182ac:	6a1d      	ldr	r5, [r3, #32]
				      uint8_t id)
{
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
   182ae:	aa01      	add	r2, sp, #4
   182b0:	2100      	movs	r1, #0
   182b2:	4628      	mov	r0, r5
   182b4:	f000 fb27 	bl	18906 <pinctrl_lookup_state>
	if (ret < 0) {
   182b8:	2800      	cmp	r0, #0
   182ba:	db05      	blt.n	182c8 <qspi_nor_init+0x24>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
   182bc:	9b01      	ldr	r3, [sp, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
   182be:	682a      	ldr	r2, [r5, #0]
   182c0:	7919      	ldrb	r1, [r3, #4]
   182c2:	6818      	ldr	r0, [r3, #0]
   182c4:	f7fb fa58 	bl	13778 <pinctrl_configure_pins>
	if (ret < 0) {
   182c8:	2800      	cmp	r0, #0
   182ca:	db07      	blt.n	182dc <qspi_nor_init+0x38>
	IRQ_CONNECT(DT_IRQN(QSPI_NODE), DT_IRQ(QSPI_NODE, priority),
   182cc:	2200      	movs	r2, #0
   182ce:	2101      	movs	r1, #1
   182d0:	2029      	movs	r0, #41	; 0x29
   182d2:	f7f9 fbbd 	bl	11a50 <z_arm_irq_priority_set>
	return qspi_nor_configure(dev);
   182d6:	4620      	mov	r0, r4
   182d8:	f7ff ffc2 	bl	18260 <qspi_nor_configure>
}
   182dc:	b003      	add	sp, #12
   182de:	bd30      	pop	{r4, r5, pc}

000182e0 <qspi_nor_erase>:
{
   182e0:	b510      	push	{r4, lr}
	const struct qspi_nor_config *params = dev->config;
   182e2:	6844      	ldr	r4, [r0, #4]
	if (addr < 0 ||
   182e4:	2900      	cmp	r1, #0
   182e6:	db06      	blt.n	182f6 <qspi_nor_erase+0x16>
	    (addr + size) > params->size) {
   182e8:	188b      	adds	r3, r1, r2
   182ea:	69a4      	ldr	r4, [r4, #24]
	if (addr < 0 ||
   182ec:	42a3      	cmp	r3, r4
   182ee:	d805      	bhi.n	182fc <qspi_nor_erase+0x1c>
	int ret = qspi_erase(dev, addr, size);
   182f0:	f7fa fb2c 	bl	1294c <qspi_erase>
}
   182f4:	bd10      	pop	{r4, pc}
		return -EINVAL;
   182f6:	f06f 0015 	mvn.w	r0, #21
   182fa:	e7fb      	b.n	182f4 <qspi_nor_erase+0x14>
   182fc:	f06f 0015 	mvn.w	r0, #21
   18300:	e7f8      	b.n	182f4 <qspi_nor_erase+0x14>

00018302 <nrf52_errata_242>:
    #else
        #if defined (NRF52805_XXAA) || defined (DEVELOP_IN_NRF52805)\
         || defined (NRF52810_XXAA) || defined (DEVELOP_IN_NRF52810)\
         || defined (NRF52811_XXAA) || defined (DEVELOP_IN_NRF52811)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   18302:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   18306:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
   1830a:	2b08      	cmp	r3, #8
   1830c:	d001      	beq.n	18312 <nrf52_errata_242+0x10>
                    default:
                        return true;
                }
            }
        #endif
        return false;
   1830e:	2000      	movs	r0, #0
   18310:	4770      	bx	lr
                        return true;
   18312:	2001      	movs	r0, #1
    #endif
}
   18314:	4770      	bx	lr

00018316 <shift_write_context>:
	w_ctx->flash_addr += shift;
   18316:	684b      	ldr	r3, [r1, #4]
   18318:	4403      	add	r3, r0
   1831a:	604b      	str	r3, [r1, #4]
	w_ctx->data_addr += shift;
   1831c:	680b      	ldr	r3, [r1, #0]
   1831e:	4403      	add	r3, r0
   18320:	600b      	str	r3, [r1, #0]
	w_ctx->len -= shift;
   18322:	688b      	ldr	r3, [r1, #8]
   18324:	1a18      	subs	r0, r3, r0
   18326:	6088      	str	r0, [r1, #8]
}
   18328:	4770      	bx	lr

0001832a <erase_op>:
{
   1832a:	b570      	push	{r4, r5, r6, lr}
   1832c:	4604      	mov	r4, r0
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   1832e:	f000 fde5 	bl	18efc <nrfx_nvmc_flash_page_size_get>
   18332:	4605      	mov	r5, r0
		if (SUSPEND_POFWARN()) {
   18334:	f7fa fdda 	bl	12eec <suspend_pofwarn>
   18338:	4606      	mov	r6, r0
   1833a:	b970      	cbnz	r0, 1835a <erase_op+0x30>
		(void)nrfx_nvmc_page_erase(e_ctx->flash_addr);
   1833c:	6860      	ldr	r0, [r4, #4]
   1833e:	f7fc fb31 	bl	149a4 <nrfx_nvmc_page_erase>
		e_ctx->len -= pg_size;
   18342:	68a3      	ldr	r3, [r4, #8]
   18344:	1b5b      	subs	r3, r3, r5
   18346:	60a3      	str	r3, [r4, #8]
		e_ctx->flash_addr += pg_size;
   18348:	6863      	ldr	r3, [r4, #4]
   1834a:	442b      	add	r3, r5
   1834c:	6063      	str	r3, [r4, #4]
		RESUME_POFWARN();
   1834e:	f7fa fe01 	bl	12f54 <restore_pofwarn>
	} while (e_ctx->len > 0);
   18352:	68a3      	ldr	r3, [r4, #8]
   18354:	2b00      	cmp	r3, #0
   18356:	d1ed      	bne.n	18334 <erase_op+0xa>
   18358:	e001      	b.n	1835e <erase_op+0x34>
			return -ECANCELED;
   1835a:	f06f 068b 	mvn.w	r6, #139	; 0x8b
}
   1835e:	4630      	mov	r0, r6
   18360:	bd70      	pop	{r4, r5, r6, pc}

00018362 <erase>:
{
   18362:	b500      	push	{lr}
   18364:	b085      	sub	sp, #20
	struct flash_context context = {
   18366:	2300      	movs	r3, #0
   18368:	9301      	str	r3, [sp, #4]
   1836a:	9302      	str	r3, [sp, #8]
   1836c:	9303      	str	r3, [sp, #12]
   1836e:	9002      	str	r0, [sp, #8]
   18370:	9103      	str	r1, [sp, #12]
	return	erase_op(&context);
   18372:	a801      	add	r0, sp, #4
   18374:	f7ff ffd9 	bl	1832a <erase_op>
}
   18378:	b005      	add	sp, #20
   1837a:	f85d fb04 	ldr.w	pc, [sp], #4

0001837e <write_op>:
{
   1837e:	b538      	push	{r3, r4, r5, lr}
   18380:	4604      	mov	r4, r0
	if (!is_aligned_32(w_ctx->flash_addr)) {
   18382:	6843      	ldr	r3, [r0, #4]
   18384:	f013 0303 	ands.w	r3, r3, #3
   18388:	d013      	beq.n	183b2 <write_op+0x34>
		uint32_t count = sizeof(uint32_t) - (w_ctx->flash_addr & 0x3);
   1838a:	f1c3 0304 	rsb	r3, r3, #4
		if (count > w_ctx->len) {
   1838e:	6885      	ldr	r5, [r0, #8]
   18390:	429d      	cmp	r5, r3
   18392:	d300      	bcc.n	18396 <write_op+0x18>
		uint32_t count = sizeof(uint32_t) - (w_ctx->flash_addr & 0x3);
   18394:	461d      	mov	r5, r3
		if (SUSPEND_POFWARN()) {
   18396:	f7fa fda9 	bl	12eec <suspend_pofwarn>
   1839a:	bb78      	cbnz	r0, 183fc <write_op+0x7e>
		nrfx_nvmc_bytes_write(w_ctx->flash_addr,
   1839c:	462a      	mov	r2, r5
   1839e:	6821      	ldr	r1, [r4, #0]
   183a0:	6860      	ldr	r0, [r4, #4]
   183a2:	f000 fd72 	bl	18e8a <nrfx_nvmc_bytes_write>
		RESUME_POFWARN();
   183a6:	f7fa fdd5 	bl	12f54 <restore_pofwarn>
		shift_write_context(count, w_ctx);
   183aa:	4621      	mov	r1, r4
   183ac:	4628      	mov	r0, r5
   183ae:	f7ff ffb2 	bl	18316 <shift_write_context>
	while (w_ctx->len >= sizeof(uint32_t)) {
   183b2:	68a3      	ldr	r3, [r4, #8]
   183b4:	2b03      	cmp	r3, #3
   183b6:	d90e      	bls.n	183d6 <write_op+0x58>
		if (SUSPEND_POFWARN()) {
   183b8:	f7fa fd98 	bl	12eec <suspend_pofwarn>
   183bc:	bb08      	cbnz	r0, 18402 <write_op+0x84>
				     UNALIGNED_GET((uint32_t *)w_ctx->data_addr));
   183be:	6823      	ldr	r3, [r4, #0]
		nrfx_nvmc_word_write(w_ctx->flash_addr,
   183c0:	6819      	ldr	r1, [r3, #0]
   183c2:	6860      	ldr	r0, [r4, #4]
   183c4:	f000 fd55 	bl	18e72 <nrfx_nvmc_word_write>
		RESUME_POFWARN();
   183c8:	f7fa fdc4 	bl	12f54 <restore_pofwarn>
		shift_write_context(sizeof(uint32_t), w_ctx);
   183cc:	4621      	mov	r1, r4
   183ce:	2004      	movs	r0, #4
   183d0:	f7ff ffa1 	bl	18316 <shift_write_context>
   183d4:	e7ed      	b.n	183b2 <write_op+0x34>
	if (w_ctx->len) {
   183d6:	b16b      	cbz	r3, 183f4 <write_op+0x76>
		if (SUSPEND_POFWARN()) {
   183d8:	f7fa fd88 	bl	12eec <suspend_pofwarn>
   183dc:	b9a0      	cbnz	r0, 18408 <write_op+0x8a>
		nrfx_nvmc_bytes_write(w_ctx->flash_addr,
   183de:	68a2      	ldr	r2, [r4, #8]
   183e0:	6821      	ldr	r1, [r4, #0]
   183e2:	6860      	ldr	r0, [r4, #4]
   183e4:	f000 fd51 	bl	18e8a <nrfx_nvmc_bytes_write>
		RESUME_POFWARN();
   183e8:	f7fa fdb4 	bl	12f54 <restore_pofwarn>
		shift_write_context(w_ctx->len, w_ctx);
   183ec:	4621      	mov	r1, r4
   183ee:	68a0      	ldr	r0, [r4, #8]
   183f0:	f7ff ff91 	bl	18316 <shift_write_context>
	nvmc_wait_ready();
   183f4:	f7fa fd64 	bl	12ec0 <nvmc_wait_ready>
	return FLASH_OP_DONE;
   183f8:	2000      	movs	r0, #0
}
   183fa:	bd38      	pop	{r3, r4, r5, pc}
			return -ECANCELED;
   183fc:	f06f 008b 	mvn.w	r0, #139	; 0x8b
   18400:	e7fb      	b.n	183fa <write_op+0x7c>
			return -ECANCELED;
   18402:	f06f 008b 	mvn.w	r0, #139	; 0x8b
   18406:	e7f8      	b.n	183fa <write_op+0x7c>
			return -ECANCELED;
   18408:	f06f 008b 	mvn.w	r0, #139	; 0x8b
   1840c:	e7f5      	b.n	183fa <write_op+0x7c>

0001840e <write>:
{
   1840e:	b500      	push	{lr}
   18410:	b085      	sub	sp, #20
	struct flash_context context = {
   18412:	9101      	str	r1, [sp, #4]
   18414:	9002      	str	r0, [sp, #8]
   18416:	9203      	str	r2, [sp, #12]
	return write_op(&context);
   18418:	a801      	add	r0, sp, #4
   1841a:	f7ff ffb0 	bl	1837e <write_op>
}
   1841e:	b005      	add	sp, #20
   18420:	f85d fb04 	ldr.w	pc, [sp], #4

00018424 <flash_nrf_read>:
{
   18424:	b570      	push	{r4, r5, r6, lr}
   18426:	460c      	mov	r4, r1
   18428:	4616      	mov	r6, r2
   1842a:	461d      	mov	r5, r3
	return is_within_bounds(addr, len, 0, nrfx_nvmc_flash_size_get());
   1842c:	f000 fd62 	bl	18ef4 <nrfx_nvmc_flash_size_get>
			(addr < (boundary_start + boundary_size)) &&
   18430:	2c00      	cmp	r4, #0
   18432:	db06      	blt.n	18442 <flash_nrf_read+0x1e>
	return (addr >= boundary_start &&
   18434:	42a0      	cmp	r0, r4
   18436:	d909      	bls.n	1844c <flash_nrf_read+0x28>
			(len <= (boundary_start + boundary_size - addr)));
   18438:	1b00      	subs	r0, r0, r4
			(addr < (boundary_start + boundary_size)) &&
   1843a:	4285      	cmp	r5, r0
   1843c:	d908      	bls.n	18450 <flash_nrf_read+0x2c>
   1843e:	2300      	movs	r3, #0
   18440:	e000      	b.n	18444 <flash_nrf_read+0x20>
   18442:	2300      	movs	r3, #0
	if (is_regular_addr_valid(addr, len)) {
   18444:	b16b      	cbz	r3, 18462 <flash_nrf_read+0x3e>
	if (!len) {
   18446:	b92d      	cbnz	r5, 18454 <flash_nrf_read+0x30>
		return 0;
   18448:	2000      	movs	r0, #0
}
   1844a:	bd70      	pop	{r4, r5, r6, pc}
			(addr < (boundary_start + boundary_size)) &&
   1844c:	2300      	movs	r3, #0
   1844e:	e7f9      	b.n	18444 <flash_nrf_read+0x20>
   18450:	2301      	movs	r3, #1
   18452:	e7f7      	b.n	18444 <flash_nrf_read+0x20>
	memcpy(data, (void *)addr, len);
   18454:	462a      	mov	r2, r5
   18456:	4621      	mov	r1, r4
   18458:	4630      	mov	r0, r6
   1845a:	f7ff fbc2 	bl	17be2 <memcpy>
	return 0;
   1845e:	2000      	movs	r0, #0
   18460:	e7f3      	b.n	1844a <flash_nrf_read+0x26>
		return -EINVAL;
   18462:	f06f 0015 	mvn.w	r0, #21
   18466:	e7f0      	b.n	1844a <flash_nrf_read+0x26>

00018468 <flash_get_page_info>:

#include <zephyr/drivers/flash.h>

static int flash_get_page_info(const struct device *dev, off_t offs,
			       uint32_t index, struct flash_pages_info *info)
{
   18468:	b570      	push	{r4, r5, r6, lr}
   1846a:	b082      	sub	sp, #8
   1846c:	460d      	mov	r5, r1
   1846e:	4616      	mov	r6, r2
   18470:	461c      	mov	r4, r3
	const struct flash_driver_api *api = dev->api;
   18472:	6882      	ldr	r2, [r0, #8]
	const struct flash_pages_layout *layout;
	size_t layout_size;
	uint32_t index_jmp;

	info->start_offset = 0;
   18474:	2300      	movs	r3, #0
   18476:	6023      	str	r3, [r4, #0]
	info->index = 0U;
   18478:	60a3      	str	r3, [r4, #8]

	api->page_layout(dev, &layout, &layout_size);
   1847a:	6913      	ldr	r3, [r2, #16]
   1847c:	466a      	mov	r2, sp
   1847e:	a901      	add	r1, sp, #4
   18480:	4798      	blx	r3

	while (layout_size--) {
   18482:	e014      	b.n	184ae <flash_get_page_info+0x46>
		info->size = layout->pages_size;
		if (offs == 0) {
			index_jmp = index - info->index;
		} else {
			index_jmp = (offs - info->start_offset) / info->size;
   18484:	6823      	ldr	r3, [r4, #0]
   18486:	1aeb      	subs	r3, r5, r3
   18488:	fbb3 f0f1 	udiv	r0, r3, r1
		}

		index_jmp = MIN(index_jmp, layout->pages_count);
   1848c:	6813      	ldr	r3, [r2, #0]
   1848e:	4283      	cmp	r3, r0
   18490:	bf28      	it	cs
   18492:	4603      	movcs	r3, r0
		info->start_offset += (index_jmp * info->size);
   18494:	6822      	ldr	r2, [r4, #0]
   18496:	fb03 2201 	mla	r2, r3, r1, r2
   1849a:	6022      	str	r2, [r4, #0]
		info->index += index_jmp;
   1849c:	68a2      	ldr	r2, [r4, #8]
   1849e:	441a      	add	r2, r3
   184a0:	60a2      	str	r2, [r4, #8]
		if (index_jmp < layout->pages_count) {
   184a2:	9a01      	ldr	r2, [sp, #4]
   184a4:	6811      	ldr	r1, [r2, #0]
   184a6:	4299      	cmp	r1, r3
   184a8:	d811      	bhi.n	184ce <flash_get_page_info+0x66>
			return 0;
		}

		layout++;
   184aa:	3208      	adds	r2, #8
   184ac:	9201      	str	r2, [sp, #4]
	while (layout_size--) {
   184ae:	9b00      	ldr	r3, [sp, #0]
   184b0:	1e5a      	subs	r2, r3, #1
   184b2:	9200      	str	r2, [sp, #0]
   184b4:	b13b      	cbz	r3, 184c6 <flash_get_page_info+0x5e>
		info->size = layout->pages_size;
   184b6:	9a01      	ldr	r2, [sp, #4]
   184b8:	6851      	ldr	r1, [r2, #4]
   184ba:	6061      	str	r1, [r4, #4]
		if (offs == 0) {
   184bc:	2d00      	cmp	r5, #0
   184be:	d1e1      	bne.n	18484 <flash_get_page_info+0x1c>
			index_jmp = index - info->index;
   184c0:	68a3      	ldr	r3, [r4, #8]
   184c2:	1af0      	subs	r0, r6, r3
   184c4:	e7e2      	b.n	1848c <flash_get_page_info+0x24>
	}

	return -EINVAL; /* page at offs or idx doesn't exist */
   184c6:	f06f 0015 	mvn.w	r0, #21
}
   184ca:	b002      	add	sp, #8
   184cc:	bd70      	pop	{r4, r5, r6, pc}
			return 0;
   184ce:	2000      	movs	r0, #0
   184d0:	e7fb      	b.n	184ca <flash_get_page_info+0x62>

000184d2 <z_impl_flash_get_page_info_by_offs>:

int z_impl_flash_get_page_info_by_offs(const struct device *dev, off_t offs,
				       struct flash_pages_info *info)
{
   184d2:	b508      	push	{r3, lr}
   184d4:	4613      	mov	r3, r2
	return flash_get_page_info(dev, offs, 0U, info);
   184d6:	2200      	movs	r2, #0
   184d8:	f7ff ffc6 	bl	18468 <flash_get_page_info>
}
   184dc:	bd08      	pop	{r3, pc}

000184de <endtx_isr>:
	const struct uarte_nrfx_config *config = dev->config;
   184de:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   184e0:	681b      	ldr	r3, [r3, #0]
	__asm__ volatile(
   184e2:	f04f 0120 	mov.w	r1, #32
   184e6:	f3ef 8211 	mrs	r2, BASEPRI
   184ea:	f381 8812 	msr	BASEPRI_MAX, r1
   184ee:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   184f2:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
   184f6:	b131      	cbz	r1, 18506 <endtx_isr+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   184f8:	2100      	movs	r1, #0
   184fa:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120
   184fe:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   18502:	2101      	movs	r1, #1
   18504:	60d9      	str	r1, [r3, #12]
	__asm__ volatile(
   18506:	f382 8811 	msr	BASEPRI, r2
   1850a:	f3bf 8f6f 	isb	sy
}
   1850e:	4770      	bx	lr

00018510 <uarte_nrfx_isr_int>:
{
   18510:	b538      	push	{r3, r4, r5, lr}
	const struct uarte_nrfx_config *config = dev->config;
   18512:	6845      	ldr	r5, [r0, #4]
	return config->uarte_regs;
   18514:	682c      	ldr	r4, [r5, #0]
    return p_reg->INTENSET & mask;
   18516:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
   1851a:	f413 7f80 	tst.w	r3, #256	; 0x100
   1851e:	d002      	beq.n	18526 <uarte_nrfx_isr_int+0x16>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   18520:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
   18524:	b9d3      	cbnz	r3, 1855c <uarte_nrfx_isr_int+0x4c>
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
   18526:	686b      	ldr	r3, [r5, #4]
   18528:	f013 0f10 	tst.w	r3, #16
   1852c:	d015      	beq.n	1855a <uarte_nrfx_isr_int+0x4a>
	__asm__ volatile(
   1852e:	f04f 0220 	mov.w	r2, #32
   18532:	f3ef 8311 	mrs	r3, BASEPRI
   18536:	f382 8812 	msr	BASEPRI_MAX, r2
   1853a:	f3bf 8f6f 	isb	sy
   1853e:	f8d4 2158 	ldr.w	r2, [r4, #344]	; 0x158
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
   18542:	b112      	cbz	r2, 1854a <uarte_nrfx_isr_int+0x3a>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   18544:	2200      	movs	r2, #0
   18546:	f8c4 2500 	str.w	r2, [r4, #1280]	; 0x500
    p_reg->INTENCLR = mask;
   1854a:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
   1854e:	f8c4 2308 	str.w	r2, [r4, #776]	; 0x308
	__asm__ volatile(
   18552:	f383 8811 	msr	BASEPRI, r3
   18556:	f3bf 8f6f 	isb	sy
}
   1855a:	bd38      	pop	{r3, r4, r5, pc}
		endtx_isr(dev);
   1855c:	f7ff ffbf 	bl	184de <endtx_isr>
   18560:	e7e1      	b.n	18526 <uarte_nrfx_isr_int+0x16>

00018562 <uarte_nrfx_configure>:
{
   18562:	b570      	push	{r4, r5, r6, lr}
   18564:	b082      	sub	sp, #8
   18566:	4606      	mov	r6, r0
   18568:	460c      	mov	r4, r1
	struct uarte_nrfx_data *data = dev->data;
   1856a:	6905      	ldr	r5, [r0, #16]
	switch (cfg->stop_bits) {
   1856c:	794b      	ldrb	r3, [r1, #5]
   1856e:	2b01      	cmp	r3, #1
   18570:	d006      	beq.n	18580 <uarte_nrfx_configure+0x1e>
   18572:	2b03      	cmp	r3, #3
   18574:	d011      	beq.n	1859a <uarte_nrfx_configure+0x38>
   18576:	f06f 0385 	mvn.w	r3, #133	; 0x85
}
   1857a:	4618      	mov	r0, r3
   1857c:	b002      	add	sp, #8
   1857e:	bd70      	pop	{r4, r5, r6, pc}
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
   18580:	2300      	movs	r3, #0
   18582:	f88d 3006 	strb.w	r3, [sp, #6]
	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
   18586:	79a3      	ldrb	r3, [r4, #6]
   18588:	2b03      	cmp	r3, #3
   1858a:	d137      	bne.n	185fc <uarte_nrfx_configure+0x9a>
	switch (cfg->flow_ctrl) {
   1858c:	79e3      	ldrb	r3, [r4, #7]
   1858e:	b143      	cbz	r3, 185a2 <uarte_nrfx_configure+0x40>
   18590:	2b01      	cmp	r3, #1
   18592:	d010      	beq.n	185b6 <uarte_nrfx_configure+0x54>
   18594:	f06f 0385 	mvn.w	r3, #133	; 0x85
   18598:	e7ef      	b.n	1857a <uarte_nrfx_configure+0x18>
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
   1859a:	2310      	movs	r3, #16
   1859c:	f88d 3006 	strb.w	r3, [sp, #6]
		break;
   185a0:	e7f1      	b.n	18586 <uarte_nrfx_configure+0x24>
		uarte_cfg.hwfc = NRF_UARTE_HWFC_DISABLED;
   185a2:	2300      	movs	r3, #0
   185a4:	f88d 3004 	strb.w	r3, [sp, #4]
	switch (cfg->parity) {
   185a8:	7923      	ldrb	r3, [r4, #4]
   185aa:	b143      	cbz	r3, 185be <uarte_nrfx_configure+0x5c>
   185ac:	2b02      	cmp	r3, #2
   185ae:	d021      	beq.n	185f4 <uarte_nrfx_configure+0x92>
   185b0:	f06f 0385 	mvn.w	r3, #133	; 0x85
   185b4:	e7e1      	b.n	1857a <uarte_nrfx_configure+0x18>
		uarte_cfg.hwfc = NRF_UARTE_HWFC_ENABLED;
   185b6:	2301      	movs	r3, #1
   185b8:	f88d 3004 	strb.w	r3, [sp, #4]
		break;
   185bc:	e7f4      	b.n	185a8 <uarte_nrfx_configure+0x46>
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
   185be:	2300      	movs	r3, #0
   185c0:	f88d 3005 	strb.w	r3, [sp, #5]
	if (baudrate_set(dev, cfg->baudrate) != 0) {
   185c4:	6821      	ldr	r1, [r4, #0]
   185c6:	4630      	mov	r0, r6
   185c8:	f7fa fd62 	bl	13090 <baudrate_set>
   185cc:	4603      	mov	r3, r0
   185ce:	b9c0      	cbnz	r0, 18602 <uarte_nrfx_configure+0xa0>
	const struct uarte_nrfx_config *config = dev->config;
   185d0:	6872      	ldr	r2, [r6, #4]
	return config->uarte_regs;
   185d2:	6810      	ldr	r0, [r2, #0]
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   185d4:	f89d 1005 	ldrb.w	r1, [sp, #5]
                    | (uint32_t)p_cfg->stop
   185d8:	f89d 6006 	ldrb.w	r6, [sp, #6]
                    | (uint32_t)p_cfg->hwfc;
   185dc:	f89d 2004 	ldrb.w	r2, [sp, #4]
   185e0:	4331      	orrs	r1, r6
   185e2:	430a      	orrs	r2, r1
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   185e4:	f8c0 256c 	str.w	r2, [r0, #1388]	; 0x56c
	data->uart_config = *cfg;
   185e8:	3504      	adds	r5, #4
   185ea:	e894 0003 	ldmia.w	r4, {r0, r1}
   185ee:	e885 0003 	stmia.w	r5, {r0, r1}
	return 0;
   185f2:	e7c2      	b.n	1857a <uarte_nrfx_configure+0x18>
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
   185f4:	230e      	movs	r3, #14
   185f6:	f88d 3005 	strb.w	r3, [sp, #5]
		break;
   185fa:	e7e3      	b.n	185c4 <uarte_nrfx_configure+0x62>
		return -ENOTSUP;
   185fc:	f06f 0385 	mvn.w	r3, #133	; 0x85
   18600:	e7bb      	b.n	1857a <uarte_nrfx_configure+0x18>
		return -ENOTSUP;
   18602:	f06f 0385 	mvn.w	r3, #133	; 0x85
   18606:	e7b8      	b.n	1857a <uarte_nrfx_configure+0x18>

00018608 <uarte_nrfx_config_get>:
{
   18608:	460a      	mov	r2, r1
	struct uarte_nrfx_data *data = dev->data;
   1860a:	6903      	ldr	r3, [r0, #16]
	*cfg = data->uart_config;
   1860c:	3304      	adds	r3, #4
   1860e:	e893 0003 	ldmia.w	r3, {r0, r1}
   18612:	e882 0003 	stmia.w	r2, {r0, r1}
}
   18616:	2000      	movs	r0, #0
   18618:	4770      	bx	lr

0001861a <uarte_nrfx_err_check>:
	const struct uarte_nrfx_config *config = dev->config;
   1861a:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   1861c:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   1861e:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   18622:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
   18626:	4770      	bx	lr

00018628 <is_tx_ready>:
	const struct uarte_nrfx_config *config = dev->config;
   18628:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   1862a:	681a      	ldr	r2, [r3, #0]
	bool ppi_endtx = config->flags & UARTE_CFG_FLAG_PPI_ENDTX;
   1862c:	685b      	ldr	r3, [r3, #4]
   1862e:	f003 0302 	and.w	r3, r3, #2
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   18632:	f8d2 1158 	ldr.w	r1, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   18636:	b929      	cbnz	r1, 18644 <is_tx_ready+0x1c>
   18638:	b933      	cbnz	r3, 18648 <is_tx_ready+0x20>
   1863a:	f8d2 3120 	ldr.w	r3, [r2, #288]	; 0x120
   1863e:	b92b      	cbnz	r3, 1864c <is_tx_ready+0x24>
   18640:	2000      	movs	r0, #0
   18642:	4770      	bx	lr
   18644:	2001      	movs	r0, #1
   18646:	4770      	bx	lr
   18648:	2000      	movs	r0, #0
   1864a:	4770      	bx	lr
   1864c:	2001      	movs	r0, #1
}
   1864e:	4770      	bx	lr

00018650 <uarte_enable>:
	const struct uarte_nrfx_config *config = dev->config;
   18650:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   18652:	681b      	ldr	r3, [r3, #0]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   18654:	2208      	movs	r2, #8
   18656:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
}
   1865a:	4770      	bx	lr

0001865c <tx_start>:
{
   1865c:	b510      	push	{r4, lr}
	const struct uarte_nrfx_config *config = dev->config;
   1865e:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   18660:	681c      	ldr	r4, [r3, #0]

NRF_STATIC_INLINE void nrf_uarte_tx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t  const * p_buffer,
                                               size_t           length)
{
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   18662:	f8c4 1544 	str.w	r1, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   18666:	f8c4 2548 	str.w	r2, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1866a:	2200      	movs	r2, #0
   1866c:	f8c4 2120 	str.w	r2, [r4, #288]	; 0x120
   18670:	f8d4 1120 	ldr.w	r1, [r4, #288]	; 0x120
   18674:	f8c4 2158 	str.w	r2, [r4, #344]	; 0x158
   18678:	f8d4 2158 	ldr.w	r2, [r4, #344]	; 0x158
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
   1867c:	685b      	ldr	r3, [r3, #4]
   1867e:	f013 0f10 	tst.w	r3, #16
   18682:	d102      	bne.n	1868a <tx_start+0x2e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   18684:	2301      	movs	r3, #1
   18686:	60a3      	str	r3, [r4, #8]
}
   18688:	bd10      	pop	{r4, pc}
		uarte_enable(dev, UARTE_LOW_POWER_TX);
   1868a:	2101      	movs	r1, #1
   1868c:	f7ff ffe0 	bl	18650 <uarte_enable>
    p_reg->INTENSET = mask;
   18690:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
   18694:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
}
   18698:	e7f4      	b.n	18684 <tx_start+0x28>

0001869a <uarte_nrfx_poll_in>:
{
   1869a:	b410      	push	{r4}
	const struct uarte_nrfx_data *data = dev->data;
   1869c:	6904      	ldr	r4, [r0, #16]
	const struct uarte_nrfx_config *config = dev->config;
   1869e:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   186a0:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   186a2:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   186a6:	b15a      	cbz	r2, 186c0 <uarte_nrfx_poll_in+0x26>
	*c = *data->rx_data;
   186a8:	6962      	ldr	r2, [r4, #20]
   186aa:	7812      	ldrb	r2, [r2, #0]
   186ac:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   186ae:	2000      	movs	r0, #0
   186b0:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
   186b4:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   186b8:	2201      	movs	r2, #1
   186ba:	601a      	str	r2, [r3, #0]
}
   186bc:	bc10      	pop	{r4}
   186be:	4770      	bx	lr
		return -1;
   186c0:	f04f 30ff 	mov.w	r0, #4294967295
   186c4:	e7fa      	b.n	186bc <uarte_nrfx_poll_in+0x22>

000186c6 <wait_tx_ready>:
{
   186c6:	b570      	push	{r4, r5, r6, lr}
   186c8:	4606      	mov	r6, r0
   186ca:	e014      	b.n	186f6 <wait_tx_ready+0x30>
		if (res) {
   186cc:	b17d      	cbz	r5, 186ee <wait_tx_ready+0x28>
	__asm__ volatile(
   186ce:	f04f 0320 	mov.w	r3, #32
   186d2:	f3ef 8411 	mrs	r4, BASEPRI
   186d6:	f383 8812 	msr	BASEPRI_MAX, r3
   186da:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
   186de:	4630      	mov	r0, r6
   186e0:	f7ff ffa2 	bl	18628 <is_tx_ready>
   186e4:	b9a0      	cbnz	r0, 18710 <wait_tx_ready+0x4a>
	__asm__ volatile(
   186e6:	f384 8811 	msr	BASEPRI, r4
   186ea:	f3bf 8f6f 	isb	sy
	return z_impl_k_sleep(timeout);
   186ee:	2021      	movs	r0, #33	; 0x21
   186f0:	2100      	movs	r1, #0
   186f2:	f7fd fc9d 	bl	16030 <z_impl_k_sleep>
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
   186f6:	2464      	movs	r4, #100	; 0x64
   186f8:	4630      	mov	r0, r6
   186fa:	f7ff ff95 	bl	18628 <is_tx_ready>
   186fe:	4605      	mov	r5, r0
   18700:	2800      	cmp	r0, #0
   18702:	d1e3      	bne.n	186cc <wait_tx_ready+0x6>
   18704:	2001      	movs	r0, #1
   18706:	f000 fad4 	bl	18cb2 <nrfx_busy_wait>
   1870a:	3c01      	subs	r4, #1
   1870c:	d1f4      	bne.n	186f8 <wait_tx_ready+0x32>
   1870e:	e7dd      	b.n	186cc <wait_tx_ready+0x6>
}
   18710:	4620      	mov	r0, r4
   18712:	bd70      	pop	{r4, r5, r6, pc}

00018714 <uarte_instance_init>:

static int uarte_instance_init(const struct device *dev,
			       uint8_t interrupts_active)
{
   18714:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   18718:	b083      	sub	sp, #12
   1871a:	4605      	mov	r5, r0
	const struct uarte_nrfx_config *config = dev->config;
   1871c:	6847      	ldr	r7, [r0, #4]
	return config->uarte_regs;
   1871e:	683e      	ldr	r6, [r7, #0]
	int err;
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);
	struct uarte_nrfx_data *data = dev->data;
   18720:	f8d0 8010 	ldr.w	r8, [r0, #16]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   18724:	2100      	movs	r1, #0
   18726:	f8c6 1500 	str.w	r1, [r6, #1280]	; 0x500
	const struct uarte_nrfx_config *cfg = dev->config;

	nrf_uarte_disable(uarte);

	data->dev = dev;
   1872a:	f8c8 0000 	str.w	r0, [r8]

#ifdef CONFIG_PINCTRL
	err = pinctrl_apply_state(cfg->pcfg, PINCTRL_STATE_DEFAULT);
   1872e:	f8d7 900c 	ldr.w	r9, [r7, #12]
	ret = pinctrl_lookup_state(config, id, &state);
   18732:	aa01      	add	r2, sp, #4
   18734:	4648      	mov	r0, r9
   18736:	f000 f8e6 	bl	18906 <pinctrl_lookup_state>
	if (ret < 0) {
   1873a:	1e04      	subs	r4, r0, #0
   1873c:	db07      	blt.n	1874e <uarte_instance_init+0x3a>
	return pinctrl_apply_state_direct(config, state);
   1873e:	9b01      	ldr	r3, [sp, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
   18740:	f8d9 2000 	ldr.w	r2, [r9]
   18744:	7919      	ldrb	r1, [r3, #4]
   18746:	6818      	ldr	r0, [r3, #0]
   18748:	f7fb f816 	bl	13778 <pinctrl_configure_pins>
   1874c:	4604      	mov	r4, r0
	if (err < 0) {
   1874e:	2c00      	cmp	r4, #0
   18750:	db35      	blt.n	187be <uarte_instance_init+0xaa>
	}
#else
	uarte_nrfx_pins_configure(dev, false);
#endif /* CONFIG_PINCTRL */

	err = uarte_nrfx_configure(dev, &data->uart_config);
   18752:	f108 0104 	add.w	r1, r8, #4
   18756:	4628      	mov	r0, r5
   18758:	f7ff ff03 	bl	18562 <uarte_nrfx_configure>
	if (err) {
   1875c:	4604      	mov	r4, r0
   1875e:	bb70      	cbnz	r0, 187be <uarte_instance_init+0xaa>
		return err;
	}

	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
   18760:	687b      	ldr	r3, [r7, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
   18762:	f013 0f02 	tst.w	r3, #2
   18766:	d12e      	bne.n	187c6 <uarte_instance_init+0xb2>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   18768:	2308      	movs	r3, #8
   1876a:	f8c6 3500 	str.w	r3, [r6, #1280]	; 0x500
#endif
	{
		/* Enable receiver and transmitter */
		nrf_uarte_enable(uarte);

		if (!cfg->disable_rx) {
   1876e:	7a3b      	ldrb	r3, [r7, #8]
   18770:	b95b      	cbnz	r3, 1878a <uarte_instance_init+0x76>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   18772:	f8c6 3110 	str.w	r3, [r6, #272]	; 0x110
   18776:	f8d6 3110 	ldr.w	r3, [r6, #272]	; 0x110
			nrf_uarte_event_clear(uarte, NRF_UARTE_EVENT_ENDRX);

			nrf_uarte_rx_buffer_set(uarte, data->rx_data, 1);
   1877a:	f8d8 3014 	ldr.w	r3, [r8, #20]

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   1877e:	f8c6 3534 	str.w	r3, [r6, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   18782:	2301      	movs	r3, #1
   18784:	f8c6 3538 	str.w	r3, [r6, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   18788:	6033      	str	r3, [r6, #0]
			nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STARTRX);
		}
	}

	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
   1878a:	687b      	ldr	r3, [r7, #4]
   1878c:	f013 0f02 	tst.w	r3, #2
   18790:	d103      	bne.n	1879a <uarte_instance_init+0x86>
    p_reg->INTENSET = mask;
   18792:	f44f 7380 	mov.w	r3, #256	; 0x100
   18796:	f8c6 3304 	str.w	r3, [r6, #772]	; 0x304
		nrf_uarte_int_enable(uarte, NRF_UARTE_INT_ENDTX_MASK);
	}

	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
   1879a:	687b      	ldr	r3, [r7, #4]
   1879c:	f013 0f10 	tst.w	r3, #16
   187a0:	d003      	beq.n	187aa <uarte_instance_init+0x96>
   187a2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
   187a6:	f8c6 3304 	str.w	r3, [r6, #772]	; 0x304

	/* Set TXSTOPPED event by requesting fake (zero-length) transfer.
	 * Pointer to RAM variable (data->tx_buffer) is set because otherwise
	 * such operation may result in HardFault or RAM corruption.
	 */
	nrf_uarte_tx_buffer_set(uarte, data->char_out, 0);
   187aa:	f8d8 3010 	ldr.w	r3, [r8, #16]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   187ae:	f8c6 3544 	str.w	r3, [r6, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   187b2:	2300      	movs	r3, #0
   187b4:	f8c6 3548 	str.w	r3, [r6, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   187b8:	2301      	movs	r3, #1
   187ba:	60b3      	str	r3, [r6, #8]
   187bc:	60f3      	str	r3, [r6, #12]

	/* switch off transmitter to save an energy */
	nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STOPTX);

	return 0;
}
   187be:	4620      	mov	r0, r4
   187c0:	b003      	add	sp, #12
   187c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		err = endtx_stoptx_ppi_init(uarte, data);
   187c6:	4641      	mov	r1, r8
   187c8:	4630      	mov	r0, r6
   187ca:	f7fa fd43 	bl	13254 <endtx_stoptx_ppi_init>
		if (err < 0) {
   187ce:	2800      	cmp	r0, #0
   187d0:	daca      	bge.n	18768 <uarte_instance_init+0x54>
			return err;
   187d2:	4604      	mov	r4, r0
   187d4:	e7f3      	b.n	187be <uarte_instance_init+0xaa>

000187d6 <uarte_0_init>:
		(__attribute__((__section__(LINKER_DT_NODE_REGION_NAME(	       \
			DT_PHANDLE(UARTE(idx), memory_regions)))))),	       \
		())

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
   187d6:	b510      	push	{r4, lr}
   187d8:	4604      	mov	r4, r0
   187da:	2200      	movs	r2, #0
   187dc:	2101      	movs	r1, #1
   187de:	2002      	movs	r0, #2
   187e0:	f7f9 f936 	bl	11a50 <z_arm_irq_priority_set>
   187e4:	2002      	movs	r0, #2
   187e6:	f7f9 f903 	bl	119f0 <arch_irq_enable>
   187ea:	2100      	movs	r1, #0
   187ec:	4620      	mov	r0, r4
   187ee:	f7ff ff91 	bl	18714 <uarte_instance_init>
   187f2:	bd10      	pop	{r4, pc}

000187f4 <uarte_1_init>:
#endif

#ifdef CONFIG_UART_1_NRF_UARTE
UART_NRF_UARTE_DEVICE(1);
   187f4:	b510      	push	{r4, lr}
   187f6:	4604      	mov	r4, r0
   187f8:	2200      	movs	r2, #0
   187fa:	2101      	movs	r1, #1
   187fc:	2028      	movs	r0, #40	; 0x28
   187fe:	f7f9 f927 	bl	11a50 <z_arm_irq_priority_set>
   18802:	2028      	movs	r0, #40	; 0x28
   18804:	f7f9 f8f4 	bl	119f0 <arch_irq_enable>
   18808:	2100      	movs	r1, #0
   1880a:	4620      	mov	r0, r4
   1880c:	f7ff ff82 	bl	18714 <uarte_instance_init>
   18810:	bd10      	pop	{r4, pc}

00018812 <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
   18812:	4770      	bx	lr

00018814 <counter_sub>:
	return (a - b) & COUNTER_MAX;
   18814:	1a40      	subs	r0, r0, r1
}
   18816:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   1881a:	4770      	bx	lr

0001881c <event_clear>:
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
   1881c:	f100 0350 	add.w	r3, r0, #80	; 0x50
   18820:	009b      	lsls	r3, r3, #2
   18822:	b29b      	uxth	r3, r3
   18824:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   18828:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
   1882c:	2200      	movs	r2, #0
   1882e:	601a      	str	r2, [r3, #0]
   18830:	681b      	ldr	r3, [r3, #0]
}
   18832:	4770      	bx	lr

00018834 <absolute_time_to_cc>:
}
   18834:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   18838:	4770      	bx	lr

0001883a <full_int_lock>:
	__asm__ volatile(
   1883a:	f04f 0320 	mov.w	r3, #32
   1883e:	f3ef 8011 	mrs	r0, BASEPRI
   18842:	f383 8812 	msr	BASEPRI_MAX, r3
   18846:	f3bf 8f6f 	isb	sy
}
   1884a:	4770      	bx	lr

0001884c <full_int_unlock>:
	__asm__ volatile(
   1884c:	f380 8811 	msr	BASEPRI, r0
   18850:	f3bf 8f6f 	isb	sy
}
   18854:	4770      	bx	lr

00018856 <set_absolute_alarm>:
{
   18856:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   18858:	4606      	mov	r6, r0
	uint32_t cc_val = abs_val & COUNTER_MAX;
   1885a:	f021 457f 	bic.w	r5, r1, #4278190080	; 0xff000000
	uint32_t prev_cc = get_comparator(chan);
   1885e:	f7fa fd27 	bl	132b0 <get_comparator>
   18862:	4607      	mov	r7, r0
   18864:	e019      	b.n	1889a <set_absolute_alarm+0x44>
	z_impl_k_busy_wait(usec_to_wait);
   18866:	2013      	movs	r0, #19
   18868:	f000 fdc8 	bl	193fc <z_impl_k_busy_wait>
}
   1886c:	e022      	b.n	188b4 <set_absolute_alarm+0x5e>
		event_clear(chan);
   1886e:	4630      	mov	r0, r6
   18870:	f7ff ffd4 	bl	1881c <event_clear>
		event_enable(chan);
   18874:	4630      	mov	r0, r6
   18876:	f7fa fd23 	bl	132c0 <event_enable>
		set_comparator(chan, cc_val);
   1887a:	4629      	mov	r1, r5
   1887c:	4630      	mov	r0, r6
   1887e:	f7fa fd0d 	bl	1329c <set_comparator>
		now2 = counter();
   18882:	f7fa fd31 	bl	132e8 <counter>
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
   18886:	4284      	cmp	r4, r0
   18888:	d01e      	beq.n	188c8 <set_absolute_alarm+0x72>
   1888a:	1c81      	adds	r1, r0, #2
   1888c:	4628      	mov	r0, r5
   1888e:	f7ff ffc1 	bl	18814 <counter_sub>
	} while ((now2 != now) &&
   18892:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   18896:	d917      	bls.n	188c8 <set_absolute_alarm+0x72>
		prev_cc = cc_val;
   18898:	462f      	mov	r7, r5
		now = counter();
   1889a:	f7fa fd25 	bl	132e8 <counter>
   1889e:	4604      	mov	r4, r0
		set_comparator(chan, now);
   188a0:	4601      	mov	r1, r0
   188a2:	4630      	mov	r0, r6
   188a4:	f7fa fcfa 	bl	1329c <set_comparator>
		if (counter_sub(prev_cc, now) == 1) {
   188a8:	4621      	mov	r1, r4
   188aa:	4638      	mov	r0, r7
   188ac:	f7ff ffb2 	bl	18814 <counter_sub>
   188b0:	2801      	cmp	r0, #1
   188b2:	d0d8      	beq.n	18866 <set_absolute_alarm+0x10>
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
   188b4:	1ca7      	adds	r7, r4, #2
   188b6:	4639      	mov	r1, r7
   188b8:	4628      	mov	r0, r5
   188ba:	f7ff ffab 	bl	18814 <counter_sub>
   188be:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   188c2:	d9d4      	bls.n	1886e <set_absolute_alarm+0x18>
			cc_val = now + 2;
   188c4:	463d      	mov	r5, r7
   188c6:	e7d2      	b.n	1886e <set_absolute_alarm+0x18>
}
   188c8:	4628      	mov	r0, r5
   188ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000188cc <compare_set>:
{
   188cc:	b5f0      	push	{r4, r5, r6, r7, lr}
   188ce:	b083      	sub	sp, #12
   188d0:	4604      	mov	r4, r0
   188d2:	4617      	mov	r7, r2
   188d4:	461d      	mov	r5, r3
	key = compare_int_lock(chan);
   188d6:	f7fa fd0d 	bl	132f4 <compare_int_lock>
   188da:	4606      	mov	r6, r0
	int ret = compare_set_nolocks(chan, target_time, handler, user_data);
   188dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
   188de:	9301      	str	r3, [sp, #4]
   188e0:	9b08      	ldr	r3, [sp, #32]
   188e2:	9300      	str	r3, [sp, #0]
   188e4:	463a      	mov	r2, r7
   188e6:	462b      	mov	r3, r5
   188e8:	4620      	mov	r0, r4
   188ea:	f7fa fdf3 	bl	134d4 <compare_set_nolocks>
   188ee:	4605      	mov	r5, r0
	compare_int_unlock(chan, key);
   188f0:	4631      	mov	r1, r6
   188f2:	4620      	mov	r0, r4
   188f4:	f7fa fd62 	bl	133bc <compare_int_unlock>
}
   188f8:	4628      	mov	r0, r5
   188fa:	b003      	add	sp, #12
   188fc:	bdf0      	pop	{r4, r5, r6, r7, pc}

000188fe <sys_clock_cycle_get_32>:
{
   188fe:	b508      	push	{r3, lr}
	return (uint32_t)z_nrf_rtc_timer_read();
   18900:	f7fa fdc8 	bl	13494 <z_nrf_rtc_timer_read>
}
   18904:	bd08      	pop	{r3, pc}

00018906 <pinctrl_lookup_state>:

#include <zephyr/drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
   18906:	b410      	push	{r4}
	*state = &config->states[0];
   18908:	6843      	ldr	r3, [r0, #4]
   1890a:	6013      	str	r3, [r2, #0]
	while (*state <= &config->states[config->state_cnt - 1U]) {
   1890c:	e001      	b.n	18912 <pinctrl_lookup_state+0xc>
		if (id == (*state)->id) {
			return 0;
		}

		(*state)++;
   1890e:	3408      	adds	r4, #8
   18910:	6014      	str	r4, [r2, #0]
	while (*state <= &config->states[config->state_cnt - 1U]) {
   18912:	6814      	ldr	r4, [r2, #0]
   18914:	7a03      	ldrb	r3, [r0, #8]
   18916:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
   1891a:	3b01      	subs	r3, #1
   1891c:	f8d0 c004 	ldr.w	ip, [r0, #4]
   18920:	eb0c 03c3 	add.w	r3, ip, r3, lsl #3
   18924:	429c      	cmp	r4, r3
   18926:	d804      	bhi.n	18932 <pinctrl_lookup_state+0x2c>
		if (id == (*state)->id) {
   18928:	7963      	ldrb	r3, [r4, #5]
   1892a:	428b      	cmp	r3, r1
   1892c:	d1ef      	bne.n	1890e <pinctrl_lookup_state+0x8>
			return 0;
   1892e:	2000      	movs	r0, #0
   18930:	e001      	b.n	18936 <pinctrl_lookup_state+0x30>
	}

	return -ENOENT;
   18932:	f06f 0001 	mvn.w	r0, #1
}
   18936:	bc10      	pop	{r4}
   18938:	4770      	bx	lr

0001893a <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
   1893a:	b508      	push	{r3, lr}
	z_spm_ns_fatal_error_handler();
#endif

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
		sys_arch_reboot(0);
   1893c:	2000      	movs	r0, #0
   1893e:	f7f9 fc4b 	bl	121d8 <sys_arch_reboot>

00018942 <hw_cc3xx_init_internal>:
#include <nrf_cc3xx_platform.h>

#if CONFIG_HW_CC3XX

static int hw_cc3xx_init_internal(const struct device *dev)
{
   18942:	b508      	push	{r3, lr}

	/* Initialize the cc3xx HW with or without RNG support */
#if CONFIG_ENTROPY_CC3XX
	res = nrf_cc3xx_platform_init();
#else
	res = nrf_cc3xx_platform_init_no_rng();
   18944:	f7fd fd7e 	bl	16444 <nrf_cc3xx_platform_init_no_rng>
#endif

	return res;
}
   18948:	bd08      	pop	{r3, pc}

0001894a <hw_cc3xx_init>:

static int hw_cc3xx_init(const struct device *dev)
{
   1894a:	b510      	push	{r4, lr}
   1894c:	4604      	mov	r4, r0
	int res;

	/* Set the RTOS abort APIs */
	nrf_cc3xx_platform_abort_init();
   1894e:	f7f8 ff5f 	bl	11810 <nrf_cc3xx_platform_abort_init>

	/* Set the RTOS mutex APIs */
	nrf_cc3xx_platform_mutex_init();
   18952:	f7f9 f81b 	bl	1198c <nrf_cc3xx_platform_mutex_init>

	/* Enable the hardware */
	res = hw_cc3xx_init_internal(dev);
   18956:	4620      	mov	r0, r4
   18958:	f7ff fff3 	bl	18942 <hw_cc3xx_init_internal>
	return res;
}
   1895c:	bd10      	pop	{r4, pc}

0001895e <boot_flag_decode>:
    if (flag != BOOT_FLAG_SET) {
   1895e:	2801      	cmp	r0, #1
   18960:	d100      	bne.n	18964 <boot_flag_decode+0x6>
}
   18962:	4770      	bx	lr
        return BOOT_FLAG_BAD;
   18964:	2002      	movs	r0, #2
   18966:	e7fc      	b.n	18962 <boot_flag_decode+0x4>

00018968 <boot_swap_info_off>:
   18968:	6880      	ldr	r0, [r0, #8]
    return ALIGN_DOWN(boot_magic_off(fap) - BOOT_MAX_ALIGN, BOOT_MAX_ALIGN);
   1896a:	3818      	subs	r0, #24
   1896c:	f020 0007 	bic.w	r0, r0, #7
}
   18970:	3810      	subs	r0, #16
   18972:	4770      	bx	lr

00018974 <bootutil_buffer_is_erased>:
    if (buffer == NULL || len == 0) {
   18974:	b189      	cbz	r1, 1899a <bootutil_buffer_is_erased+0x26>
{
   18976:	b538      	push	{r3, r4, r5, lr}
   18978:	4614      	mov	r4, r2
   1897a:	460d      	mov	r5, r1
    if (buffer == NULL || len == 0) {
   1897c:	b90a      	cbnz	r2, 18982 <bootutil_buffer_is_erased+0xe>
        return false;
   1897e:	2000      	movs	r0, #0
}
   18980:	bd38      	pop	{r3, r4, r5, pc}
    erased_val = flash_area_erased_val(area);
   18982:	f7ff f81c 	bl	179be <flash_area_erased_val>
    for (i = 0, u8b = (uint8_t *)buffer; i < len; i++) {
   18986:	2300      	movs	r3, #0
   18988:	42a3      	cmp	r3, r4
   1898a:	d204      	bcs.n	18996 <bootutil_buffer_is_erased+0x22>
        if (u8b[i] != erased_val) {
   1898c:	5cea      	ldrb	r2, [r5, r3]
   1898e:	4282      	cmp	r2, r0
   18990:	d105      	bne.n	1899e <bootutil_buffer_is_erased+0x2a>
    for (i = 0, u8b = (uint8_t *)buffer; i < len; i++) {
   18992:	3301      	adds	r3, #1
   18994:	e7f8      	b.n	18988 <bootutil_buffer_is_erased+0x14>
    return true;
   18996:	2001      	movs	r0, #1
   18998:	e7f2      	b.n	18980 <bootutil_buffer_is_erased+0xc>
        return false;
   1899a:	2000      	movs	r0, #0
}
   1899c:	4770      	bx	lr
            return false;
   1899e:	2000      	movs	r0, #0
   189a0:	e7ee      	b.n	18980 <bootutil_buffer_is_erased+0xc>

000189a2 <boot_read_flag>:
{
   189a2:	b538      	push	{r3, r4, r5, lr}
   189a4:	4605      	mov	r5, r0
   189a6:	460c      	mov	r4, r1
   189a8:	4611      	mov	r1, r2
    rc = flash_area_read(fap, off, flag, sizeof *flag);
   189aa:	2301      	movs	r3, #1
   189ac:	4622      	mov	r2, r4
   189ae:	f7fe ffb0 	bl	17912 <flash_area_read>
    if (rc < 0) {
   189b2:	2800      	cmp	r0, #0
   189b4:	db0f      	blt.n	189d6 <boot_read_flag+0x34>
    if (bootutil_buffer_is_erased(fap, flag, sizeof *flag)) {
   189b6:	2201      	movs	r2, #1
   189b8:	4621      	mov	r1, r4
   189ba:	4628      	mov	r0, r5
   189bc:	f7ff ffda 	bl	18974 <bootutil_buffer_is_erased>
   189c0:	b118      	cbz	r0, 189ca <boot_read_flag+0x28>
        *flag = BOOT_FLAG_UNSET;
   189c2:	2303      	movs	r3, #3
   189c4:	7023      	strb	r3, [r4, #0]
    return 0;
   189c6:	2000      	movs	r0, #0
   189c8:	e006      	b.n	189d8 <boot_read_flag+0x36>
        *flag = boot_flag_decode(*flag);
   189ca:	7820      	ldrb	r0, [r4, #0]
   189cc:	f7ff ffc7 	bl	1895e <boot_flag_decode>
   189d0:	7020      	strb	r0, [r4, #0]
    return 0;
   189d2:	2000      	movs	r0, #0
   189d4:	e000      	b.n	189d8 <boot_read_flag+0x36>
        return BOOT_EFLASH;
   189d6:	2001      	movs	r0, #1
}
   189d8:	bd38      	pop	{r3, r4, r5, pc}

000189da <boot_write_trailer>:
 * @returns 0 on success, != 0 on error.
 */
int
boot_write_trailer(const struct flash_area *fap, uint32_t off,
        const uint8_t *inbuf, uint8_t inlen)
{
   189da:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   189de:	b083      	sub	sp, #12
   189e0:	4606      	mov	r6, r0
   189e2:	460f      	mov	r7, r1
   189e4:	4690      	mov	r8, r2
   189e6:	461d      	mov	r5, r3
    uint8_t buf[BOOT_MAX_ALIGN];
    uint8_t erased_val;
    uint32_t align;
    int rc;

    align = flash_area_align(fap);
   189e8:	f7fe ffe2 	bl	179b0 <flash_area_align>
    align = ALIGN_UP(inlen, align);
   189ec:	182c      	adds	r4, r5, r0
   189ee:	3c01      	subs	r4, #1
   189f0:	f1c0 0c00 	rsb	ip, r0, #0
   189f4:	ea04 040c 	and.w	r4, r4, ip
    if (align > BOOT_MAX_ALIGN) {
   189f8:	2c08      	cmp	r4, #8
   189fa:	d904      	bls.n	18a06 <boot_write_trailer+0x2c>
        return -1;
   189fc:	f04f 30ff 	mov.w	r0, #4294967295
    if (rc != 0) {
        return BOOT_EFLASH;
    }

    return 0;
}
   18a00:	b003      	add	sp, #12
   18a02:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    erased_val = flash_area_erased_val(fap);
   18a06:	4630      	mov	r0, r6
   18a08:	f7fe ffd9 	bl	179be <flash_area_erased_val>
   18a0c:	4681      	mov	r9, r0
    memcpy(buf, inbuf, inlen);
   18a0e:	462a      	mov	r2, r5
   18a10:	4641      	mov	r1, r8
   18a12:	4668      	mov	r0, sp
   18a14:	f7ff f8e5 	bl	17be2 <memcpy>
    memset(&buf[inlen], erased_val, align - inlen);
   18a18:	1b62      	subs	r2, r4, r5
   18a1a:	4649      	mov	r1, r9
   18a1c:	eb0d 0005 	add.w	r0, sp, r5
   18a20:	f7ff f90e 	bl	17c40 <memset>
    rc = flash_area_write(fap, off, buf, align);
   18a24:	4623      	mov	r3, r4
   18a26:	466a      	mov	r2, sp
   18a28:	4639      	mov	r1, r7
   18a2a:	4630      	mov	r0, r6
   18a2c:	f7fe ff8c 	bl	17948 <flash_area_write>
    if (rc != 0) {
   18a30:	2800      	cmp	r0, #0
   18a32:	d0e5      	beq.n	18a00 <boot_write_trailer+0x26>
        return BOOT_EFLASH;
   18a34:	2001      	movs	r0, #1
   18a36:	e7e3      	b.n	18a00 <boot_write_trailer+0x26>

00018a38 <boot_write_trailer_flag>:

int
boot_write_trailer_flag(const struct flash_area *fap, uint32_t off,
        uint8_t flag_val)
{
   18a38:	b500      	push	{lr}
   18a3a:	b083      	sub	sp, #12
    const uint8_t buf[1] = { flag_val };
   18a3c:	f88d 2004 	strb.w	r2, [sp, #4]
    return boot_write_trailer(fap, off, buf, 1);
   18a40:	2301      	movs	r3, #1
   18a42:	aa01      	add	r2, sp, #4
   18a44:	f7ff ffc9 	bl	189da <boot_write_trailer>
}
   18a48:	b003      	add	sp, #12
   18a4a:	f85d fb04 	ldr.w	pc, [sp], #4

00018a4e <boot_write_image_ok>:

int
boot_write_image_ok(const struct flash_area *fap)
{
   18a4e:	b508      	push	{r3, lr}
   18a50:	6881      	ldr	r1, [r0, #8]
    return ALIGN_DOWN(boot_magic_off(fap) - BOOT_MAX_ALIGN, BOOT_MAX_ALIGN);
   18a52:	3918      	subs	r1, #24

    off = boot_image_ok_off(fap);
    BOOT_LOG_DBG("writing image_ok; fa_id=%d off=0x%lx (0x%lx)",
                 flash_area_get_id(fap), (unsigned long)off,
                 (unsigned long)(flash_area_get_off(fap) + off));
    return boot_write_trailer_flag(fap, off, BOOT_FLAG_SET);
   18a54:	2201      	movs	r2, #1
   18a56:	f021 0107 	bic.w	r1, r1, #7
   18a5a:	f7ff ffed 	bl	18a38 <boot_write_trailer_flag>
}
   18a5e:	bd08      	pop	{r3, pc}

00018a60 <boot_read_image_ok>:

int
boot_read_image_ok(const struct flash_area *fap, uint8_t *image_ok)
{
   18a60:	b508      	push	{r3, lr}
   18a62:	6882      	ldr	r2, [r0, #8]
    return ALIGN_DOWN(boot_magic_off(fap) - BOOT_MAX_ALIGN, BOOT_MAX_ALIGN);
   18a64:	3a18      	subs	r2, #24
    return boot_read_flag(fap, image_ok, boot_image_ok_off(fap));
   18a66:	f022 0207 	bic.w	r2, r2, #7
   18a6a:	f7ff ff9a 	bl	189a2 <boot_read_flag>
}
   18a6e:	bd08      	pop	{r3, pc}

00018a70 <boot_read_swap_state>:
{
   18a70:	b530      	push	{r4, r5, lr}
   18a72:	b087      	sub	sp, #28
   18a74:	4604      	mov	r4, r0
   18a76:	460d      	mov	r5, r1
   18a78:	6881      	ldr	r1, [r0, #8]
    rc = flash_area_read(fap, off, magic, BOOT_MAGIC_SZ);
   18a7a:	2310      	movs	r3, #16
   18a7c:	aa02      	add	r2, sp, #8
   18a7e:	3910      	subs	r1, #16
   18a80:	f7fe ff47 	bl	17912 <flash_area_read>
    if (rc < 0) {
   18a84:	2800      	cmp	r0, #0
   18a86:	db3e      	blt.n	18b06 <boot_read_swap_state+0x96>
    if (bootutil_buffer_is_erased(fap, magic, BOOT_MAGIC_SZ)) {
   18a88:	2210      	movs	r2, #16
   18a8a:	a902      	add	r1, sp, #8
   18a8c:	4620      	mov	r0, r4
   18a8e:	f7ff ff71 	bl	18974 <bootutil_buffer_is_erased>
   18a92:	b370      	cbz	r0, 18af2 <boot_read_swap_state+0x82>
        state->magic = BOOT_MAGIC_UNSET;
   18a94:	2303      	movs	r3, #3
   18a96:	702b      	strb	r3, [r5, #0]
    off = boot_swap_info_off(fap);
   18a98:	4620      	mov	r0, r4
   18a9a:	f7ff ff65 	bl	18968 <boot_swap_info_off>
   18a9e:	4601      	mov	r1, r0
    rc = flash_area_read(fap, off, &swap_info, sizeof swap_info);
   18aa0:	2301      	movs	r3, #1
   18aa2:	f10d 0207 	add.w	r2, sp, #7
   18aa6:	4620      	mov	r0, r4
   18aa8:	f7fe ff33 	bl	17912 <flash_area_read>
    if (rc < 0) {
   18aac:	2800      	cmp	r0, #0
   18aae:	db2d      	blt.n	18b0c <boot_read_swap_state+0x9c>
    state->swap_type = BOOT_GET_SWAP_TYPE(swap_info);
   18ab0:	f89d 3007 	ldrb.w	r3, [sp, #7]
   18ab4:	f003 020f 	and.w	r2, r3, #15
   18ab8:	706a      	strb	r2, [r5, #1]
    state->image_num = BOOT_GET_IMAGE_NUM(swap_info);
   18aba:	091b      	lsrs	r3, r3, #4
   18abc:	712b      	strb	r3, [r5, #4]
    if (bootutil_buffer_is_erased(fap, &swap_info, sizeof swap_info) ||
   18abe:	2201      	movs	r2, #1
   18ac0:	f10d 0107 	add.w	r1, sp, #7
   18ac4:	4620      	mov	r0, r4
   18ac6:	f7ff ff55 	bl	18974 <bootutil_buffer_is_erased>
   18aca:	b910      	cbnz	r0, 18ad2 <boot_read_swap_state+0x62>
            state->swap_type > BOOT_SWAP_TYPE_REVERT) {
   18acc:	786b      	ldrb	r3, [r5, #1]
    if (bootutil_buffer_is_erased(fap, &swap_info, sizeof swap_info) ||
   18ace:	2b04      	cmp	r3, #4
   18ad0:	d903      	bls.n	18ada <boot_read_swap_state+0x6a>
        state->swap_type = BOOT_SWAP_TYPE_NONE;
   18ad2:	2301      	movs	r3, #1
   18ad4:	706b      	strb	r3, [r5, #1]
        state->image_num = 0;
   18ad6:	2300      	movs	r3, #0
   18ad8:	712b      	strb	r3, [r5, #4]
   18ada:	68a2      	ldr	r2, [r4, #8]
    return ALIGN_DOWN(boot_magic_off(fap) - BOOT_MAX_ALIGN, BOOT_MAX_ALIGN);
   18adc:	3a18      	subs	r2, #24
   18ade:	f022 0207 	bic.w	r2, r2, #7
    return boot_read_flag(fap, copy_done, boot_copy_done_off(fap));
   18ae2:	3a08      	subs	r2, #8
   18ae4:	1ca9      	adds	r1, r5, #2
   18ae6:	4620      	mov	r0, r4
   18ae8:	f7ff ff5b 	bl	189a2 <boot_read_flag>
    if (rc) {
   18aec:	b130      	cbz	r0, 18afc <boot_read_swap_state+0x8c>
        return BOOT_EFLASH;
   18aee:	2001      	movs	r0, #1
   18af0:	e00a      	b.n	18b08 <boot_read_swap_state+0x98>
        state->magic = boot_magic_decode(magic);
   18af2:	a802      	add	r0, sp, #8
   18af4:	f7fb f82c 	bl	13b50 <boot_magic_decode>
   18af8:	7028      	strb	r0, [r5, #0]
   18afa:	e7cd      	b.n	18a98 <boot_read_swap_state+0x28>
    return boot_read_image_ok(fap, &state->image_ok);
   18afc:	1ce9      	adds	r1, r5, #3
   18afe:	4620      	mov	r0, r4
   18b00:	f7ff ffae 	bl	18a60 <boot_read_image_ok>
   18b04:	e000      	b.n	18b08 <boot_read_swap_state+0x98>
        return BOOT_EFLASH;
   18b06:	2001      	movs	r0, #1
}
   18b08:	b007      	add	sp, #28
   18b0a:	bd30      	pop	{r4, r5, pc}
        return BOOT_EFLASH;
   18b0c:	2001      	movs	r0, #1
   18b0e:	e7fb      	b.n	18b08 <boot_read_swap_state+0x98>

00018b10 <boot_write_swap_info>:
 * resume in case of an unexpected reset.
 */
int
boot_write_swap_info(const struct flash_area *fap, uint8_t swap_type,
                     uint8_t image_num)
{
   18b10:	b510      	push	{r4, lr}
   18b12:	b082      	sub	sp, #8
   18b14:	4604      	mov	r4, r0
    uint32_t off;
    uint8_t swap_info;

    BOOT_SET_SWAP_INFO(swap_info, image_num, swap_type);
   18b16:	ea41 1102 	orr.w	r1, r1, r2, lsl #4
   18b1a:	f88d 1007 	strb.w	r1, [sp, #7]
    off = boot_swap_info_off(fap);
   18b1e:	f7ff ff23 	bl	18968 <boot_swap_info_off>
   18b22:	4601      	mov	r1, r0
    BOOT_LOG_DBG("writing swap_info; fa_id=%d off=0x%lx (0x%lx), swap_type=0x%x"
                 " image_num=0x%x",
                 flash_area_get_id(fap), (unsigned long)off,
                 (unsigned long)(flash_area_get_off(fap) + off),
                 swap_type, image_num);
    return boot_write_trailer(fap, off, (const uint8_t *) &swap_info, 1);
   18b24:	2301      	movs	r3, #1
   18b26:	f10d 0207 	add.w	r2, sp, #7
   18b2a:	4620      	mov	r0, r4
   18b2c:	f7ff ff55 	bl	189da <boot_write_trailer>
}
   18b30:	b002      	add	sp, #8
   18b32:	bd10      	pop	{r4, pc}

00018b34 <boot_set_pending_multi>:
 *
 * @return                  0 on success; nonzero on failure.
 */
int
boot_set_pending_multi(int image_index, int permanent)
{
   18b34:	b570      	push	{r4, r5, r6, lr}
   18b36:	b084      	sub	sp, #16
   18b38:	460c      	mov	r4, r1
    const struct flash_area *fap;
    struct boot_swap_state state_secondary_slot;
    uint8_t swap_type;
    int rc;

    rc = flash_area_open(FLASH_AREA_IMAGE_SECONDARY(image_index), &fap);
   18b3a:	a903      	add	r1, sp, #12
   18b3c:	2005      	movs	r0, #5
   18b3e:	f7f8 fcd9 	bl	114f4 <flash_area_open>
    if (rc != 0) {
   18b42:	b118      	cbz	r0, 18b4c <boot_set_pending_multi+0x18>
        return BOOT_EFLASH;
   18b44:	2501      	movs	r5, #1
    }

done:
    flash_area_close(fap);
    return rc;
}
   18b46:	4628      	mov	r0, r5
   18b48:	b004      	add	sp, #16
   18b4a:	bd70      	pop	{r4, r5, r6, pc}
    rc = boot_read_swap_state(fap, &state_secondary_slot);
   18b4c:	a901      	add	r1, sp, #4
   18b4e:	9803      	ldr	r0, [sp, #12]
   18b50:	f7ff ff8e 	bl	18a70 <boot_read_swap_state>
    if (rc != 0) {
   18b54:	4605      	mov	r5, r0
   18b56:	b940      	cbnz	r0, 18b6a <boot_set_pending_multi+0x36>
    switch (state_secondary_slot.magic) {
   18b58:	f89d 6004 	ldrb.w	r6, [sp, #4]
   18b5c:	2e02      	cmp	r6, #2
   18b5e:	d01e      	beq.n	18b9e <boot_set_pending_multi+0x6a>
   18b60:	2e03      	cmp	r6, #3
   18b62:	d006      	beq.n	18b72 <boot_set_pending_multi+0x3e>
   18b64:	2e01      	cmp	r6, #1
   18b66:	d000      	beq.n	18b6a <boot_set_pending_multi+0x36>
        rc = BOOT_EBADIMAGE;
   18b68:	2503      	movs	r5, #3
    flash_area_close(fap);
   18b6a:	9803      	ldr	r0, [sp, #12]
   18b6c:	f7fe fed0 	bl	17910 <flash_area_close>
    return rc;
   18b70:	e7e9      	b.n	18b46 <boot_set_pending_multi+0x12>
        rc = boot_write_magic(fap);
   18b72:	9803      	ldr	r0, [sp, #12]
   18b74:	f7fa fff8 	bl	13b68 <boot_write_magic>
        if (rc == 0 && permanent) {
   18b78:	4605      	mov	r5, r0
   18b7a:	b900      	cbnz	r0, 18b7e <boot_set_pending_multi+0x4a>
   18b7c:	b954      	cbnz	r4, 18b94 <boot_set_pending_multi+0x60>
        if (rc == 0) {
   18b7e:	2d00      	cmp	r5, #0
   18b80:	d1f3      	bne.n	18b6a <boot_set_pending_multi+0x36>
            if (permanent) {
   18b82:	b904      	cbnz	r4, 18b86 <boot_set_pending_multi+0x52>
                swap_type = BOOT_SWAP_TYPE_TEST;
   18b84:	2602      	movs	r6, #2
            rc = boot_write_swap_info(fap, swap_type, 0);
   18b86:	2200      	movs	r2, #0
   18b88:	4631      	mov	r1, r6
   18b8a:	9803      	ldr	r0, [sp, #12]
   18b8c:	f7ff ffc0 	bl	18b10 <boot_write_swap_info>
   18b90:	4605      	mov	r5, r0
   18b92:	e7ea      	b.n	18b6a <boot_set_pending_multi+0x36>
            rc = boot_write_image_ok(fap);
   18b94:	9803      	ldr	r0, [sp, #12]
   18b96:	f7ff ff5a 	bl	18a4e <boot_write_image_ok>
   18b9a:	4605      	mov	r5, r0
   18b9c:	e7ef      	b.n	18b7e <boot_set_pending_multi+0x4a>
        flash_area_erase(fap, 0, flash_area_get_size(fap));
   18b9e:	9803      	ldr	r0, [sp, #12]
   18ba0:	6882      	ldr	r2, [r0, #8]
   18ba2:	2100      	movs	r1, #0
   18ba4:	f7fe feeb 	bl	1797e <flash_area_erase>
        rc = BOOT_EBADIMAGE;
   18ba8:	2503      	movs	r5, #3
        break;
   18baa:	e7de      	b.n	18b6a <boot_set_pending_multi+0x36>

00018bac <boot_set_pending>:
 *
 * @return                  0 on success; nonzero on failure.
 */
int
boot_set_pending(int permanent)
{
   18bac:	b508      	push	{r3, lr}
   18bae:	4601      	mov	r1, r0
    return boot_set_pending_multi(0, permanent);
   18bb0:	2000      	movs	r0, #0
   18bb2:	f7ff ffbf 	bl	18b34 <boot_set_pending_multi>
}
   18bb6:	bd08      	pop	{r3, pc}

00018bb8 <nrf52_errata_36>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   18bb8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   18bbc:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
            if (var1 == 0x08)
   18bc0:	2b08      	cmp	r3, #8
   18bc2:	d001      	beq.n	18bc8 <nrf52_errata_36+0x10>
        return false;
   18bc4:	2000      	movs	r0, #0
   18bc6:	4770      	bx	lr
                        return true;
   18bc8:	2001      	movs	r0, #1
}
   18bca:	4770      	bx	lr

00018bcc <nrf52_errata_66>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   18bcc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   18bd0:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
            if (var1 == 0x08)
   18bd4:	2b08      	cmp	r3, #8
   18bd6:	d001      	beq.n	18bdc <nrf52_errata_66+0x10>
        return false;
   18bd8:	2000      	movs	r0, #0
   18bda:	4770      	bx	lr
                        return true;
   18bdc:	2001      	movs	r0, #1
}
   18bde:	4770      	bx	lr

00018be0 <nrf52_errata_98>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   18be0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   18be4:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   18be8:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            if (var1 == 0x08)
   18bec:	2a08      	cmp	r2, #8
   18bee:	d001      	beq.n	18bf4 <nrf52_errata_98+0x14>
        return false;
   18bf0:	2000      	movs	r0, #0
   18bf2:	4770      	bx	lr
                switch(var2)
   18bf4:	2b00      	cmp	r3, #0
   18bf6:	d804      	bhi.n	18c02 <nrf52_errata_98+0x22>
   18bf8:	e8df f003 	tbb	[pc, r3]
   18bfc:	01          	.byte	0x01
   18bfd:	00          	.byte	0x00
   18bfe:	2001      	movs	r0, #1
   18c00:	4770      	bx	lr
                        return false;
   18c02:	2000      	movs	r0, #0
}
   18c04:	4770      	bx	lr

00018c06 <nrf52_errata_103>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   18c06:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   18c0a:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   18c0e:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            if (var1 == 0x08)
   18c12:	2a08      	cmp	r2, #8
   18c14:	d001      	beq.n	18c1a <nrf52_errata_103+0x14>
        return false;
   18c16:	2000      	movs	r0, #0
   18c18:	4770      	bx	lr
                switch(var2)
   18c1a:	2b00      	cmp	r3, #0
   18c1c:	d804      	bhi.n	18c28 <nrf52_errata_103+0x22>
   18c1e:	e8df f003 	tbb	[pc, r3]
   18c22:	01          	.byte	0x01
   18c23:	00          	.byte	0x00
   18c24:	2001      	movs	r0, #1
   18c26:	4770      	bx	lr
                        return false;
   18c28:	2000      	movs	r0, #0
}
   18c2a:	4770      	bx	lr

00018c2c <nrf52_errata_115>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   18c2c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   18c30:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   18c34:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            if (var1 == 0x08)
   18c38:	2a08      	cmp	r2, #8
   18c3a:	d001      	beq.n	18c40 <nrf52_errata_115+0x14>
        return false;
   18c3c:	2000      	movs	r0, #0
   18c3e:	4770      	bx	lr
                switch(var2)
   18c40:	2b00      	cmp	r3, #0
   18c42:	d804      	bhi.n	18c4e <nrf52_errata_115+0x22>
   18c44:	e8df f003 	tbb	[pc, r3]
   18c48:	01          	.byte	0x01
   18c49:	00          	.byte	0x00
   18c4a:	2001      	movs	r0, #1
   18c4c:	4770      	bx	lr
                        return false;
   18c4e:	2000      	movs	r0, #0
}
   18c50:	4770      	bx	lr

00018c52 <nrf52_errata_120>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   18c52:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   18c56:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   18c5a:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            if (var1 == 0x08)
   18c5e:	2a08      	cmp	r2, #8
   18c60:	d001      	beq.n	18c66 <nrf52_errata_120+0x14>
        return false;
   18c62:	2000      	movs	r0, #0
   18c64:	4770      	bx	lr
                switch(var2)
   18c66:	2b00      	cmp	r3, #0
   18c68:	d804      	bhi.n	18c74 <nrf52_errata_120+0x22>
   18c6a:	e8df f003 	tbb	[pc, r3]
   18c6e:	01          	.byte	0x01
   18c6f:	00          	.byte	0x00
   18c70:	2001      	movs	r0, #1
   18c72:	4770      	bx	lr
                        return false;
   18c74:	2000      	movs	r0, #0
}
   18c76:	4770      	bx	lr

00018c78 <nrf52_errata_136>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   18c78:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   18c7c:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
            if (var1 == 0x08)
   18c80:	2b08      	cmp	r3, #8
   18c82:	d001      	beq.n	18c88 <nrf52_errata_136+0x10>
        return false;
   18c84:	2000      	movs	r0, #0
   18c86:	4770      	bx	lr
                        return true;
   18c88:	2001      	movs	r0, #1
}
   18c8a:	4770      	bx	lr

00018c8c <nrf52_configuration_249>:
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   18c8c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   18c90:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   18c94:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
                        return true;
                }
            }
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
   18c98:	2a08      	cmp	r2, #8
   18c9a:	d001      	beq.n	18ca0 <nrf52_configuration_249+0x14>
                    default:
                        return true;
                }
            }
        #endif
        return false;
   18c9c:	2000      	movs	r0, #0
   18c9e:	4770      	bx	lr
                switch(var2)
   18ca0:	2b04      	cmp	r3, #4
   18ca2:	d801      	bhi.n	18ca8 <nrf52_configuration_249+0x1c>
   18ca4:	2000      	movs	r0, #0
   18ca6:	4770      	bx	lr
                        return true;
   18ca8:	2001      	movs	r0, #1
    #endif
}
   18caa:	4770      	bx	lr

00018cac <nrfx_isr>:
#include <nrfx.h>
#include <zephyr/kernel.h>
#include <soc/nrfx_coredep.h>

void nrfx_isr(const void *irq_handler)
{
   18cac:	b508      	push	{r3, lr}
	((nrfx_irq_handler_t)irq_handler)();
   18cae:	4780      	blx	r0
}
   18cb0:	bd08      	pop	{r3, pc}

00018cb2 <nrfx_busy_wait>:

void nrfx_busy_wait(uint32_t usec_to_wait)
{
   18cb2:	b508      	push	{r3, lr}
	z_impl_k_busy_wait(usec_to_wait);
   18cb4:	f000 fba2 	bl	193fc <z_impl_k_busy_wait>
	if (IS_ENABLED(CONFIG_SYS_CLOCK_EXISTS)) {
		k_busy_wait(usec_to_wait);
	} else {
		nrfx_coredep_delay_us(usec_to_wait);
	}
}
   18cb8:	bd08      	pop	{r3, pc}

00018cba <clock_initial_lfclksrc_get>:
}
   18cba:	2000      	movs	r0, #0
   18cbc:	4770      	bx	lr

00018cbe <clock_lfclksrc_tweak>:
{
   18cbe:	b538      	push	{r3, r4, r5, lr}
   18cc0:	4604      	mov	r4, r0
    bool is_correct_clk = (*p_lfclksrc == NRFX_CLOCK_CONFIG_LF_SRC);
   18cc2:	6803      	ldr	r3, [r0, #0]
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
   18cc4:	2b01      	cmp	r3, #1
   18cc6:	d002      	beq.n	18cce <clock_lfclksrc_tweak+0x10>
   18cc8:	b933      	cbnz	r3, 18cd8 <clock_lfclksrc_tweak+0x1a>
   18cca:	2301      	movs	r3, #1
   18ccc:	e000      	b.n	18cd0 <clock_lfclksrc_tweak+0x12>
   18cce:	2301      	movs	r3, #1
    if (!is_correct_clk)
   18cd0:	461d      	mov	r5, r3
   18cd2:	b11b      	cbz	r3, 18cdc <clock_lfclksrc_tweak+0x1e>
}
   18cd4:	4628      	mov	r0, r5
   18cd6:	bd38      	pop	{r3, r4, r5, pc}
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
   18cd8:	2300      	movs	r3, #0
   18cda:	e7f9      	b.n	18cd0 <clock_lfclksrc_tweak+0x12>
        clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   18cdc:	2000      	movs	r0, #0
   18cde:	f7fb f89d 	bl	13e1c <clock_stop>
        *p_lfclksrc = clock_initial_lfclksrc_get();
   18ce2:	f7ff ffea 	bl	18cba <clock_initial_lfclksrc_get>
   18ce6:	6020      	str	r0, [r4, #0]
   18ce8:	e7f4      	b.n	18cd4 <clock_lfclksrc_tweak+0x16>

00018cea <nrfx_clock_enable>:
{
   18cea:	b508      	push	{r3, lr}
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
   18cec:	2000      	movs	r0, #0
   18cee:	f7f8 fea1 	bl	11a34 <arch_irq_is_enabled>
   18cf2:	b130      	cbz	r0, 18d02 <nrfx_clock_enable+0x18>
    nrf_clock_lf_src_set(NRF_CLOCK, clock_initial_lfclksrc_get());
   18cf4:	f7ff ffe1 	bl	18cba <clock_initial_lfclksrc_get>
    p_reg->LFCLKSRC = (uint32_t)(source);
   18cf8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   18cfc:	f8c3 0518 	str.w	r0, [r3, #1304]	; 0x518
}
   18d00:	bd08      	pop	{r3, pc}
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
   18d02:	f7f8 fe75 	bl	119f0 <arch_irq_enable>
   18d06:	e7f5      	b.n	18cf4 <nrfx_clock_enable+0xa>

00018d08 <nrfx_clock_start>:
    switch (domain)
   18d08:	b110      	cbz	r0, 18d10 <nrfx_clock_start+0x8>
   18d0a:	2801      	cmp	r0, #1
   18d0c:	d040      	beq.n	18d90 <nrfx_clock_start+0x88>
   18d0e:	4770      	bx	lr
{
   18d10:	b500      	push	{lr}
   18d12:	b083      	sub	sp, #12
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   18d14:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   18d18:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
   18d1c:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
   18d20:	9301      	str	r3, [sp, #4]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   18d22:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
   18d26:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   18d2a:	d11b      	bne.n	18d64 <nrfx_clock_start+0x5c>
            return ((p_reg->LFCLKRUN & CLOCK_LFCLKRUN_STATUS_Msk)
   18d2c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   18d30:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
                else if (nrf_clock_start_task_check(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK))
   18d34:	f013 0f01 	tst.w	r3, #1
   18d38:	d118      	bne.n	18d6c <nrfx_clock_start+0x64>
                    lfclksrc = clock_initial_lfclksrc_get();
   18d3a:	f7ff ffbe 	bl	18cba <clock_initial_lfclksrc_get>
   18d3e:	9001      	str	r0, [sp, #4]
    p_reg->LFCLKSRC = (uint32_t)(source);
   18d40:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   18d44:	9a01      	ldr	r2, [sp, #4]
   18d46:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   18d4a:	2200      	movs	r2, #0
   18d4c:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
   18d50:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    p_reg->INTENSET = mask;
   18d54:	2202      	movs	r2, #2
   18d56:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   18d5a:	2201      	movs	r2, #1
   18d5c:	609a      	str	r2, [r3, #8]
}
   18d5e:	b003      	add	sp, #12
   18d60:	f85d fb04 	ldr.w	pc, [sp], #4
                    (void)clock_lfclksrc_tweak(&lfclksrc);
   18d64:	a801      	add	r0, sp, #4
   18d66:	f7ff ffaa 	bl	18cbe <clock_lfclksrc_tweak>
   18d6a:	e7e9      	b.n	18d40 <nrfx_clock_start+0x38>
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
   18d6c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   18d70:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
   18d74:	f003 0303 	and.w	r3, r3, #3
                    lfclksrc = nrf_clock_lf_srccopy_get(NRF_CLOCK);
   18d78:	9301      	str	r3, [sp, #4]
                    if (clock_lfclksrc_tweak(&lfclksrc))
   18d7a:	a801      	add	r0, sp, #4
   18d7c:	f7ff ff9f 	bl	18cbe <clock_lfclksrc_tweak>
   18d80:	2800      	cmp	r0, #0
   18d82:	d0dd      	beq.n	18d40 <nrfx_clock_start+0x38>
    p_reg->INTENSET = mask;
   18d84:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   18d88:	2202      	movs	r2, #2
   18d8a:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
                        break;
   18d8e:	e7e6      	b.n	18d5e <nrfx_clock_start+0x56>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   18d90:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   18d94:	2200      	movs	r2, #0
   18d96:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   18d9a:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
   18d9e:	2201      	movs	r2, #1
   18da0:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   18da4:	601a      	str	r2, [r3, #0]
   18da6:	4770      	bx	lr

00018da8 <nrfx_clock_stop>:
{
   18da8:	b508      	push	{r3, lr}
    clock_stop(domain);
   18daa:	f7fb f837 	bl	13e1c <clock_stop>
}
   18dae:	bd08      	pop	{r3, pc}

00018db0 <pin_is_task_output>:
{
   18db0:	b510      	push	{r4, lr}
   18db2:	4604      	mov	r4, r0
    return pin_is_output(pin) && pin_in_use_by_te(pin);
   18db4:	f7fb f90e 	bl	13fd4 <pin_is_output>
   18db8:	b128      	cbz	r0, 18dc6 <pin_is_task_output+0x16>
   18dba:	4620      	mov	r0, r4
   18dbc:	f7fb f8f4 	bl	13fa8 <pin_in_use_by_te>
   18dc0:	b118      	cbz	r0, 18dca <pin_is_task_output+0x1a>
   18dc2:	2001      	movs	r0, #1
   18dc4:	e000      	b.n	18dc8 <pin_is_task_output+0x18>
   18dc6:	2000      	movs	r0, #0
}
   18dc8:	bd10      	pop	{r4, pc}
    return pin_is_output(pin) && pin_in_use_by_te(pin);
   18dca:	2000      	movs	r0, #0
   18dcc:	e7fc      	b.n	18dc8 <pin_is_task_output+0x18>

00018dce <pin_is_input>:
{
   18dce:	b508      	push	{r3, lr}
    return !pin_is_output(pin);
   18dd0:	f7fb f900 	bl	13fd4 <pin_is_output>
   18dd4:	f080 0001 	eor.w	r0, r0, #1
}
   18dd8:	b2c0      	uxtb	r0, r0
   18dda:	bd08      	pop	{r3, pc}

00018ddc <gpiote_polarity_to_trigger>:
}
   18ddc:	4770      	bx	lr

00018dde <gpiote_trigger_to_polarity>:
}
   18dde:	4770      	bx	lr

00018de0 <is_level>:
}
   18de0:	2803      	cmp	r0, #3
   18de2:	bf94      	ite	ls
   18de4:	2000      	movls	r0, #0
   18de6:	2001      	movhi	r0, #1
   18de8:	4770      	bx	lr

00018dea <flash_page_size_get>:
NRF_STATIC_INLINE uint32_t nrf_ficr_codepagesize_get(NRF_FICR_Type const * p_reg)
{
#if defined(FICR_INFO_CODEPAGESIZE_CODEPAGESIZE_Msk)
    return p_reg->INFO.CODEPAGESIZE;
#else
    return p_reg->CODEPAGESIZE;
   18dea:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   18dee:	6918      	ldr	r0, [r3, #16]
}
   18df0:	4770      	bx	lr

00018df2 <flash_page_count_get>:
NRF_STATIC_INLINE uint32_t nrf_ficr_codesize_get(NRF_FICR_Type const * p_reg)
{
#if defined(FICR_INFO_CODESIZE_CODESIZE_Msk)
    return p_reg->INFO.CODESIZE;
#else
    return p_reg->CODESIZE;
   18df2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   18df6:	6958      	ldr	r0, [r3, #20]
}
   18df8:	4770      	bx	lr

00018dfa <flash_total_size_get>:
{
   18dfa:	b510      	push	{r4, lr}
    return flash_page_size_get() * flash_page_count_get();
   18dfc:	f7ff fff5 	bl	18dea <flash_page_size_get>
   18e00:	4604      	mov	r4, r0
   18e02:	f7ff fff6 	bl	18df2 <flash_page_count_get>
}
   18e06:	fb04 f000 	mul.w	r0, r4, r0
   18e0a:	bd10      	pop	{r4, pc}

00018e0c <is_page_aligned_check>:
{
   18e0c:	b510      	push	{r4, lr}
   18e0e:	4604      	mov	r4, r0
    return !(addr % flash_page_size_get());
   18e10:	f7ff ffeb 	bl	18dea <flash_page_size_get>
   18e14:	fbb4 f3f0 	udiv	r3, r4, r0
   18e18:	fb00 4013 	mls	r0, r0, r3, r4
}
   18e1c:	fab0 f080 	clz	r0, r0
   18e20:	0940      	lsrs	r0, r0, #5
   18e22:	bd10      	pop	{r4, pc}

00018e24 <partial_word_create>:
{
   18e24:	b500      	push	{lr}
   18e26:	b083      	sub	sp, #12
    byte_shift = addr % NVMC_BYTES_IN_WORD;
   18e28:	f000 0003 	and.w	r0, r0, #3
    value32 = 0xFFFFFFFF;
   18e2c:	f04f 33ff 	mov.w	r3, #4294967295
   18e30:	9301      	str	r3, [sp, #4]
    for (uint32_t i = 0; i < bytes_count; i++)
   18e32:	2300      	movs	r3, #0
   18e34:	e007      	b.n	18e46 <partial_word_create+0x22>
        ((uint8_t *)&value32)[byte_shift] = bytes[i];
   18e36:	f811 e003 	ldrb.w	lr, [r1, r3]
   18e3a:	f10d 0c04 	add.w	ip, sp, #4
   18e3e:	f80c e000 	strb.w	lr, [ip, r0]
        byte_shift++;
   18e42:	3001      	adds	r0, #1
    for (uint32_t i = 0; i < bytes_count; i++)
   18e44:	3301      	adds	r3, #1
   18e46:	4293      	cmp	r3, r2
   18e48:	d3f5      	bcc.n	18e36 <partial_word_create+0x12>
}
   18e4a:	9801      	ldr	r0, [sp, #4]
   18e4c:	b003      	add	sp, #12
   18e4e:	f85d fb04 	ldr.w	pc, [sp], #4

00018e52 <nvmc_words_write>:
{
   18e52:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   18e54:	4607      	mov	r7, r0
   18e56:	460e      	mov	r6, r1
   18e58:	4615      	mov	r5, r2
    for (uint32_t i = 0; i < num_words; i++)
   18e5a:	2400      	movs	r4, #0
   18e5c:	e006      	b.n	18e6c <nvmc_words_write+0x1a>
        nvmc_word_write(addr + (NVMC_BYTES_IN_WORD * i), ((uint32_t const *)src)[i]);
   18e5e:	f856 1024 	ldr.w	r1, [r6, r4, lsl #2]
   18e62:	eb07 0084 	add.w	r0, r7, r4, lsl #2
   18e66:	f7fb fd91 	bl	1498c <nvmc_word_write>
    for (uint32_t i = 0; i < num_words; i++)
   18e6a:	3401      	adds	r4, #1
   18e6c:	42ac      	cmp	r4, r5
   18e6e:	d3f6      	bcc.n	18e5e <nvmc_words_write+0xc>
}
   18e70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00018e72 <nrfx_nvmc_word_write>:

    nrfx_nvmc_word_write(aligned_addr, partial_word_create(addr, (const uint8_t *)&value, 2));
}

void nrfx_nvmc_word_write(uint32_t addr, uint32_t value)
{
   18e72:	b538      	push	{r3, r4, r5, lr}
   18e74:	4604      	mov	r4, r0
   18e76:	460d      	mov	r5, r1
    NRFX_ASSERT(is_valid_address(addr, true));
    NRFX_ASSERT(nrfx_is_word_aligned((void const *)addr));

    nvmc_write_mode_set();
   18e78:	f7fb fd78 	bl	1496c <nvmc_write_mode_set>

    nvmc_word_write(addr, value);
   18e7c:	4629      	mov	r1, r5
   18e7e:	4620      	mov	r0, r4
   18e80:	f7fb fd84 	bl	1498c <nvmc_word_write>

    nvmc_readonly_mode_set();
   18e84:	f7fb fd6a 	bl	1495c <nvmc_readonly_mode_set>
}
   18e88:	bd38      	pop	{r3, r4, r5, pc}

00018e8a <nrfx_nvmc_bytes_write>:

void nrfx_nvmc_bytes_write(uint32_t addr, void const * src, uint32_t num_bytes)
{
   18e8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   18e8e:	4604      	mov	r4, r0
   18e90:	460e      	mov	r6, r1
   18e92:	4615      	mov	r5, r2
    NRFX_ASSERT(is_valid_address(addr, true));

    nvmc_write_mode_set();
   18e94:	f7fb fd6a 	bl	1496c <nvmc_write_mode_set>

    uint8_t const * bytes_src = (uint8_t const *)src;

    uint32_t unaligned_bytes = addr % NVMC_BYTES_IN_WORD;
    if (unaligned_bytes != 0)
   18e98:	f014 0003 	ands.w	r0, r4, #3
   18e9c:	d012      	beq.n	18ec4 <nrfx_nvmc_bytes_write+0x3a>
    {
        uint32_t leading_bytes = NVMC_BYTES_IN_WORD - unaligned_bytes;
   18e9e:	f1c0 0704 	rsb	r7, r0, #4
        if (leading_bytes > num_bytes)
   18ea2:	42bd      	cmp	r5, r7
   18ea4:	d200      	bcs.n	18ea8 <nrfx_nvmc_bytes_write+0x1e>
        {
            leading_bytes = num_bytes;
   18ea6:	462f      	mov	r7, r5
        }

        nvmc_word_write(addr - unaligned_bytes,
   18ea8:	eba4 0800 	sub.w	r8, r4, r0
   18eac:	463a      	mov	r2, r7
   18eae:	4631      	mov	r1, r6
   18eb0:	4620      	mov	r0, r4
   18eb2:	f7ff ffb7 	bl	18e24 <partial_word_create>
   18eb6:	4601      	mov	r1, r0
   18eb8:	4640      	mov	r0, r8
   18eba:	f7fb fd67 	bl	1498c <nvmc_word_write>
                        partial_word_create(addr, bytes_src, leading_bytes));
        num_bytes -= leading_bytes;
   18ebe:	1bed      	subs	r5, r5, r7
        addr      += leading_bytes;
   18ec0:	443c      	add	r4, r7
        bytes_src += leading_bytes;
   18ec2:	443e      	add	r6, r7
    else
#endif
    {
        uint32_t word_count = num_bytes / NVMC_BYTES_IN_WORD;

        nvmc_words_write(addr, (uint32_t const *)bytes_src, word_count);
   18ec4:	08aa      	lsrs	r2, r5, #2
   18ec6:	4631      	mov	r1, r6
   18ec8:	4620      	mov	r0, r4
   18eca:	f7ff ffc2 	bl	18e52 <nvmc_words_write>

        addr += word_count * NVMC_BYTES_IN_WORD;
   18ece:	f025 0103 	bic.w	r1, r5, #3
   18ed2:	440c      	add	r4, r1
        bytes_src += word_count * NVMC_BYTES_IN_WORD;
   18ed4:	4431      	add	r1, r6
    }

    uint32_t trailing_bytes = num_bytes % NVMC_BYTES_IN_WORD;
    if (trailing_bytes != 0)
   18ed6:	f015 0203 	ands.w	r2, r5, #3
   18eda:	d103      	bne.n	18ee4 <nrfx_nvmc_bytes_write+0x5a>
    {
        nvmc_word_write(addr, partial_word_create(addr, bytes_src, trailing_bytes));
    }

    nvmc_readonly_mode_set();
   18edc:	f7fb fd3e 	bl	1495c <nvmc_readonly_mode_set>
}
   18ee0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        nvmc_word_write(addr, partial_word_create(addr, bytes_src, trailing_bytes));
   18ee4:	4620      	mov	r0, r4
   18ee6:	f7ff ff9d 	bl	18e24 <partial_word_create>
   18eea:	4601      	mov	r1, r0
   18eec:	4620      	mov	r0, r4
   18eee:	f7fb fd4d 	bl	1498c <nvmc_word_write>
   18ef2:	e7f3      	b.n	18edc <nrfx_nvmc_bytes_write+0x52>

00018ef4 <nrfx_nvmc_flash_size_get>:
    return (nrfx_is_word_aligned((void const *)addr) ? (uint16_t)(val32)
                                                     : (uint16_t)(val32 >> 16));
}

uint32_t nrfx_nvmc_flash_size_get(void)
{
   18ef4:	b508      	push	{r3, lr}
    return flash_total_size_get();
   18ef6:	f7ff ff80 	bl	18dfa <flash_total_size_get>
}
   18efa:	bd08      	pop	{r3, pc}

00018efc <nrfx_nvmc_flash_page_size_get>:

uint32_t nrfx_nvmc_flash_page_size_get(void)
{
   18efc:	b508      	push	{r3, lr}
    return flash_page_size_get();
   18efe:	f7ff ff74 	bl	18dea <flash_page_size_get>
}
   18f02:	bd08      	pop	{r3, pc}

00018f04 <nrfx_nvmc_flash_page_count_get>:

uint32_t nrfx_nvmc_flash_page_count_get(void)
{
   18f04:	b508      	push	{r3, lr}
    return flash_page_count_get();
   18f06:	f7ff ff74 	bl	18df2 <flash_page_count_get>
}
   18f0a:	bd08      	pop	{r3, pc}

00018f0c <nrf52_errata_122>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   18f0c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   18f10:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
            if (var1 == 0x08)
   18f14:	2b08      	cmp	r3, #8
   18f16:	d001      	beq.n	18f1c <nrf52_errata_122+0x10>
        return false;
   18f18:	2000      	movs	r0, #0
   18f1a:	4770      	bx	lr
                        return true;
   18f1c:	2001      	movs	r0, #1
}
   18f1e:	4770      	bx	lr

00018f20 <nrfx_qspi_write>:
{
   18f20:	b508      	push	{r3, lr}
    return qspi_xfer((void *)p_tx_buffer, tx_buffer_length, dst_address, NRFX_QSPI_STATE_WRITE);
   18f22:	2302      	movs	r3, #2
   18f24:	f7fb fd62 	bl	149ec <qspi_xfer>
}
   18f28:	bd08      	pop	{r3, pc}

00018f2a <nrfx_qspi_read>:
{
   18f2a:	b508      	push	{r3, lr}
    return qspi_xfer((void *)p_rx_buffer, rx_buffer_length, src_address, NRFX_QSPI_STATE_READ);
   18f2c:	2303      	movs	r3, #3
   18f2e:	f7fb fd5d 	bl	149ec <qspi_xfer>
}
   18f32:	bd08      	pop	{r3, pc}

00018f34 <nrfx_qspi_chip_erase>:
{
   18f34:	b508      	push	{r3, lr}
    return nrfx_qspi_erase(NRF_QSPI_ERASE_LEN_ALL, 0);
   18f36:	2100      	movs	r1, #0
   18f38:	2002      	movs	r0, #2
   18f3a:	f7fc f8bb 	bl	150b4 <nrfx_qspi_erase>
}
   18f3e:	bd08      	pop	{r3, pc}

00018f40 <SEGGER_RTT_Init>:
*  Function description
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
   18f40:	b508      	push	{r3, lr}
  _DoInit();
   18f42:	f7fc f913 	bl	1516c <_DoInit>
}
   18f46:	bd08      	pop	{r3, pc}

00018f48 <rtt_init>:
 */

K_MUTEX_DEFINE(rtt_term_mutex);

static int rtt_init(const struct device *unused)
{
   18f48:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	SEGGER_RTT_Init();
   18f4a:	f7ff fff9 	bl	18f40 <SEGGER_RTT_Init>

	return 0;
}
   18f4e:	2000      	movs	r0, #0
   18f50:	bd08      	pop	{r3, pc}

00018f52 <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
   18f52:	b148      	cbz	r0, 18f68 <z_device_is_ready+0x16>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
   18f54:	68c3      	ldr	r3, [r0, #12]
   18f56:	8818      	ldrh	r0, [r3, #0]
   18f58:	f3c0 0008 	ubfx	r0, r0, #0, #9
   18f5c:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
   18f60:	bf14      	ite	ne
   18f62:	2000      	movne	r0, #0
   18f64:	2001      	moveq	r0, #1
   18f66:	4770      	bx	lr
		return false;
   18f68:	2000      	movs	r0, #0
}
   18f6a:	4770      	bx	lr

00018f6c <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   18f6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   18f6e:	4605      	mov	r5, r0
   18f70:	460e      	mov	r6, r1
	__asm__ volatile(
   18f72:	f04f 0320 	mov.w	r3, #32
   18f76:	f3ef 8711 	mrs	r7, BASEPRI
   18f7a:	f383 8812 	msr	BASEPRI_MAX, r3
   18f7e:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
   18f82:	f7fd f881 	bl	16088 <z_impl_z_current_get>
   18f86:	4604      	mov	r4, r0

#ifndef CONFIG_XTENSA
	coredump(reason, esf, thread);
#endif

	k_sys_fatal_error_handler(reason, esf);
   18f88:	4631      	mov	r1, r6
   18f8a:	4628      	mov	r0, r5
   18f8c:	f7ff fcd5 	bl	1893a <k_sys_fatal_error_handler>
	__asm__ volatile(
   18f90:	f387 8811 	msr	BASEPRI, r7
   18f94:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
   18f98:	4620      	mov	r0, r4
   18f9a:	f7f9 f825 	bl	11fe8 <z_impl_k_thread_abort>
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
   18f9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00018fa0 <z_early_memset>:
{
   18fa0:	b508      	push	{r3, lr}
	(void) memset(dst, c, n);
   18fa2:	f7fe fe4d 	bl	17c40 <memset>
}
   18fa6:	bd08      	pop	{r3, pc}

00018fa8 <z_early_memcpy>:
{
   18fa8:	b508      	push	{r3, lr}
	(void) memcpy(dst, src, n);
   18faa:	f7fe fe1a 	bl	17be2 <memcpy>
}
   18fae:	bd08      	pop	{r3, pc}

00018fb0 <create_free_list>:
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   18fb0:	68c2      	ldr	r2, [r0, #12]
   18fb2:	6903      	ldr	r3, [r0, #16]
   18fb4:	431a      	orrs	r2, r3
   18fb6:	f012 0203 	ands.w	r2, r2, #3
   18fba:	d10d      	bne.n	18fd8 <create_free_list+0x28>
	slab->free_list = NULL;
   18fbc:	2100      	movs	r1, #0
   18fbe:	6141      	str	r1, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   18fc0:	e005      	b.n	18fce <create_free_list+0x1e>
		*(char **)p = slab->free_list;
   18fc2:	6941      	ldr	r1, [r0, #20]
   18fc4:	6019      	str	r1, [r3, #0]
		slab->free_list = p;
   18fc6:	6143      	str	r3, [r0, #20]
		p += slab->block_size;
   18fc8:	68c1      	ldr	r1, [r0, #12]
   18fca:	440b      	add	r3, r1
	for (j = 0U; j < slab->num_blocks; j++) {
   18fcc:	3201      	adds	r2, #1
   18fce:	6881      	ldr	r1, [r0, #8]
   18fd0:	4291      	cmp	r1, r2
   18fd2:	d8f6      	bhi.n	18fc2 <create_free_list+0x12>
	return 0;
   18fd4:	2000      	movs	r0, #0
   18fd6:	4770      	bx	lr
		return -EINVAL;
   18fd8:	f06f 0015 	mvn.w	r0, #21
}
   18fdc:	4770      	bx	lr

00018fde <k_mem_slab_init>:
{
   18fde:	b510      	push	{r4, lr}
   18fe0:	4604      	mov	r4, r0
	slab->num_blocks = num_blocks;
   18fe2:	6083      	str	r3, [r0, #8]
	slab->block_size = block_size;
   18fe4:	60c2      	str	r2, [r0, #12]
	slab->buffer = buffer;
   18fe6:	6101      	str	r1, [r0, #16]
	slab->num_used = 0U;
   18fe8:	2300      	movs	r3, #0
   18fea:	6183      	str	r3, [r0, #24]
	rc = create_free_list(slab);
   18fec:	f7ff ffe0 	bl	18fb0 <create_free_list>
	if (rc < 0) {
   18ff0:	2800      	cmp	r0, #0
   18ff2:	db01      	blt.n	18ff8 <k_mem_slab_init+0x1a>
	list->head = (sys_dnode_t *)list;
   18ff4:	6024      	str	r4, [r4, #0]
	list->tail = (sys_dnode_t *)list;
   18ff6:	6064      	str	r4, [r4, #4]
}
   18ff8:	bd10      	pop	{r4, pc}

00018ffa <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   18ffa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   18ffc:	4604      	mov	r4, r0
   18ffe:	460d      	mov	r5, r1
	__asm__ volatile(
   19000:	f04f 0320 	mov.w	r3, #32
   19004:	f3ef 8611 	mrs	r6, BASEPRI
   19008:	f383 8812 	msr	BASEPRI_MAX, r3
   1900c:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
   19010:	6943      	ldr	r3, [r0, #20]
   19012:	b163      	cbz	r3, 1902e <k_mem_slab_free+0x34>
			z_ready_thread(pending_thread);
			z_reschedule(&slab->lock, key);
			return;
		}
	}
	**(char ***) mem = slab->free_list;
   19014:	682b      	ldr	r3, [r5, #0]
   19016:	6962      	ldr	r2, [r4, #20]
   19018:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
   1901a:	682b      	ldr	r3, [r5, #0]
   1901c:	6163      	str	r3, [r4, #20]
	slab->num_used--;
   1901e:	69a3      	ldr	r3, [r4, #24]
   19020:	3b01      	subs	r3, #1
   19022:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
   19024:	f386 8811 	msr	BASEPRI, r6
   19028:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
   1902c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1902e:	f100 0708 	add.w	r7, r0, #8
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
   19032:	f000 f939 	bl	192a8 <z_unpend_first_thread>
		if (pending_thread != NULL) {
   19036:	2800      	cmp	r0, #0
   19038:	d0ec      	beq.n	19014 <k_mem_slab_free+0x1a>
			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
   1903a:	682a      	ldr	r2, [r5, #0]
   1903c:	2100      	movs	r1, #0
   1903e:	f8c0 10ac 	str.w	r1, [r0, #172]	; 0xac
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   19042:	6142      	str	r2, [r0, #20]
			z_ready_thread(pending_thread);
   19044:	f000 f890 	bl	19168 <z_ready_thread>
			z_reschedule(&slab->lock, key);
   19048:	4631      	mov	r1, r6
   1904a:	4638      	mov	r0, r7
   1904c:	f7fc fca0 	bl	15990 <z_reschedule>
			return;
   19050:	e7ec      	b.n	1902c <k_mem_slab_free+0x32>

00019052 <setup_thread_stack>:
{
   19052:	b410      	push	{r4}
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   19054:	3207      	adds	r2, #7
   19056:	f022 0207 	bic.w	r2, r2, #7
   1905a:	f102 0340 	add.w	r3, r2, #64	; 0x40

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
   1905e:	f101 0440 	add.w	r4, r1, #64	; 0x40
	new_thread->stack_info.start = (uintptr_t)stack_buf_start;
   19062:	f8c0 4098 	str.w	r4, [r0, #152]	; 0x98
	new_thread->stack_info.size = stack_buf_size;
   19066:	f8c0 209c 	str.w	r2, [r0, #156]	; 0x9c
	new_thread->stack_info.delta = delta;
   1906a:	2200      	movs	r2, #0
   1906c:	f8c0 20a0 	str.w	r2, [r0, #160]	; 0xa0
}
   19070:	18c8      	adds	r0, r1, r3
   19072:	bc10      	pop	{r4}
   19074:	4770      	bx	lr

00019076 <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   19076:	f3ef 8005 	mrs	r0, IPSR
}
   1907a:	3800      	subs	r0, #0
   1907c:	bf18      	it	ne
   1907e:	2001      	movne	r0, #1
   19080:	4770      	bx	lr

00019082 <z_impl_k_thread_start>:
{
   19082:	b508      	push	{r3, lr}
	z_sched_start(thread);
   19084:	f7fc fdd2 	bl	15c2c <z_sched_start>
}
   19088:	bd08      	pop	{r3, pc}

0001908a <z_init_thread_base>:
#endif

void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
   1908a:	b410      	push	{r4}
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
   1908c:	2400      	movs	r4, #0
   1908e:	6084      	str	r4, [r0, #8]
	thread_base->user_options = (uint8_t)options;
   19090:	7303      	strb	r3, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
   19092:	7342      	strb	r2, [r0, #13]

	thread_base->prio = priority;
   19094:	7381      	strb	r1, [r0, #14]

	thread_base->sched_locked = 0U;
   19096:	73c4      	strb	r4, [r0, #15]
	node->next = NULL;
   19098:	6184      	str	r4, [r0, #24]
	node->prev = NULL;
   1909a:	61c4      	str	r4, [r0, #28]
#endif

	/* swap_data does not need to be initialized */

	z_init_thread_timeout(thread_base);
}
   1909c:	bc10      	pop	{r4}
   1909e:	4770      	bx	lr

000190a0 <z_pm_save_idle_exit>:
{
   190a0:	b508      	push	{r3, lr}
	pm_system_resume();
   190a2:	f7f8 fa53 	bl	1154c <pm_system_resume>
	sys_clock_idle_exit();
   190a6:	f7ff fbb4 	bl	18812 <sys_clock_idle_exit>
}
   190aa:	bd08      	pop	{r3, pc}

000190ac <new_prio_for_inheritance>:
	int new_prio = z_is_prio_higher(target, limit) ? target : limit;
   190ac:	4288      	cmp	r0, r1
   190ae:	da00      	bge.n	190b2 <new_prio_for_inheritance+0x6>
   190b0:	4601      	mov	r1, r0
	return z_is_under_prio_ceiling(prio) ? prio : CONFIG_PRIORITY_CEILING;
   190b2:	f111 0f7f 	cmn.w	r1, #127	; 0x7f
   190b6:	db01      	blt.n	190bc <new_prio_for_inheritance+0x10>
   190b8:	4608      	mov	r0, r1
   190ba:	4770      	bx	lr
   190bc:	f06f 007e 	mvn.w	r0, #126	; 0x7e
}
   190c0:	4770      	bx	lr

000190c2 <adjust_owner_prio>:
{
   190c2:	b508      	push	{r3, lr}
	if (mutex->owner->base.prio != new_prio) {
   190c4:	6880      	ldr	r0, [r0, #8]
   190c6:	f990 300e 	ldrsb.w	r3, [r0, #14]
   190ca:	428b      	cmp	r3, r1
   190cc:	d101      	bne.n	190d2 <adjust_owner_prio+0x10>
	return false;
   190ce:	2000      	movs	r0, #0
}
   190d0:	bd08      	pop	{r3, pc}
		return z_set_prio(mutex->owner, new_prio);
   190d2:	f7fc fdf9 	bl	15cc8 <z_set_prio>
   190d6:	e7fb      	b.n	190d0 <adjust_owner_prio+0xe>

000190d8 <z_impl_k_mutex_init>:
{
   190d8:	4603      	mov	r3, r0
	mutex->owner = NULL;
   190da:	2000      	movs	r0, #0
   190dc:	6098      	str	r0, [r3, #8]
	mutex->lock_count = 0U;
   190de:	60d8      	str	r0, [r3, #12]
	list->head = (sys_dnode_t *)list;
   190e0:	601b      	str	r3, [r3, #0]
	list->tail = (sys_dnode_t *)list;
   190e2:	605b      	str	r3, [r3, #4]
}
   190e4:	4770      	bx	lr

000190e6 <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
   190e6:	b13a      	cbz	r2, 190f8 <z_impl_k_sem_init+0x12>
   190e8:	428a      	cmp	r2, r1
   190ea:	d308      	bcc.n	190fe <z_impl_k_sem_init+0x18>
	sem->count = initial_count;
   190ec:	6081      	str	r1, [r0, #8]
	sem->limit = limit;
   190ee:	60c2      	str	r2, [r0, #12]
	list->head = (sys_dnode_t *)list;
   190f0:	6000      	str	r0, [r0, #0]
	list->tail = (sys_dnode_t *)list;
   190f2:	6040      	str	r0, [r0, #4]
	return 0;
   190f4:	2000      	movs	r0, #0
   190f6:	4770      	bx	lr
		return -EINVAL;
   190f8:	f06f 0015 	mvn.w	r0, #21
   190fc:	4770      	bx	lr
   190fe:	f06f 0015 	mvn.w	r0, #21
}
   19102:	4770      	bx	lr

00019104 <thread_active_elsewhere>:
}
   19104:	2000      	movs	r0, #0
   19106:	4770      	bx	lr

00019108 <pended_on_thread>:
}
   19108:	6880      	ldr	r0, [r0, #8]
   1910a:	4770      	bx	lr

0001910c <z_sched_prio_cmp>:
	int32_t b1 = thread_1->base.prio;
   1910c:	f990 300e 	ldrsb.w	r3, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   19110:	f991 000e 	ldrsb.w	r0, [r1, #14]
	if (b1 != b2) {
   19114:	4283      	cmp	r3, r0
   19116:	d001      	beq.n	1911c <z_sched_prio_cmp+0x10>
		return b2 - b1;
   19118:	1ac0      	subs	r0, r0, r3
   1911a:	4770      	bx	lr
	return 0;
   1911c:	2000      	movs	r0, #0
}
   1911e:	4770      	bx	lr

00019120 <z_reschedule_irqlock>:
{
   19120:	b508      	push	{r3, lr}
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   19122:	4603      	mov	r3, r0
   19124:	b920      	cbnz	r0, 19130 <z_reschedule_irqlock+0x10>
   19126:	f3ef 8205 	mrs	r2, IPSR
   1912a:	b942      	cbnz	r2, 1913e <z_reschedule_irqlock+0x1e>
   1912c:	2201      	movs	r2, #1
   1912e:	e000      	b.n	19132 <z_reschedule_irqlock+0x12>
   19130:	2200      	movs	r2, #0
	if (resched(key)) {
   19132:	b932      	cbnz	r2, 19142 <z_reschedule_irqlock+0x22>
   19134:	f383 8811 	msr	BASEPRI, r3
   19138:	f3bf 8f6f 	isb	sy
}
   1913c:	bd08      	pop	{r3, pc}
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   1913e:	2200      	movs	r2, #0
   19140:	e7f7      	b.n	19132 <z_reschedule_irqlock+0x12>
	ret = arch_swap(key);
   19142:	4618      	mov	r0, r3
   19144:	f7f8 fcba 	bl	11abc <arch_swap>
	return ret;
   19148:	e7f8      	b.n	1913c <z_reschedule_irqlock+0x1c>

0001914a <z_priq_dumb_remove>:
 * @param node the node to remove
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
   1914a:	684a      	ldr	r2, [r1, #4]
	sys_dnode_t *const next = node->next;
   1914c:	680b      	ldr	r3, [r1, #0]

	prev->next = next;
   1914e:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   19150:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   19152:	2300      	movs	r3, #0
   19154:	600b      	str	r3, [r1, #0]
	node->prev = NULL;
   19156:	604b      	str	r3, [r1, #4]
}
   19158:	4770      	bx	lr

0001915a <z_priq_dumb_best>:
{
   1915a:	4603      	mov	r3, r0
	return list->head == list;
   1915c:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1915e:	4283      	cmp	r3, r0
   19160:	d000      	beq.n	19164 <z_priq_dumb_best+0xa>
}
   19162:	4770      	bx	lr
	struct k_thread *thread = NULL;
   19164:	2000      	movs	r0, #0
	return thread;
   19166:	e7fc      	b.n	19162 <z_priq_dumb_best+0x8>

00019168 <z_ready_thread>:
{
   19168:	b538      	push	{r3, r4, r5, lr}
   1916a:	4604      	mov	r4, r0
	LOCKED(&sched_spinlock) {
   1916c:	2300      	movs	r3, #0
	__asm__ volatile(
   1916e:	f04f 0220 	mov.w	r2, #32
   19172:	f3ef 8511 	mrs	r5, BASEPRI
   19176:	f382 8812 	msr	BASEPRI_MAX, r2
   1917a:	f3bf 8f6f 	isb	sy
   1917e:	e004      	b.n	1918a <z_ready_thread+0x22>
	__asm__ volatile(
   19180:	f385 8811 	msr	BASEPRI, r5
   19184:	f3bf 8f6f 	isb	sy
   19188:	2301      	movs	r3, #1
   1918a:	b943      	cbnz	r3, 1919e <z_ready_thread+0x36>
		if (!thread_active_elsewhere(thread)) {
   1918c:	4620      	mov	r0, r4
   1918e:	f7ff ffb9 	bl	19104 <thread_active_elsewhere>
   19192:	2800      	cmp	r0, #0
   19194:	d1f4      	bne.n	19180 <z_ready_thread+0x18>
			ready_thread(thread);
   19196:	4620      	mov	r0, r4
   19198:	f7fc fd08 	bl	15bac <ready_thread>
   1919c:	e7f0      	b.n	19180 <z_ready_thread+0x18>
}
   1919e:	bd38      	pop	{r3, r4, r5, pc}

000191a0 <z_thread_timeout>:
{
   191a0:	b570      	push	{r4, r5, r6, lr}
   191a2:	4604      	mov	r4, r0
	struct k_thread *thread = CONTAINER_OF(timeout,
   191a4:	f1a0 0518 	sub.w	r5, r0, #24
	LOCKED(&sched_spinlock) {
   191a8:	2300      	movs	r3, #0
	__asm__ volatile(
   191aa:	f04f 0220 	mov.w	r2, #32
   191ae:	f3ef 8611 	mrs	r6, BASEPRI
   191b2:	f382 8812 	msr	BASEPRI_MAX, r2
   191b6:	f3bf 8f6f 	isb	sy
   191ba:	e011      	b.n	191e0 <z_thread_timeout+0x40>
	thread->base.thread_state &= ~_THREAD_PRESTART;
   191bc:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
   191c0:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
   191c4:	f804 3c0b 	strb.w	r3, [r4, #-11]
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   191c8:	f023 0310 	bic.w	r3, r3, #16
   191cc:	f804 3c0b 	strb.w	r3, [r4, #-11]
			ready_thread(thread);
   191d0:	4628      	mov	r0, r5
   191d2:	f7fc fceb 	bl	15bac <ready_thread>
	__asm__ volatile(
   191d6:	f386 8811 	msr	BASEPRI, r6
   191da:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   191de:	2301      	movs	r3, #1
   191e0:	b9ab      	cbnz	r3, 1920e <z_thread_timeout+0x6e>
		bool killed = ((thread->base.thread_state & _THREAD_DEAD) ||
   191e2:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
		if (!killed) {
   191e6:	f013 0f28 	tst.w	r3, #40	; 0x28
   191ea:	d1f4      	bne.n	191d6 <z_thread_timeout+0x36>
			if (thread->base.pended_on != NULL) {
   191ec:	f854 3c10 	ldr.w	r3, [r4, #-16]
   191f0:	2b00      	cmp	r3, #0
   191f2:	d0e3      	beq.n	191bc <z_thread_timeout+0x1c>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
   191f4:	4628      	mov	r0, r5
   191f6:	f7ff ff87 	bl	19108 <pended_on_thread>
   191fa:	4629      	mov	r1, r5
   191fc:	f7ff ffa5 	bl	1914a <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   19200:	7b6b      	ldrb	r3, [r5, #13]
   19202:	f023 0302 	bic.w	r3, r3, #2
   19206:	736b      	strb	r3, [r5, #13]
	thread->base.pended_on = NULL;
   19208:	2300      	movs	r3, #0
   1920a:	60ab      	str	r3, [r5, #8]
}
   1920c:	e7d6      	b.n	191bc <z_thread_timeout+0x1c>
}
   1920e:	bd70      	pop	{r4, r5, r6, pc}

00019210 <add_to_waitq_locked>:
{
   19210:	b570      	push	{r4, r5, r6, lr}
   19212:	4605      	mov	r5, r0
   19214:	460e      	mov	r6, r1
	unready_thread(thread);
   19216:	f7fc fd27 	bl	15c68 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   1921a:	7b6b      	ldrb	r3, [r5, #13]
   1921c:	f043 0302 	orr.w	r3, r3, #2
   19220:	736b      	strb	r3, [r5, #13]
	if (wait_q != NULL) {
   19222:	b1b6      	cbz	r6, 19252 <add_to_waitq_locked+0x42>
		thread->base.pended_on = wait_q;
   19224:	60ae      	str	r6, [r5, #8]
	return list->head == list;
   19226:	6834      	ldr	r4, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   19228:	42a6      	cmp	r6, r4
   1922a:	d019      	beq.n	19260 <add_to_waitq_locked+0x50>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1922c:	b164      	cbz	r4, 19248 <add_to_waitq_locked+0x38>
		if (z_sched_prio_cmp(thread, t) > 0) {
   1922e:	4621      	mov	r1, r4
   19230:	4628      	mov	r0, r5
   19232:	f7ff ff6b 	bl	1910c <z_sched_prio_cmp>
   19236:	2800      	cmp	r0, #0
   19238:	dc0c      	bgt.n	19254 <add_to_waitq_locked+0x44>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1923a:	b12c      	cbz	r4, 19248 <add_to_waitq_locked+0x38>
	return (node == list->tail) ? NULL : node->next;
   1923c:	6873      	ldr	r3, [r6, #4]
   1923e:	429c      	cmp	r4, r3
   19240:	d002      	beq.n	19248 <add_to_waitq_locked+0x38>
   19242:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   19244:	2c00      	cmp	r4, #0
   19246:	d1f1      	bne.n	1922c <add_to_waitq_locked+0x1c>
	sys_dnode_t *const tail = list->tail;
   19248:	6873      	ldr	r3, [r6, #4]
	node->next = list;
   1924a:	602e      	str	r6, [r5, #0]
	node->prev = tail;
   1924c:	606b      	str	r3, [r5, #4]
	tail->next = node;
   1924e:	601d      	str	r5, [r3, #0]
	list->tail = node;
   19250:	6075      	str	r5, [r6, #4]
}
   19252:	bd70      	pop	{r4, r5, r6, pc}
	sys_dnode_t *const prev = successor->prev;
   19254:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
   19256:	606b      	str	r3, [r5, #4]
	node->next = successor;
   19258:	602c      	str	r4, [r5, #0]
	prev->next = node;
   1925a:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   1925c:	6065      	str	r5, [r4, #4]
}
   1925e:	e7f8      	b.n	19252 <add_to_waitq_locked+0x42>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   19260:	2400      	movs	r4, #0
   19262:	e7e3      	b.n	1922c <add_to_waitq_locked+0x1c>

00019264 <pend>:
{
   19264:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   19268:	4605      	mov	r5, r0
   1926a:	460e      	mov	r6, r1
   1926c:	4691      	mov	r9, r2
   1926e:	4698      	mov	r8, r3
	LOCKED(&sched_spinlock) {
   19270:	2400      	movs	r4, #0
	__asm__ volatile(
   19272:	f04f 0320 	mov.w	r3, #32
   19276:	f3ef 8711 	mrs	r7, BASEPRI
   1927a:	f383 8812 	msr	BASEPRI_MAX, r3
   1927e:	f3bf 8f6f 	isb	sy
   19282:	e008      	b.n	19296 <pend+0x32>
		add_to_waitq_locked(thread, wait_q);
   19284:	4631      	mov	r1, r6
   19286:	4628      	mov	r0, r5
   19288:	f7ff ffc2 	bl	19210 <add_to_waitq_locked>
	__asm__ volatile(
   1928c:	f387 8811 	msr	BASEPRI, r7
   19290:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   19294:	2401      	movs	r4, #1
   19296:	2c00      	cmp	r4, #0
   19298:	d0f4      	beq.n	19284 <pend+0x20>
	add_thread_timeout(thread, timeout);
   1929a:	464a      	mov	r2, r9
   1929c:	4643      	mov	r3, r8
   1929e:	4628      	mov	r0, r5
   192a0:	f7fc fb18 	bl	158d4 <add_thread_timeout>
}
   192a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000192a8 <z_unpend_first_thread>:
{
   192a8:	b570      	push	{r4, r5, r6, lr}
   192aa:	4605      	mov	r5, r0
	LOCKED(&sched_spinlock) {
   192ac:	2300      	movs	r3, #0
	__asm__ volatile(
   192ae:	f04f 0220 	mov.w	r2, #32
   192b2:	f3ef 8611 	mrs	r6, BASEPRI
   192b6:	f382 8812 	msr	BASEPRI_MAX, r2
   192ba:	f3bf 8f6f 	isb	sy
	struct k_thread *thread = NULL;
   192be:	461c      	mov	r4, r3
   192c0:	e004      	b.n	192cc <z_unpend_first_thread+0x24>
	__asm__ volatile(
   192c2:	f386 8811 	msr	BASEPRI, r6
   192c6:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   192ca:	2301      	movs	r3, #1
   192cc:	b9ab      	cbnz	r3, 192fa <z_unpend_first_thread+0x52>
		thread = _priq_wait_best(&wait_q->waitq);
   192ce:	4628      	mov	r0, r5
   192d0:	f7ff ff43 	bl	1915a <z_priq_dumb_best>
		if (thread != NULL) {
   192d4:	4604      	mov	r4, r0
   192d6:	2800      	cmp	r0, #0
   192d8:	d0f3      	beq.n	192c2 <z_unpend_first_thread+0x1a>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
   192da:	f7ff ff15 	bl	19108 <pended_on_thread>
   192de:	4621      	mov	r1, r4
   192e0:	f7ff ff33 	bl	1914a <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   192e4:	7b63      	ldrb	r3, [r4, #13]
   192e6:	f023 0302 	bic.w	r3, r3, #2
   192ea:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
   192ec:	2300      	movs	r3, #0
   192ee:	60a3      	str	r3, [r4, #8]
	return z_abort_timeout(&thread->base.timeout);
   192f0:	f104 0018 	add.w	r0, r4, #24
   192f4:	f000 f81e 	bl	19334 <z_abort_timeout>
   192f8:	e7e3      	b.n	192c2 <z_unpend_first_thread+0x1a>
}
   192fa:	4620      	mov	r0, r4
   192fc:	bd70      	pop	{r4, r5, r6, pc}

000192fe <init_ready_q>:
	sys_dlist_init(&rq->runq);
   192fe:	1d03      	adds	r3, r0, #4
	list->head = (sys_dnode_t *)list;
   19300:	6043      	str	r3, [r0, #4]
	list->tail = (sys_dnode_t *)list;
   19302:	6083      	str	r3, [r0, #8]
}
   19304:	4770      	bx	lr

00019306 <remove_timeout>:
{
   19306:	b510      	push	{r4, lr}
   19308:	4604      	mov	r4, r0
	if (next(t) != NULL) {
   1930a:	f7fc ff1f 	bl	1614c <next>
   1930e:	b148      	cbz	r0, 19324 <remove_timeout+0x1e>
   19310:	4602      	mov	r2, r0
		next(t)->dticks += t->dticks;
   19312:	6920      	ldr	r0, [r4, #16]
   19314:	6961      	ldr	r1, [r4, #20]
   19316:	6913      	ldr	r3, [r2, #16]
   19318:	181b      	adds	r3, r3, r0
   1931a:	6950      	ldr	r0, [r2, #20]
   1931c:	eb41 0100 	adc.w	r1, r1, r0
   19320:	6113      	str	r3, [r2, #16]
   19322:	6151      	str	r1, [r2, #20]
	sys_dnode_t *const prev = node->prev;
   19324:	6862      	ldr	r2, [r4, #4]
	sys_dnode_t *const next = node->next;
   19326:	6823      	ldr	r3, [r4, #0]
	prev->next = next;
   19328:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   1932a:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1932c:	2300      	movs	r3, #0
   1932e:	6023      	str	r3, [r4, #0]
	node->prev = NULL;
   19330:	6063      	str	r3, [r4, #4]
}
   19332:	bd10      	pop	{r4, pc}

00019334 <z_abort_timeout>:
{
   19334:	b570      	push	{r4, r5, r6, lr}
   19336:	4604      	mov	r4, r0
	LOCKED(&timeout_lock) {
   19338:	2300      	movs	r3, #0
	__asm__ volatile(
   1933a:	f04f 0220 	mov.w	r2, #32
   1933e:	f3ef 8611 	mrs	r6, BASEPRI
   19342:	f382 8812 	msr	BASEPRI_MAX, r2
   19346:	f3bf 8f6f 	isb	sy
	int ret = -EINVAL;
   1934a:	f06f 0015 	mvn.w	r0, #21
   1934e:	e004      	b.n	1935a <z_abort_timeout+0x26>
	__asm__ volatile(
   19350:	f386 8811 	msr	BASEPRI, r6
   19354:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
   19358:	2301      	movs	r3, #1
   1935a:	461d      	mov	r5, r3
   1935c:	b93b      	cbnz	r3, 1936e <z_abort_timeout+0x3a>
	return node->next != NULL;
   1935e:	6823      	ldr	r3, [r4, #0]
		if (sys_dnode_is_linked(&to->node)) {
   19360:	2b00      	cmp	r3, #0
   19362:	d0f5      	beq.n	19350 <z_abort_timeout+0x1c>
			remove_timeout(to);
   19364:	4620      	mov	r0, r4
   19366:	f7ff ffce 	bl	19306 <remove_timeout>
			ret = 0;
   1936a:	4628      	mov	r0, r5
   1936c:	e7f0      	b.n	19350 <z_abort_timeout+0x1c>
}
   1936e:	bd70      	pop	{r4, r5, r6, pc}

00019370 <z_get_next_timeout_expiry>:
{
   19370:	b510      	push	{r4, lr}
	LOCKED(&timeout_lock) {
   19372:	2300      	movs	r3, #0
	__asm__ volatile(
   19374:	f04f 0220 	mov.w	r2, #32
   19378:	f3ef 8411 	mrs	r4, BASEPRI
   1937c:	f382 8812 	msr	BASEPRI_MAX, r2
   19380:	f3bf 8f6f 	isb	sy
	int32_t ret = (int32_t) K_TICKS_FOREVER;
   19384:	f04f 30ff 	mov.w	r0, #4294967295
   19388:	e006      	b.n	19398 <z_get_next_timeout_expiry+0x28>
		ret = next_timeout();
   1938a:	f7fc fef7 	bl	1617c <next_timeout>
	__asm__ volatile(
   1938e:	f384 8811 	msr	BASEPRI, r4
   19392:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
   19396:	2301      	movs	r3, #1
   19398:	2b00      	cmp	r3, #0
   1939a:	d0f6      	beq.n	1938a <z_get_next_timeout_expiry+0x1a>
}
   1939c:	bd10      	pop	{r4, pc}

0001939e <z_set_timeout_expiry>:
{
   1939e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   193a0:	4605      	mov	r5, r0
   193a2:	460f      	mov	r7, r1
	LOCKED(&timeout_lock) {
   193a4:	2300      	movs	r3, #0
	__asm__ volatile(
   193a6:	f04f 0220 	mov.w	r2, #32
   193aa:	f3ef 8611 	mrs	r6, BASEPRI
   193ae:	f382 8812 	msr	BASEPRI_MAX, r2
   193b2:	f3bf 8f6f 	isb	sy
   193b6:	e00a      	b.n	193ce <z_set_timeout_expiry+0x30>
			      || (ticks <= next_to);
   193b8:	2401      	movs	r4, #1
		bool sooner = (next_to == K_TICKS_FOREVER)
   193ba:	f004 0401 	and.w	r4, r4, #1
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
   193be:	2801      	cmp	r0, #1
   193c0:	dd00      	ble.n	193c4 <z_set_timeout_expiry+0x26>
   193c2:	b97c      	cbnz	r4, 193e4 <z_set_timeout_expiry+0x46>
	__asm__ volatile(
   193c4:	f386 8811 	msr	BASEPRI, r6
   193c8:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
   193cc:	2301      	movs	r3, #1
   193ce:	461c      	mov	r4, r3
   193d0:	b97b      	cbnz	r3, 193f2 <z_set_timeout_expiry+0x54>
		int next_to = next_timeout();
   193d2:	f7fc fed3 	bl	1617c <next_timeout>
			      || (ticks <= next_to);
   193d6:	f1b0 3fff 	cmp.w	r0, #4294967295
   193da:	d0ed      	beq.n	193b8 <z_set_timeout_expiry+0x1a>
   193dc:	42a8      	cmp	r0, r5
   193de:	dbec      	blt.n	193ba <z_set_timeout_expiry+0x1c>
   193e0:	2401      	movs	r4, #1
   193e2:	e7ea      	b.n	193ba <z_set_timeout_expiry+0x1c>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
   193e4:	4639      	mov	r1, r7
   193e6:	42a8      	cmp	r0, r5
   193e8:	bfa8      	it	ge
   193ea:	4628      	movge	r0, r5
   193ec:	f7fa f968 	bl	136c0 <sys_clock_set_timeout>
   193f0:	e7e8      	b.n	193c4 <z_set_timeout_expiry+0x26>
}
   193f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000193f4 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
   193f4:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
   193f6:	f7fc ffd5 	bl	163a4 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
   193fa:	bd08      	pop	{r3, pc}

000193fc <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
   193fc:	b900      	cbnz	r0, 19400 <z_impl_k_busy_wait+0x4>
   193fe:	4770      	bx	lr
{
   19400:	b508      	push	{r3, lr}
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
   19402:	f7f8 feff 	bl	12204 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
   19406:	bd08      	pop	{r3, pc}

00019408 <sys_clock_timeout_end_calc>:
 */
uint64_t sys_clock_timeout_end_calc(k_timeout_t timeout)
{
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   19408:	f1b1 3fff 	cmp.w	r1, #4294967295
   1940c:	bf08      	it	eq
   1940e:	f1b0 3fff 	cmpeq.w	r0, #4294967295
   19412:	d021      	beq.n	19458 <sys_clock_timeout_end_calc+0x50>
{
   19414:	b538      	push	{r3, r4, r5, lr}
   19416:	4605      	mov	r5, r0
   19418:	460c      	mov	r4, r1
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1941a:	ea51 0300 	orrs.w	r3, r1, r0
   1941e:	d009      	beq.n	19434 <sys_clock_timeout_end_calc+0x2c>
		return sys_clock_tick_get();
	} else {

		dt = timeout.ticks;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
   19420:	f06f 0301 	mvn.w	r3, #1
   19424:	1a18      	subs	r0, r3, r0
   19426:	f04f 33ff 	mov.w	r3, #4294967295
   1942a:	eb63 0101 	sbc.w	r1, r3, r1
   1942e:	2900      	cmp	r1, #0
   19430:	db03      	blt.n	1943a <sys_clock_timeout_end_calc+0x32>
			return Z_TICK_ABS(dt);
		}
		return sys_clock_tick_get() + MAX(1, dt);
	}
}
   19432:	bd38      	pop	{r3, r4, r5, pc}
		return sys_clock_tick_get();
   19434:	f7fc ffb6 	bl	163a4 <sys_clock_tick_get>
   19438:	e7fb      	b.n	19432 <sys_clock_timeout_end_calc+0x2a>
		return sys_clock_tick_get() + MAX(1, dt);
   1943a:	f7fc ffb3 	bl	163a4 <sys_clock_tick_get>
   1943e:	4603      	mov	r3, r0
   19440:	4628      	mov	r0, r5
   19442:	4622      	mov	r2, r4
   19444:	2d01      	cmp	r5, #1
   19446:	f174 0400 	sbcs.w	r4, r4, #0
   1944a:	da01      	bge.n	19450 <sys_clock_timeout_end_calc+0x48>
   1944c:	2001      	movs	r0, #1
   1944e:	2200      	movs	r2, #0
   19450:	1818      	adds	r0, r3, r0
   19452:	eb41 0102 	adc.w	r1, r1, r2
   19456:	e7ec      	b.n	19432 <sys_clock_timeout_end_calc+0x2a>
		return UINT64_MAX;
   19458:	f04f 30ff 	mov.w	r0, #4294967295
   1945c:	4601      	mov	r1, r0
}
   1945e:	4770      	bx	lr

00019460 <z_heap_aligned_alloc>:
{
   19460:	b5d0      	push	{r4, r6, r7, lr}
   19462:	b082      	sub	sp, #8
   19464:	4604      	mov	r4, r0
	return __builtin_add_overflow(a, b, result);
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_add_overflow(a, b, result);
   19466:	2300      	movs	r3, #0
   19468:	3204      	adds	r2, #4
   1946a:	d20e      	bcs.n	1948a <z_heap_aligned_alloc+0x2a>
	if (size_add_overflow(size, sizeof(heap_ref), &size)) {
   1946c:	b97b      	cbnz	r3, 1948e <z_heap_aligned_alloc+0x2e>
	mem = k_heap_aligned_alloc(heap, __align, size, K_NO_WAIT);
   1946e:	2600      	movs	r6, #0
   19470:	2700      	movs	r7, #0
   19472:	e9cd 6700 	strd	r6, r7, [sp]
   19476:	f041 0104 	orr.w	r1, r1, #4
   1947a:	4620      	mov	r0, r4
   1947c:	f000 f817 	bl	194ae <k_heap_aligned_alloc>
	if (mem == NULL) {
   19480:	b108      	cbz	r0, 19486 <z_heap_aligned_alloc+0x26>
	*heap_ref = heap;
   19482:	f840 4b04 	str.w	r4, [r0], #4
}
   19486:	b002      	add	sp, #8
   19488:	bdd0      	pop	{r4, r6, r7, pc}
   1948a:	2301      	movs	r3, #1
   1948c:	e7ee      	b.n	1946c <z_heap_aligned_alloc+0xc>
		return NULL;
   1948e:	2000      	movs	r0, #0
   19490:	e7f9      	b.n	19486 <z_heap_aligned_alloc+0x26>

00019492 <k_malloc>:
{
   19492:	b508      	push	{r3, lr}
   19494:	4601      	mov	r1, r0
	void *ret = k_aligned_alloc(sizeof(void *), size);
   19496:	2004      	movs	r0, #4
   19498:	f7fc ffa4 	bl	163e4 <k_aligned_alloc>
}
   1949c:	bd08      	pop	{r3, pc}

0001949e <k_heap_init>:
{
   1949e:	b510      	push	{r4, lr}
   194a0:	f100 040c 	add.w	r4, r0, #12
	list->head = (sys_dnode_t *)list;
   194a4:	60c4      	str	r4, [r0, #12]
	list->tail = (sys_dnode_t *)list;
   194a6:	6104      	str	r4, [r0, #16]
	sys_heap_init(&h->heap, mem, bytes);
   194a8:	f7fe f959 	bl	1775e <sys_heap_init>
}
   194ac:	bd10      	pop	{r4, pc}

000194ae <k_heap_aligned_alloc>:
SYS_INIT_NAMED(statics_init_post, statics_init, POST_KERNEL, 0);
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */

void *k_heap_aligned_alloc(struct k_heap *h, size_t align, size_t bytes,
			k_timeout_t timeout)
{
   194ae:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   194b2:	b085      	sub	sp, #20
   194b4:	4607      	mov	r7, r0
   194b6:	468a      	mov	sl, r1
   194b8:	9203      	str	r2, [sp, #12]
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   194ba:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
   194be:	f7ff ffa3 	bl	19408 <sys_clock_timeout_end_calc>
   194c2:	4606      	mov	r6, r0
   194c4:	4689      	mov	r9, r1
	void *ret = NULL;
	k_spinlock_key_t key = k_spin_lock(&h->lock);
   194c6:	f107 0b14 	add.w	fp, r7, #20
	__asm__ volatile(
   194ca:	f04f 0320 	mov.w	r3, #32
   194ce:	f3ef 8511 	mrs	r5, BASEPRI
   194d2:	f383 8812 	msr	BASEPRI_MAX, r3
   194d6:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_heap, aligned_alloc, h, timeout);

	__ASSERT(!arch_is_in_isr() || K_TIMEOUT_EQ(timeout, K_NO_WAIT), "");

	bool blocked_alloc = false;
   194da:	f04f 0800 	mov.w	r8, #0
	void *ret = NULL;
   194de:	4644      	mov	r4, r8

	while (ret == NULL) {
   194e0:	e00f      	b.n	19502 <k_heap_aligned_alloc+0x54>
			/**
			 * @todo	Trace attempt to avoid empty trace segments
			 */
		}

		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   194e2:	9000      	str	r0, [sp, #0]
   194e4:	9101      	str	r1, [sp, #4]
   194e6:	f107 020c 	add.w	r2, r7, #12
   194ea:	4629      	mov	r1, r5
   194ec:	4658      	mov	r0, fp
   194ee:	f7fc fbd7 	bl	15ca0 <z_pend_curr>
   194f2:	f04f 0320 	mov.w	r3, #32
   194f6:	f3ef 8511 	mrs	r5, BASEPRI
   194fa:	f383 8812 	msr	BASEPRI_MAX, r3
   194fe:	f3bf 8f6f 	isb	sy
	while (ret == NULL) {
   19502:	b9ac      	cbnz	r4, 19530 <k_heap_aligned_alloc+0x82>
		ret = sys_heap_aligned_alloc(&h->heap, align, bytes);
   19504:	9a03      	ldr	r2, [sp, #12]
   19506:	4651      	mov	r1, sl
   19508:	4638      	mov	r0, r7
   1950a:	f7fe f8b7 	bl	1767c <sys_heap_aligned_alloc>
   1950e:	4604      	mov	r4, r0
		now = sys_clock_tick_get();
   19510:	f7fc ff48 	bl	163a4 <sys_clock_tick_get>
		if (!IS_ENABLED(CONFIG_MULTITHREADING) ||
   19514:	b964      	cbnz	r4, 19530 <k_heap_aligned_alloc+0x82>
		    (ret != NULL) || ((end - now) <= 0)) {
   19516:	1a30      	subs	r0, r6, r0
   19518:	eb69 0101 	sbc.w	r1, r9, r1
   1951c:	2801      	cmp	r0, #1
   1951e:	f171 0300 	sbcs.w	r3, r1, #0
   19522:	db05      	blt.n	19530 <k_heap_aligned_alloc+0x82>
		if (!blocked_alloc) {
   19524:	f1b8 0f00 	cmp.w	r8, #0
   19528:	d1db      	bne.n	194e2 <k_heap_aligned_alloc+0x34>
			blocked_alloc = true;
   1952a:	f04f 0801 	mov.w	r8, #1
   1952e:	e7d8      	b.n	194e2 <k_heap_aligned_alloc+0x34>
	__asm__ volatile(
   19530:	f385 8811 	msr	BASEPRI, r5
   19534:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap, aligned_alloc, h, timeout, ret);

	k_spin_unlock(&h->lock, key);
	return ret;
}
   19538:	4620      	mov	r0, r4
   1953a:	b005      	add	sp, #20
   1953c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00019540 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
   19540:	4770      	bx	lr
